<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>HTML - 分類 - 菠菜眾長</title><link>https://lruihao.cn/categories/html/</link><description>HTML - 分類 - 菠菜眾長</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><managingEditor>1024@lruihao.cn (Lruihao)</managingEditor><webMaster>1024@lruihao.cn (Lruihao)</webMaster><lastBuildDate>Fri, 10 May 2019 13:08:27 +0000</lastBuildDate><atom:link href="https://lruihao.cn/categories/html/" rel="self" type="application/rss+xml"/><item><title>条件注释判断浏览器版本&lt;!--[if lt IE 9]>;</title><link>https://lruihao.cn/posts/ifzhushi/</link><pubDate>Fri, 10 May 2019 13:08:27 +0000</pubDate><author>Lruihao</author><guid>https://lruihao.cn/posts/ifzhushi/</guid><description><![CDATA[<blockquote>
<p><span>&lt;!--[if !IE]&gt;&lt;!--&gt; 除 IE 外都可识别 &lt;!--&lt;![endif]--&gt;</span><br><span>&lt;!--[if IE]&gt; 所有的 IE 可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if IE 6]&gt; 仅 IE6 可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if lt IE 6]&gt; IE6 以及 IE6 以下版本可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if gte IE 6]&gt; IE6 以及 IE6 以上版本可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if IE 7]&gt; 仅 IE7 可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if lt IE 7]&gt; IE7 以及 IE7 以下版本可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if gte IE 7]&gt; IE7 以及 IE7 以上版本可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if IE 8]&gt; 仅 IE8 可识别 &lt;![endif]--&gt;</span><br><span>&lt;!--[if IE 9]&gt; 仅 IE9 可识别 &lt;![endif]--&gt;</span></p>
</blockquote>
<table align="center"> <tbody> <tr><th width="50">项目</th><th width="150">范例</th><th>说明</th></tr> <tr> <td align="middle">!</td><td>[if !IE]</td><td>The NOT operator. This is placed immediately in front of the&nbsp;<em>feature</em>,&nbsp;<em>operator</em>, or&nbsp;<em>subexpression</em>&nbsp;to reverse the Boolean meaning of the expression.<br />NOT 运算符。这是摆立即在前面的<em>功能</em>，<em>操作员</em>，或<em>子表达式</em>扭转布尔表达式的意义。</td></tr><tr><td align="middle">lt</td> <td>[if lt IE 5.5]</td> <td>The less-than operator. Returns true if the first argument is less than the second argument.<br />小于运算符。如果第一个参数小于第二个参数，则返回 true。</td> </tr><tr><td align="middle">lte</td><td>[if lte IE 6]</td><td>The less-than or equal operator. Returns true if the first argument is less than or equal to the second argument.<br />小于或等于运算。如果第一个参数是小于或等于第二个参数，则返回 true。</td> </tr><tr><td align="middle">gt</td><td>[if gt IE 5]</td><td>The greater-than operator. Returns true if the first argument is greater than the second argument.<br />大于运算符。如果第一个参数大于第二个参数，则返回 true。</td> </tr><tr><td align="middle">gte</td> <td>[if gte IE 7]</td><td>The greater-than or equal operator. Returns true if the first argument is greater than or equal to the second argument.<br />大于或等于运算。如果第一个参数是大于或等于第二个参数，则返回 true。</td> </tr><tr><td align="middle">( )</td><td>[if !(IE 7)]</td><td>Subexpression operators. Used in conjunction with boolean operators to create more complex expressions.<br />子表达式运营商。在与布尔运算符用于创建更复杂的表达式。</td></tr><tr><td align="middle">&amp;</td><td>[if (gt IE 5)&amp;(lt IE 7)]</td><td>The AND operator. Returns true if all subexpressions evaluate to true<br />AND 运算符。如果所有的子表达式计算结果为 true，返回 true</td></tr><tr><td align="middle">|</td><td>[if (IE 6)|(IE 7)]</td><td>The OR operator. Returns true if any of the subexpressions evaluates to true.<br />OR 运算符。返回 true，如果子表达式计算结果为 true。</td></tr></tbody></table>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!--[if lt IE 9]&gt;
</span></span></span><span class="line"><span class="cl"><span class="c">加载 CSS1
</span></span></span><span class="line"><span class="cl"><span class="c">&lt;!--[else]&gt;
</span></span></span><span class="line"><span class="cl"><span class="c">加载 CSS2
</span></span></span><span class="line"><span class="cl"><span class="c">&lt;![endif]--&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样有效是有效，但是用 HTML VALIDATOR 里，报错，因为这个不符合 XHTML 1.1 的规范，
如果把 ELSE 语句去掉，则正确。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl">加载 CSS2
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--[if lt IE 9]&gt;
</span></span></span><span class="line"><span class="cl"><span class="c">加载 CSS1（可以把要重写的写在这里）.
</span></span></span><span class="line"><span class="cl"><span class="c">&lt;![endif]--&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>前端面试题-HTML+CSS</title><link>https://lruihao.cn/posts/ms-html-css/</link><pubDate>Sat, 30 Mar 2019 22:58:39 +0000</pubDate><author>Lruihao</author><guid>https://lruihao.cn/posts/ms-html-css/</guid><description><![CDATA[<blockquote>
<p><a
  href="https://github.com/ltadpoles/web-document/tree/master/Other"
  
  
    
    target="_blank"
  
  
    rel="external nofollow noopener noreffer"
  
  
  
  
>原文链接</a><br>
“卓越班”到了大三突然掀起一股毕业慌，一部分人投身于考研的热潮中，一部分人选择了培训机构学习技术。而我出于种种原因既不考研也不培训，选择自学 java 和 web 相关的知识，也希望因此能在以后谋得一份心仪的工作。</p>
</blockquote>
<p>如果文章中有出现纰漏、错误之处，还请看到的小伙伴多多指教，先行谢过</p>
<h1 id="html">HTML</h1>
<h2 id="1-doctype-作用html5-为什么只需要写-doctype-html">1. Doctype 作用，HTML5 为什么只需要写 <!DOCTYPE HTML></h2>
<blockquote>
<p>doctype 是一种标准通用标记语言的文档类型声明，目的是告诉标准通用标记语言解析器要使用什么样的文档类型定义（DTD）来解析文档。<code>&lt;!DOCTYPE&gt;</code>声明必须是 HTML 文档的第一行，位于 html 标签之前</p>
</blockquote>
<blockquote>
<p>HTML5 不基于 SGML，所以不需要引用 DTD。在 HTML5 中&lt;!DOCTYPE&gt;只有一种</p>
</blockquote>
<blockquote>
<p>SGML: 标准通用标记语言，是现时常用的超文本格式的最高层次标准</p>
</blockquote>
<h2 id="2-行内元素有哪些块级元素有哪些空-void-元素有那些">2. 行内元素有哪些，块级元素有哪些，空 (void) 元素有那些</h2>
<p>行内元素：<code>a</code> <code>span</code> <code>i</code> <code>img</code> <code>input</code> <code>select</code> <code>b</code> 等</p>
<p>块级元素：<code>div</code> <code>ul</code> <code>ol</code> <code>li</code> <code>h1~h6</code> <code>p</code> <code>table</code> 等</p>
<p>空元素：<code>br</code> <code>hr</code> <code>link</code> 等</p>
<h2 id="3-简述一下你对-html-语义化的理解">3. 简述一下你对 HTML 语义化的理解</h2>
<p>简单来说，就是合适的标签做合适的事情，这样具有以下好处：</p>
<ul>
<li>有助于构架良好的 HTML 结构，有利于搜索引擎的建立索引、抓取，利于 SEO</li>
<li>有利于不同设备的解析</li>
<li>有利于构建清晰的机构，有利于团队的开发、维护</li>
</ul>
<h2 id="4-常见的浏览器内核有哪些介绍一下你对浏览器内核的理解h5">4. 常见的浏览器内核有哪些，介绍一下你对浏览器内核的理解</h5></h2>
<blockquote>
<p>Trident 内核：IE</p>
</blockquote>
<blockquote>
<p>Gecko 内核：NETSCAPE6 及以上版本，火狐</p>
</blockquote>
<blockquote>
<p>Presto 内核：Opera7 及以上。[Opera 内核原为：Presto，现为：Blink;]</p>
</blockquote>
<blockquote>
<p>Webkit 内核：Safari，Chrome 等。[Chrome 的：Blink（WebKit 的分支）]</p>
</blockquote>
<p>浏览器内核又可以分成两部分：<strong>渲染引擎和 JS 引擎。</strong> 渲染引擎主要负责取得网页的内容、整理讯息、计算网页的显示方式等，JS 引擎则是解析 Javascript 语言，执行 javascript 语言来实现网页的动态效果。</p>
<h2 id="5-html5-有哪些新特性">5. html5 有哪些新特性</h2>
<ul>
<li>语义化标签：<code>header</code> <code>footer</code> <code>nav</code> <code>section</code> <code>article</code> <code>aside</code> 等</li>
<li>增强型表单：<code>date</code>（从一个日期选择器选择一个日期） <code>email</code>（包含 e-mail 地址的输入域） <code>number</code>（数值的输入域） <code>range</code>（一定范围内数字值的输入域） <code>search</code>（用于搜索域） <code>tel</code>（定义输入电话号码字段） 等</li>
<li>视频和音频：<code>audio</code> <code>video</code></li>
<li>Canvas 绘图 SVG 绘图</li>
<li>地理定位：<code>Geolocation</code></li>
<li>拖放 API：<code>drag</code></li>
<li>web worker：是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能</li>
<li>web storage: <code>localStorage</code> <code>sessionStorage</code></li>
<li>WebSocket: HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议</li>
</ul>
<h2 id="6-描述一下-cookiesessionstorage-和-localstorage-的区别">6. 描述一下 cookie，sessionStorage 和 localStorage 的区别</h2>
<table>
<thead>
<tr>
<th style="text-align:left">特性</th>
<th style="text-align:left">Cookie</th>
<th style="text-align:left">localStorage</th>
<th style="text-align:left">sessionStorage</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">生命周期</td>
<td style="text-align:left">可设置失效时间，没有设置的话，默认是关闭浏览器后失效</td>
<td style="text-align:left">除非被手动清除，否则将会永久保存</td>
<td style="text-align:left">仅在当前网页会话下有效，关闭页面或浏览器后就会被清除</td>
</tr>
<tr>
<td style="text-align:left">存放数据大小</td>
<td style="text-align:left">4KB 左右</td>
<td style="text-align:left">可以保存 5MB 的信息</td>
<td style="text-align:left">可以保存 5MB 的信息</td>
</tr>
<tr>
<td style="text-align:left">http 请求</td>
<td style="text-align:left">每次都会携带在 HTTP 头中，如果使用 cookie 保存过多数据会带来性能问题</td>
<td style="text-align:left">仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
<td style="text-align:left">仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
</tr>
</tbody>
</table>
<h2 id="7-如何实现浏览器内多个标签页之间的通信">7. 如何实现浏览器内多个标签页之间的通信</h2>
<ul>
<li>使用 localStorage: <code>localStorage.setItem(key,value)</code>、<code>localStorage.getItem(key)</code></li>
<li>websocket 协议</li>
<li>webworker</li>
</ul>
<p><a
  href="https://juejin.im/post/5acdba01f265da23826e5633"
  
  
    
    target="_blank"
  
  
    rel="external nofollow noopener noreffer"
  
  
  
  
>多个标签页之间的通信</a></p>
<h2 id="8-html5-的离线存储怎么使用解释一下工作原理">8. HTML5 的离线存储怎么使用，解释一下工作原理</h2>
<p><a
  href="https://segmentfault.com/a/1190000006984353"
  
  
    
    target="_blank"
  
  
    rel="external nofollow noopener noreffer"
  
  
  
  
>HTML5 的离线存储</a></p>
<h2 id="9-src-与-href-的区别">9. src 与 href 的区别</h2>
<p>区别：src 用于替代这个元素，而 href 用于建立这个标签与外部资源之间的关系</p>
<p><code>&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; /&gt;</code>浏览器加载到这里的时候，html 的渲染和解析不会暂停，css 文件的加载是同时进行的</p>
<p><code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code>当浏览器解析到这句代码时，页面的加载和解析都会暂停直到浏览器拿到并执行完这个 js 文件</p>
<h2 id="10-表单提交中-get-和-post-方式的区别">10. 表单提交中 Get 和 Post 方式的区别</h2>
<ul>
<li>Get 一般用于从服务器上获取数据，Post 向服务器传送数据</li>
<li>Get 传输的数据是拼接在 Url 之后的，对用户是可见的；Post 的传输数据对用户是不可见的</li>
<li>Get 传送的数据量较小，不能大于 2KB。Post 传送的数据量较大，一般被默认为不受限制</li>
<li>Get 安全性非常低，Post 安全性较高</li>
<li>在 FORM 提交的时候，如果不指定 Method，则默认为 Get 请求</li>
</ul>
<h1 id="css">CSS</h1>
<h2 id="1-css-盒子模型box-sizing-属性的理解">1. css 盒子模型，box-sizing 属性的理解</h2>
<p>css 的盒模型由 content（内容）、padding（内边距）、border（边框）、margin（外边距）组成。但盒子的大小由 content+padding+border 这几部分决定</p>
<p>box-sizing 是一个 CSS3 属性，与盒子模型有着密切联系。即决定元素的宽高如何计算，box-sizing 有三个属性：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="nt">box-sizing</span><span class="o">:</span> <span class="nt">content-box</span><span class="o">|</span><span class="nt">border-box</span><span class="o">|</span><span class="nt">inherit</span><span class="o">:</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>content-box 使得元素的宽高即为内容区的宽高（默认模式）</li>
<li>border-box: 计算方式 content + padding + border = 本身元素大小，即缩小了 content 大小</li>
<li>inherit 指定 box-sizing 属性的值，应该从父元素继承</li>
</ul>
<h2 id="2-清除浮动什么时候需要清除浮动清除浮动都有哪些方法">2. 清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法</h2>
<p>浮动的元素是脱离文档标准流的，如果我们不清楚浮动，那么就会造成<strong>父元素高度塌陷</strong>，影响页面布局。</p>
<p>清除浮动的方式：</p>
<ul>
<li>为父元素设置高度</li>
<li>为父元素添加<code>overflow:hidden</code></li>
<li>伪元素</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">.</span><span class="nc">fix</span><span class="p">::</span><span class="nd">after</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">     <span class="k">content</span><span class="p">:</span><span class="s2">&#34;&#34;</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">     <span class="k">display</span><span class="p">:</span><span class="kc">block</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">     <span class="k">clear</span><span class="p">:</span><span class="kc">both</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用伪元素的好处：不增加冗余的 DOM 节点，符合语义化</p>
<blockquote>
<p>overflow:hidden 可以触发 BFC 机制。BFC：块级格式化上下文，创建了 BFC 的元素就是一个独立的盒子，它规定了内部如何布局，并且与这个独立盒子里的布局不受外部影响，当然它也不会影响到外面的元素，<strong>计算 BFC 的高度时，浮动元素也参与计算</strong></p>
</blockquote>
<h2 id="3-如何让一个不定宽高的盒子水平垂直居中">3. 如何让一个不定宽高的盒子水平垂直居中</h2>
<blockquote>
<p>定位的方式</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">.</span><span class="nc">father</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">son</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">top</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">right</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">bottom</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">left</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">margin</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>css3 属性</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">.</span><span class="nc">father</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">son</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">top</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">left</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">transform</span><span class="p">:</span> <span class="nb">translate</span><span class="p">(</span><span class="mi">-50</span><span class="kt">%</span><span class="p">,</span> <span class="mi">-50</span><span class="kt">%</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>flex 布局</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">.</span><span class="nc">father</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">justify-content</span><span class="p">:</span> <span class="kc">center</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">align-items</span><span class="p">:</span> <span class="kc">center</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="4-px-和-em-和-rem-的区别">4. px 和 em 和 rem 的区别</h2>
<blockquote>
<p><code>px</code>: 像素，相对长度单位。像素<code>px</code>是相对于显示器屏幕分辨率而言的</p>
</blockquote>
<blockquote>
<p><code>em</code>的值并不是固定的，会继承父级元素的字体大小，代表倍数</p>
</blockquote>
<blockquote>
<p><code>rem</code>的值并不是固定的，始终是基于根元素 <code>&lt;html&gt;</code> 的，也代表倍数</p>
</blockquote>
<h2 id="5-position-的值有哪些">5. position 的值有哪些</h2>
<blockquote>
<p>static： 默认值。没有定位，元素出现在正常的流中</p>
</blockquote>
<blockquote>
<p>relative（相对定位）：生成相对定位的元素，相对于其正常（原先本身）位置进行定位</p>
</blockquote>
<blockquote>
<p>absolute（绝对定位）：生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位</p>
</blockquote>
<blockquote>
<p>fixed（固定定位）：生成绝对定位的元素，相对于浏览器窗口进行定位</p>
</blockquote>
<h2 id="6-displaynone-与-visibilityhidden-的区别">6. display:none 与 visibility：hidden 的区别</h2>
<table>
<thead>
<tr>
<th>区别</th>
<th>display:none</th>
<th>visibility：hidden 的</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否占据空间</td>
<td>不占据任何空间，在文档渲染时，该元素如同不存在（但依然存在文档对象模型树中）</td>
<td>该元素空间依旧存在</td>
</tr>
<tr>
<td>是否渲染</td>
<td>会触发 reflow（回流），进行渲染</td>
<td>只会触发 repaint（重绘），因为没有发现位置变化，不进行渲染</td>
</tr>
<tr>
<td>是否是继承属性</td>
<td>不是继承属性，元素及其子元素都会消失</td>
<td>是继承属性，若子元素使用了 visibility:visible，则不继承，这个子孙元素又会显现出</td>
</tr>
</tbody>
</table>
<h2 id="7-css-中-link-和import-的区别">7. CSS 中 link 和@import 的区别</h2>
<blockquote>
<p>link 属于 XHTML 标签，@import 完全是 CSS 提供的一种方式，只能加载 CSS</p>
</blockquote>
<blockquote>
<p>加载顺序的差别，当一个页面被加载的时候，link 引用的 CSS 会同时被加载，而@import 引用的 CSS 会等到页面全部被下载完再被加载</p>
</blockquote>
<blockquote>
<p>兼容性的差别。由于@import 是 CSS2.1 提出的所以老的浏览器不支持，而 link 标签无此问题</p>
</blockquote>
<blockquote>
<p>当使用 javascript 控制 dom 去改变样式的时候，只能使用 link 标签，因为@import 不是 dom 可以控制的</p>
</blockquote>
<h2 id="8-什么是响应式设计响应式设计的基本原理是什么">8. 什么是响应式设计，响应式设计的基本原理是什么</h2>
<blockquote>
<p>响应式网站设计是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理</p>
</blockquote>
<h2 id="9-为什么要初始化-css-样式">9. 为什么要初始化 CSS 样式</h2>
<blockquote>
<p>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对 CSS 初始化往往会出现浏览器之间的页面显示差异</p>
</blockquote>
<blockquote>
<p>初始化样式会对 SEO 有一定的影响</p>
</blockquote>
<h2 id="10-css3-有哪些新特性">10. CSS3 有哪些新特性</h2>
<ul>
<li>实现圆角<code>border-radius</code>，阴影<code>box-shadow</code>，边框图片<code>border-image</code></li>
<li>对文字加特效<code>text-shadow</code>，强制文本换行<code>word-wrap</code>，线性渐变<code>linear-gradient</code></li>
<li>实现旋转<code>transform:rotate(90deg)</code>, 缩放<code>scale(0.85,0.90)</code>,<code>translate(0px,-30px)</code>定位，倾斜<code>skew(-9deg,0deg)</code>;</li>
<li>增加了更多的 CSS 选择器、多背景、<code>rgba()</code></li>
<li>唯一引入的伪元素是<code>::selection</code>；</li>
<li>实现媒体查询<code>@media</code>，多栏布局<code>flex</code></li>
<li>过渡<code>transition</code> 动画<code>animation</code></li>
</ul>
<h2 id="11-before-和-after-中双冒号和单冒号有什么区别解释一下这-2-个伪元素的作用">11. ::before 和 :after 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用</h2>
<blockquote>
<p>单冒号 (:) 用于 CSS3 伪类，双冒号 (::) 用于 CSS3 伪元素。（伪元素由双冒号和伪元素名称组成）, 双冒号是在当前规范中引入的，用于区分伪类和伪元素</p>
</blockquote>
<h2 id="12-css-优化提高性能的方法有哪些">12. CSS 优化、提高性能的方法有哪些</h2>
<ul>
<li>移除空的 css 规则（Remove empty rules）</li>
<li>正确使用 display 的属性</li>
<li>不滥用浮动、web 字体</li>
<li>不声明过多的 font-size</li>
<li>不在选择符中使用 ID 标识符</li>
<li>遵守盒模型规则</li>
<li>尽量减少页面重排、重绘</li>
<li>抽象提取公共样式，减少代码量</li>
</ul>
<h2 id="13-重绘和回流">13. 重绘和回流</h2>
<p><a
  href="https://juejin.im/post/5a9923e9518825558251c96a"
  
  
    
    target="_blank"
  
  
    rel="external nofollow noopener noreffer"
  
  
  
  
>重绘和回流</a></p>
<h2 id="14-flex-布局">14. flex 布局</h2>
<p><a
  href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html"
  
  
    
    target="_blank"
  
  
    rel="external nofollow noopener noreffer"
  
  
  
  
>flex 布局教程&ndash;阮一峰</a></p>
<h2 id="15-css-预处理器">15. css 预处理器</h2>
<p>提供了一种 css 的书写方式，常见的就是 <a
  href="http://sass.bootcss.com/docs/sass-reference/"
  
  
    
    target="_blank"
  
  
    rel="external nofollow noopener noreffer"
  
  
  
  
>SAAS 文档</a> 和 <a
  href="https://less.bootcss.com/"
  
  
    
    target="_blank"
  
  
    rel="external nofollow noopener noreffer"
  
  
  
  
>LESS 文档</a></p>]]></description></item></channel></rss>