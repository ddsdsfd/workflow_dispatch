<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Java - 分類 - 菠菜眾長</title><link>https://lruihao.cn/categories/java/</link><description>Java - 分類 - 菠菜眾長</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1024@lruihao.cn (Lruihao)</managingEditor><webMaster>1024@lruihao.cn (Lruihao)</webMaster><lastBuildDate>Wed, 08 May 2019 20:55:02 +0000</lastBuildDate><atom:link href="https://lruihao.cn/categories/java/" rel="self" type="application/rss+xml"/><item><title>java 实现一个单线程的资源下载器</title><link>https://lruihao.cn/posts/singlethreaddown/</link><pubDate>Wed, 08 May 2019 20:55:02 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/singlethreaddown/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/SingleThreadDown/images/1.png" referrerpolicy="no-referrer">
            </div><blockquote>
<p>实现一个简单的基于单线程的资源下载器，如图所示，用户可以任意指定下载资源的链接地址，系统根据该地址判断资源是否存在，如果存在，则将该资源下载到本地。</p>
</blockquote>]]></description></item><item><title>java 通过 URL 和 URLConnection 访问网页资源</title><link>https://lruihao.cn/posts/urlreader/</link><pubDate>Mon, 06 May 2019 17:41:35 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/urlreader/</guid><description>&lt;blockquote>
&lt;p>该例中首先生成一个URL对象lrh，指向RUI豪小栈，然后再调用lrh.openStream()方法生成该URL的一个输入流，这是一个字节流，在此基础上进一步通过InputStreamReader和BufferedReader构造一个带缓冲功能的字符流，并通过这个字符流对象读取该URL的html内容，进而输出到桌面文件和控制台屏幕。URLConnection类也可以用来对由URL引用的资源进行读写操作，前提是先通过connect()方法建立连接，然后再去获取响应头信息或响应内容。&lt;/p>
&lt;/blockquote></description></item><item><title>文件加密解密（字节流）</title><link>https://lruihao.cn/posts/byteio/</link><pubDate>Thu, 02 May 2019 23:04:32 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/byteio/</guid><description><![CDATA[<blockquote>
<p>基本功能： 给定一个密钥，读取文件内容，加密后，输出到另外一个文件。<br/><br/>
这里使用文件输入流读取文件内容，然后每个字节和密码进行异或简单加密。加密完成，使用文件输出流写入另一个文件中。解密和加密方法一样。利用的是对同一个数异或两遍其值不变的性质。因此一个程序可以完成加密和解密功能。只需修改文件名即可。</p>
</blockquote>]]></description></item><item><title>模拟借书系统（java异常练习）</title><link>https://lruihao.cn/posts/javaexception/</link><pubDate>Wed, 01 May 2019 16:52:21 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/javaexception/</guid><description>&lt;div class="featured-image">
&lt;img src="/posts/JavaException/images/1.png" referrerpolicy="no-referrer">
&lt;/div></description></item><item><title>用记事本编写第一个java程序</title><link>https://lruihao.cn/posts/hellojava/</link><pubDate>Fri, 19 Apr 2019 19:49:54 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/hellojava/</guid><description><![CDATA[<blockquote>
<p>之所以用记事本来写不是为了装X或者什么的。反而恰恰是返璞归真，因为在用java语言进行程序开发时，首先是以纯文本的方式编写所有的java源程序，并保存成以<code>.java</code>为后缀的文件；然后将这些源程序用<code>javac</code>编译成<code>.class</code>后缀名的字节代码文件；字节代码不是被本地处理器执行的代码，而是能够被java虚拟机（JVM）执行的代码。最后用java运行工具在JVM执行java应用程序。<br>
由于JVM可以运行在不同的操作系统上，因此同一个字节代码文件可以跨平台运行。</p>
</blockquote>
<ul>
<li>javac</li>
<li>java</li>
</ul>]]></description></item><item><title>java正则表达式练习</title><link>https://lruihao.cn/posts/regexdemo/</link><pubDate>Thu, 18 Apr 2019 22:04:21 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/regexdemo/</guid><description><![CDATA[邮箱 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import java.util.regex.Matcher; import java.util.regex.Pattern; public class RegexDemo { public static void main(String[] args) { // Pattern类 正则表达式的编译表示。 Pattern pattern = Pattern.compile(&#34;^[a-zA-Z0-9_!#$%&amp;&#39;*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$&#34;); String[] emails = {&#34;admin@lruihao.cn&#34;, &#34;lruihao.cn&#34;}; for (String email : emails) { //Matcher 通过]]></description></item><item><title>java 常用类</title><link>https://lruihao.cn/posts/stringbuffer/</link><pubDate>Sun, 14 Apr 2019 10:12:44 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/stringbuffer/</guid><description>StringBuffer/StringBuilder(掌握) StringBuffer是线程安全的可变字符串。 StringBuilder是线程</description></item><item><title>Java父类子类的对象初始化过程</title><link>https://lruihao.cn/posts/substatus/</link><pubDate>Thu, 21 Mar 2019 13:36:25 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/substatus/</guid><description>&lt;blockquote>
&lt;p>摘要: Java基本的对象初始化过程，子类的初始化，以及涉及到父类和子类的转化时可能引起混乱的情况。&lt;/p>
&lt;/blockquote></description></item><item><title>java 泛型 test</title><link>https://lruihao.cn/posts/fanxing/</link><pubDate>Sat, 16 Mar 2019 13:56:01 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/fanxing/</guid><description><![CDATA[<blockquote>
<ul>
<li>泛型方法，它在修饰符后，返回值类型前增加了类型参数(&lt;&gt;)</li>
<li>类型通配符一般使用问号<code>?</code>代替具体的类型<code>实</code>参，注意不是类型形参。</li>
</ul>
</blockquote>]]></description></item><item><title>匿名类在可视化界面中的应用</title><link>https://lruihao.cn/posts/qframe/</link><pubDate>Fri, 15 Mar 2019 22:31:28 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/qframe/</guid><description><![CDATA[<blockquote>
<p>java中匿名类用的最多的地方就是可视化界面设计中，特别是将<code>事件监听器</code>注册到某个组件上的时候。</p>
</blockquote>]]></description></item></channel></rss>