[{"categories":["Git"],"content":" 工作区：就是你在电脑里能看到的目录。 暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。 版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。 介绍 先通过几张图片来大致了解一下 Git 的工作原理吧！ 文章开头的流程图已经简单明了地说明了 Git 常用操作的工作流程，下图换种风格再展示一次： 提到 Git 就会联想到 github, 下图从 Git 的角度简单说明了一些 Github 常用操作的关系： 下面这个图则展示了工作区、版本库中的暂存区和版本库之间的关系： 图中左侧为工作区，右侧为版本库。在版本库中标记为 \"index\" 的区域是暂存区（stage, index），标记为 “master” 的是 master分支所代表的目录树。 HEAD指针: 每个git仓库有且仅有一个HEAD指针，它通常指向當前某个活動的本地分支指针(最初本地仓库master)。也可以是某个提交记录、某个tag，但这会让其处于 detached HEAD（游离头）状态，此状态下的所有提交都无效。 图中我们可以看出此时 \"HEAD\" 实际是指向 master 分支的一个\"游标\"。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 图中的objects标识的区域为 Git 的对象库，实际位于 \".git/objects\" 目录下，里面包含了创建的各种对象及内容。 当对工作区修改（或新增）的文件执行 \"git add\"命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。 当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。 当执行 \"git reset HEAD\" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。 当执行 \"git rm --cached \u003cfile\u003e\" 命令时，会直接从暂存区删除文件，工作区则不做出改变。 当执行 \"git checkout .\" 或者 \"git checkout -- \u003cfile\u003e\" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。 当执行 \"git checkout HEAD .\" 或者 \"git checkout HEAD \u003cfile\u003e\" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。 基本常用命令 第一次使用git的时候，需要设置用户信息和用户邮箱，用于辨识提交者身份。 git config --global user.name \u003cgit用户名\u003e git config --global user.email \u003c邮箱地址\u003e git config --list # 查看当前用户信息 ","date":"2018-10-30","objectID":"/posts/git/:0:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"基本操作 git init # 把当前的目录变成可以用git进行版本控制的git仓库，生成隐藏.git文件。 git add XX # 把xx文件添加到暂存区去。 git add –A # git add --all的缩写，添加全部到暂存区 git add –u # 把文件的删除和修改添加到暂存区（不包括新增） git add . # 监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区 git commit -m \"message\" # 从暂存区提交到本地仓库 git commit -a -m \"message\" # 相当于省略git add，但是无法提交新增的文件 git push origin master # Git会把master分支推送到远程库对应的远程分支上 Tips “commit message\"内容尽量规范！ 当某一次提交后，突然想起漏提交了文件，或不小心提交了不满意的代码时， 可以使用git commit --amend -m \"message\"指令。它可以在不增加一个新的commit-id的情况下将新修改的代码追加到前一次的commit-id中。提交之后message也将被本次的message覆盖，所以还需要再次添加上次的message。 ","date":"2018-10-30","objectID":"/posts/git/:1:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"push git push origin branch-name git push –u origin master git push origin --delete branch-name # 删除远程分支 把当前master分支推送到远程库; -u表示记住分支和地址，下次使用git push即可。 ","date":"2018-10-30","objectID":"/posts/git/:2:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"remote git remote add origin reposityUrl # 关联一个远程库 git remote # 查看远程库的信息 git remote –v # 查看远程库的详细信息 ","date":"2018-10-30","objectID":"/posts/git/:3:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"clone git clone reposityUrl # 从远程库中克隆 git clone -b branchName reposityUrl # 克隆指定分支 ","date":"2018-10-30","objectID":"/posts/git/:4:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"pull git pull 从远程仓库拉下来到本地库然后合并相当于git fetch+git merge。 一般push前先拉去最新版本，避免代码冲突，如果有冲突需要解决了冲突才能提交。 import repositories同步更新 git pull 原链接 git push origin master ","date":"2018-10-30","objectID":"/posts/git/:5:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"fetch git fetch # 从远程库抓下最新版本，但是不合并 fetch是从远程库到本地库，但是未在工作区，需要git merge ","date":"2018-10-30","objectID":"/posts/git/:6:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"merge git merge dev # 在当前的分支上合并dev分支 分支合并也是在本地完成(从本地库到工作区)，新的分支只有在合并后才允许被删除。 如果分支合并是出现冲突需要解决了冲突才能合并，使用git status查看冲突文件。 ","date":"2018-10-30","objectID":"/posts/git/:7:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"branch,checkout git branch # 查看当前所有的分支 git branch name # 创建分支 git branch –r # 看远程所有分支 git branch –a # 查看本地远程分支 git branch –d name # 删除分支 git checkout name # 切换分支 git checkout –b name # 创建并切换到name分支上 git checkout -- file git checkout -- file相当于取消对文档的修改，将最新的本地版本库的本文件复制覆盖它。（比较危险！） ","date":"2018-10-30","objectID":"/posts/git/:8:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"reflog,log git log # 显示所有提交过的版本信息：commit id，提交者，日期 git reflog # 查看历史记录的commit id Tips 想看到自己的操作记录，则可以使用log与reflog，它两个的区别如下: git log命令可以显示所有提交过的版本信息； 如果感觉太繁琐，可以加上参数--pretty=oneline，只会显示版本号和提交时的备注信息。 git reflog可以查看所有分支的所有操作记录。（包括已经被删除的commit记录和reset的操作） ","date":"2018-10-30","objectID":"/posts/git/:9:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"reset git reset --hard HEAD^ git reset --hard HEAD~ # 回退到上一个版本 git reset --hard HEAD~100 # 回退到100个版本 git reset head -- file # 不加file则全部退回 git reset file # 将本地仓库的当前版本退回至暂存区，相当于取消暂存 版本退回是从本地仓库到暂存区，如果已经提交远程库，此时的版本是低于最新的版本的会拒绝提交， 需要用git push -f origin master强制提交。 特别提醒 如果你git reset --hard HEAD^+git push -f origin master执行完，github中的记录和本地文件都会回到退回的状态。简单来说就是一修改了一天的bug,完工后，你这一套操作直接打回原形。别慌（实际内心慌的一麻皮。。。） 通过git log -g命令来找到需要恢复的信息对应的commitid，可以通过提交的时间和记录来辨别, 找到执行reset --hard之前的那个commit对应的commit-id 通过git branch recover_branch commit-id 来建立一个新的分支 这样，就把到commitid为止的代码、各种提交记录等信息都恢复到了recover_branch分支上了。 ","date":"2018-10-30","objectID":"/posts/git/:10:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"status git status 查看你的文件在暂存区和工作目录的状态，默认是较为详细的显示，并提示你可以用何种命令完成你接下来可能要做的事情。 git status -s 较为简单的输出当前的状态，如： $ git status -s M README.md D hello.rb ?? world.java 你可以看到，在简短输出中，有两栏。第一栏是暂存区的，第二栏则是工作目录的。这里表示： README.md 在暂存区中的状态是 modify hello.rd 在工作目录中的状态是 delete world.java 还未添加到版本控制。 ","date":"2018-10-30","objectID":"/posts/git/:11:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"diff git diff XX # 查看XX文件修改了哪些内容 git diff # 工作目录和暂存区 git diff --cached # 暂存区和本地仓库 git diff HEAD # 工作目录和本地仓库 git diff --stat # 显示信息摘要 ","date":"2018-10-30","objectID":"/posts/git/:12:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"rm, mv git rm # 将文件从暂存区和工作目录删除，-f 为强制删除 git rm filename # 删除文件 git rm –r dirname # 删除文件夹 –r 表示递归所有子目录 git rm --cached \u003cpath\u003e # 将文件从暂存区中删除 git mv \u003cold_path\u003e \u003cnew_path\u003e git rm用来删除文件、目录。git mv命令用于移动或重命名一个文件、目录。 比如删除photos文件，本地删除后，远程仓库还会有，所以 git rm -r photos git commit -m \"删除相册\" git push ","date":"2018-10-30","objectID":"/posts/git/:13:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"submodule git submodule add # 添加子模组 git submodule init # 子模组初始化 git submodule update # 子模组更新 Note 当一个远程库有子模组时，直接clone子模组只是一个空文件夹，需要进入子模组的空文件夹init和update才行。 或者使用递归克隆git clone --recursive 远程库 子模组更新后，父模组必须更新，因为需要更新commit id。 ","date":"2018-10-30","objectID":"/posts/git/:14:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"tag git tag v1.0 git tag -a v1.0 # 给最新一次提交打标签 git tag -a \u003ctagname\u003e -m \"标签\" # 指定标签信息命令 git show \u003ctagname\u003e # 显示标签信息 git tag # 查看版本打的Tag git tag -d v1.0 # 删除本地标签 git push origin :refs/tags/v1.0 # 删除远程标签 $ git push [remote] [tag] # 提交指定tag $ git push [remote] --tags # 提交所有tag Note 当你执行git tag -a命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。 如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。 例如，假设我们发布了提交85fc7e7(最后一行)，但是那时候忘了给它打标签。 我们现在也可以： $ git tag -a v0.9 85fc7e7 $ git log --oneline --decorate --graph * d5e9fc2 (HEAD -\u003e master) Merge branch 'change_site' |\\ | * 7774248 (change_site) changed the runoob.php * | c68142b 修改代码 |/ * c1501a2 removed test.txt、add runoob.php * 3e92c19 add test.txt * 3b58100 (tag: v0.9) 第一次版本提交 ","date":"2018-10-30","objectID":"/posts/git/:15:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"stash git stash # 把当前的工作隐藏起来，等以后恢复现场后继续工作 git stash list # 查看所有被隐藏的文件列表 ","date":"2018-10-30","objectID":"/posts/git/:16:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["Git"],"content":"gitk gitk # git自带GUI gitk --all github,gitea等平台issue的常用标签 bug 描述的问题是一个bug enhancement 功能增强，没有feature也可以指 New feature or request feature 新功能 duplicate 问题重复 invalid 可用的，不是bug question 疑问，需要进一步的信息 wontfix 不会修复此问题 help-wanted 需要帮助 good first issue Good for newcomers 更多标签 license 其他 github上fork了别人的项目后，再同步更新别人的提交 常用Git命令清单 Gearn Git Branching ","date":"2018-10-30","objectID":"/posts/git/:17:0","tags":["Git"],"title":"Git常用指令汇总","uri":"/posts/git/"},{"categories":["PHP"],"content":" 基于Laravel7开发，Markdown语法的个人独立博客。Cell Blog,也是我的毕业设计作品，目前已開源。 功能 支持Markdown,文章实时预览效果 支持多种编程语言代码高亮 编辑器图片上传 后台上传文件管理 文章搜索 文章分类 文章标签 热门文章 随机格言 文章管理(发布，评论开关，排序) 自定义导航(显示开关，排序) 自定义页面(发布开关) 友情链接(显示开关，排序) COS桶相册 丰富的博客配置(方便扩展，支持自定义JS脚本) 不蒜子计数 Leancloud计数 Valine评论插件 文章分享插件 截图 安装 注意事项：PHP取消禁用函数putenv()和symlink()，安装fileinfo扩展。 下载 git clone https://github.com/Lruihao/cell-blog.git 进入站点 cd cell-blog 生成.env cp .env.example .env 编辑.env环境配置 APP_URL=http://localhost #使用本地文件系统存储文件时，必须填写正确地址 APP_DEBUG=false #关闭调试 DB_HOST= #数据库地址 DB_PORT=3306 #数据库端口 DB_DATABASE= #数据库名称 DB_USERNAME= #数据库用户 DB_PASSWORD= #数据库密码 打开app\\Providers\\AppServiceProvider.php,注释SystemController:load() 防止后续步骤报错 public function boot() { Schema::defaultStringLength(191); //SystemController::load(); } 安装项目依赖 composer install 生成key php artisan key:generate 运行数据迁移和后台数据填充 php artisan admin:install已包含数据迁移命令php artisan migrate G:\\cell-blog\\app\\Admin directory already exists !无需理会，继续执行剩下命令即可。 php artisan admin:install php artisan admin:import media-manager php artisan db:seed 默认下使用了本地文件系统，创建storage目录在public的软链接 php artisan storage:link 打开app\\Providers\\AppServiceProvider.php,取消注释SystemController:load() public function boot() { Schema::defaultStringLength(191); SystemController::load(); } 将博客网站根目录指向入口public目录 如果使用Nginx，要设置伪静态 location / { try_files $uri $uri/ /index.php?$query_string; } 启动服务后，在浏览器打开http://localhost/admin/,使用用户名admin和密码admin登录. License Cell Blog is open-sourced software licensed under the MIT license. ","date":"2020-07-25","objectID":"/posts/cell-blog-install/:0:0","tags":["PHP","Laravel","Markdown","Backend"],"title":"cell-blog 功能介绍与安装","uri":"/posts/cell-blog-install/"},{"categories":["JavaScript"],"content":"信息 cos桶相册，终于！！终于来了！！，思路参考自给hexo静态博客添加动态相册功能， 功能虽好，但是还是先友情提示！ 开放API是一个很危险的操作，意味着你的cos桶里面的所有资源包括目录结构都暴露的整个世界中，所以建议不要放一些比较私密的照片，保护自己的隐私，提防不良用心之人。下面就开始吧！ 创建腾讯云cos存储桶 就创建一个COS就好了！有几点注意事项： 权限设置为共有读私有写 policy权限设置整个桶的读操作 跨域访问CORS设置，自己随意 上传照片 首先我这个cos相册，相册分类就是文件夹分类，所以cos桶里面先新建不同的文件夹，文件夹名称就是相册名称， 每个相册里面需要放置一张名称为**“封面.jpg”**的图片作为该相册的封面。 ","date":"2019-11-24","objectID":"/posts/cos-album/:0:0","tags":["腾讯云cos桶","Frontend","JavaScript"],"title":"利用腾讯云为静态页面添加“动态”相册","uri":"/posts/cos-album/"},{"categories":["JavaScript"],"content":"上传工具 COSBrowser GUI工具,桌面/移动版 【官方、推荐】 COSCMD 命令行工具 【官方】 PicGo 图床上传工具 【第三方、推荐】 食用方式 下载地址，别忘点赞哈 首先，下载源码，引入cos-album.css和cos-album.js 然后，在你的js中new一个Cosalbum对象(xmlLink后不需要添加/) ","date":"2019-11-24","objectID":"/posts/cos-album/:1:0","tags":["腾讯云cos桶","Frontend","JavaScript"],"title":"利用腾讯云为静态页面添加“动态”相册","uri":"/posts/cos-album/"},{"categories":["JavaScript"],"content":"Step1 \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"cos-album.min.css?v=1.1.2\"\u003e \u003cscript type=\"text/javascript\" src=\"cos-album.min.js?v=1.1.2\"\u003e\u003c/script\u003e ","date":"2019-11-24","objectID":"/posts/cos-album/:2:0","tags":["腾讯云cos桶","Frontend","JavaScript"],"title":"利用腾讯云为静态页面添加“动态”相册","uri":"/posts/cos-album/"},{"categories":["JavaScript"],"content":"Step2 \u003cscript type=\"text/javascript\"\u003e new Cosalbum({ 'xmlLink': 'https://img-xxxxxxxxxx.cos.ap-chengdu.myqcloud.com', 'prependTo': '.cos-album', 'viewNum': 8, 'imgUrl': '//img.lruihao.cn' }); \u003c/script\u003e ","date":"2019-11-24","objectID":"/posts/cos-album/:3:0","tags":["腾讯云cos桶","Frontend","JavaScript"],"title":"利用腾讯云为静态页面添加“动态”相册","uri":"/posts/cos-album/"},{"categories":["JavaScript"],"content":"Params param type default description xmlLink String 需要解析的騰訊云COS桶XML鏈接 prependTo String ‘body’ 可選解析相冊到某個節點 viewNum Number 4 每個相冊顯示的照片數目 copyUrl String href CDN 链接,雙擊複製 URL Since: 1.1.6 imgType String [‘jpg’, ‘jpeg’, ‘png’, ‘gif’, ‘svg’] 图片類型 Since: 1.1.6 videoType String [‘mp4’, ‘mp3’, ‘avi’, ‘mov’, ‘qt’] 視頻類型 Since: 1.1.6 viewport视个人情况添加。 hexo中使用时css和js都需要做适当调整，配合加密功能使用等等，这里不再展开。 注：代码设定不加载根目录文件，所以可以利用静态服务把源码部署在根目录，配合PicGo、COSBrowser上传来搭建个人图床。 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003ctitle\u003ecos-album\u003c/title\u003e \u003c!-- \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e --\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"cos-album.css\"\u003e \u003cscript type=\"text/javascript\" src=\"cos-album.js\" defer\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript type=\"text/javascript\"\u003e new Cosalbum({ 'xmlLink': 'https://img-xxxxxxxxxx.cos.ap-chengdu.myqcloud.com', 'prependTo': '.cos-album', 'viewNum': 8, 'copyUrl': '//img.lruihao.cn' }); \u003c/script\u003e \u003c!-- 你的其他内容，如评论等 --\u003e \u003c/body\u003e \u003c/html\u003e cos-album demo changelog 2020-9-28 22:46 升級：相冊封裝成類，可以更方便new出來 優化：相冊圖片樣式優化 2019-11-24 10:52:34 修改整理了一下代码，分割功能为函数，并写了注释，更加方便伸手党! 未实现 fancybox 加密功能 分页显示 ","date":"2019-11-24","objectID":"/posts/cos-album/:4:0","tags":["腾讯云cos桶","Frontend","JavaScript"],"title":"利用腾讯云为静态页面添加“动态”相册","uri":"/posts/cos-album/"},{"categories":null,"content":"暫時不接受友鏈！ Warn: 超過兩年為更新或長期挂掉的站點將被取消！ -- 基本資訊 名稱：菠菜眾長 地址：https://lruihao.cn 描述：不怕萬人阻擋，只怕自己投降 Logo： avatar 或 gravatar 友情提醒 互換友鏈請按以上格式在評論留言。（僅限個人非商業部落格/網站）。 Warn: 網站失效、停止維護、內容不當都可能被取消連結！ 那些不尊重他人勞動成果，轉載不加出處的，或惡意行為的網站，還請您不要來進行交換了。 ","date":"2021-09-19","objectID":"/friends/:0:0","tags":null,"title":"友鏈","uri":"/friends/"},{"categories":null,"content":" 非常感谢朋友们的 coffee ~ 2018.09.28 francs AliPay ￥50 作为一个大学生，第一次在网上收到别人的支持，内心表示受宠若惊又非常开心。拿这 50 块买了半年腾讯云服务器!真的非常感谢老哥的支持！ 2018.10.26 francs QQ ￥8.8 今天学校运动会没课，睡到 9 点多起来看到 QQ 收到一个红包，也是很开心！感谢支持！ 2018.11 francs QQ ￥8.8 2018.12.04 * 昌升 AliPay ￥10 上课的时候听到了支付宝清脆的支付宝到账10元的声音！感谢评论区匿名打赏的兄dei! 2018.12.04 * 昌升 AliPay ￥18 晚上加了一个qq好友，聊天之中又收到支付宝的提示，才知道是谁打赏的，真的很感谢每笔打赏！ 2019.03.19 A*r WechatPay ￥2 2019 收到的第一笔打赏！每一份打赏支持我都心存感激！谢谢各位兄弟！231****047#qq.com 2020.01.17 * 喜洲 QQ ￥20.20 时隔一年再次因为这个博客收到打赏，谢谢大家看得起！有关博客的问题，我能解答的都会帮助你们。101****073 ","date":"2021-09-13","objectID":"/guestbook/:0:0","tags":null,"title":"留言","uri":"/guestbook/"},{"categories":null,"content":" hacknical gitmemory ","date":"2021-09-07","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"期許 不卑不亢，不矜不伐，不驕不躁 不嗔，不怒，不爭，獨善其身 ","date":"2021-09-07","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["生活随笔"],"content":"後知後覺 2020 已經過去半年了，由於情緒過於複杂，一直不想去回憶總結那操蛋的一年。今天疫情原因居家辦公，得空靜下來，和自己對話，不知从何說起，想到哪寫到哪吧。 2020 始於新冠，終於疫情。中間夾雜太多遺憾，離別和壓力，20年可以説从年頭到年尾都糟糕透了。 ","date":"2021-06-21","objectID":"/years/2020-2021/:0:0","tags":["总结","生活随笔"],"title":"和自己對話-2020\u00262021 總結","uri":"/years/2020-2021/"},{"categories":["生活随笔"],"content":"離 首先是和 zxm 分手了，過程太糟心的，無疑成為了我一年渾渾噩噩的最大因素。 最後那段時光真的不想記住，這裡也就不再回憶了。就當衹是 19 年底最後的願望落空了吧。 分開后那個夏天酒勁大了很多， 也開始抽煙，記不得抽了多少隻烟，只知道手臂上多了幾個抽煙發呆不小心燙的煙疤。 分開後，各種不理智的打擾幾乎都是我。如果知道註定終有一別，我們應該好好說一聲再見的。 而不是一年后我看夠了你討厭我的樣子，諾諾地放下，不斷告訴自己她已經走遠了。 此次“告別”，拖的晚了些，真是抱歉了，和你在一起度過整个大學生涯，湖工一草一木都曾見證過我們的甜蜜，一起在ACM刷題，一起在圖書館學習，一起吃吃吃，當然還有煩人的爭吵。那過去四年，我從未感覺過的幸福，以及…遺憾。 其實和你分開到現在，我總會在半夜想起你，可這讓我真的太糾結了。想到你會讓我很痛苦，可若讓我忘記你，我是真的捨不得。可能你不會知道，其他人也不會知道，還記得你送我的哪個熱水袋的毛絨娃娃嗎，它也許知道。 可是，我真的要和過去的你説再見了，上次一別，希望往後不要再見面了，無法想像再見到你我的心情會有多複杂。 不過，還是要好好謝謝你，謝謝你的陪伴，山水一程，已是萬幸。 感謝你讓我在大學時光有了目標，變得更好。 感謝你，給了我愛與被愛的能力，讓我遇見更完整的自己。 其實我早就知道不可能了， 我早該放下了，衹是過去的記憶和承諾拖著我不肯讓我嚮前走去。 沒關係了，我們總要告別舊的人才能獲得新的生活。置死後生。 我知道，其實多年后，這段感情仍會是我的一個心結， 其實多年后，一切也不重要了，不介意心裡留一塊地給過去的你我。 ","date":"2021-06-21","objectID":"/years/2020-2021/:1:0","tags":["总结","生活随笔"],"title":"和自己對話-2020\u00262021 總結","uri":"/years/2020-2021/"},{"categories":["生活随笔"],"content":"別 生離死別，20年的末梢，平安夜那天，也是考研的第一天。那晚，我們一個大學四年朝夕相處的室友兄弟，選擇了燒炭，操，真他媽傻逼！說好的考研後“慶功宴”呢，還等著和你吹牛逼呢。 跨年前一周，幾個兄弟在微信QQ群裡給你發消息都一直不回，直到跨年那晚想打電話給你吹吹牛逼，微信 QQ 電話都打不通，就感覺不對勁了。由於比較晚了，想著第二天再打電話給你爸問問情況，我和小賀先後打過去，直接愣住了，你爸的語氣讓人心疼。那天的披薩如同嚼蠟。 之後呢，你爸爸為數不多發的幾條朋友圈都是在表達想你。 兄弟，一路走好，此刻沒有你愛的利群，點隻雙囍送你，永遠懷念。 ","date":"2021-06-21","objectID":"/years/2020-2021/:2:0","tags":["总结","生活随笔"],"title":"和自己對話-2020\u00262021 總結","uri":"/years/2020-2021/"},{"categories":["生活随笔"],"content":"\u0026 20 年呢也不是沒有收獲，那段時間一個人瘋狂加班。 部門的核心代碼幾乎都是我在維護優化和新增功能，也得以抬愛成為開發組組長。 還帶了20的實習生，从最基礎的開始教他們（真的累。。。），可惜最後留下的沒幾個，太過於浮躁了。 然後也學會了做飯，而且賣相口味都還可以，只可惜沒能給她做了。 我，不過是一介普通人， 生活，需要沉澱。 2021 寫到這吧，要熱飯了，年底再來… 又开始找回自己，和自己做朋友，让自己开心真是一件平凡的伟事。 ","date":"2021-06-21","objectID":"/years/2020-2021/:3:0","tags":["总结","生活随笔"],"title":"和自己對話-2020\u00262021 總結","uri":"/years/2020-2021/"},{"categories":["Fullstack"],"content":"程式碼的持續優化 對一個入門的工程師來說，掌握程式語法與模仿範例實作是基本的能力。那有了這樣的基本能之後，要如何寫出更好的程式呢？怎樣才能夠成為一個「優秀」的新手工程師呢？事實上，寫出會動的程式不難，但想寫出好的程式其實是需要刻意練習的。大部分的人會建議要「多練習、多實作」，但我認為在大量練習之外，適時的「優化程式」也是提升「程式碼品質」重要的關鍵。而在「優化程式」可以分成兩個角度： 程式執行效能更好 程式碼結構更精簡 程式執行效能就是從速度跟空間來思考，執行時間越短、變數佔用空間越小。而程式碼結構則會從可讀性和精簡來衡量，例如：變數的命名有沒有意義、程式碼有沒有冗余、繁瑣的部分等等。只不過新手很容易停留在寫出程式的喜悅以及受到固有的解題思考，而忽略優化的過程。 透過「Code Review」是推薦新手的方法，經由反饋與討論來找出程式中可優化的空間。 Code Review 的關注點 以我自己的經驗來說，Review 一份專案的時候會關注： 程式能不能正常操作，有没有什么明显的错误？（低標） 程式碼當中有沒有奇怪的地方？（優化） 第一個關注點是程式碼的低標，結果正確與可正常運行一定是最重要的。如果程式無法運行動或存在很明顯的問題，那再多的優化都沒有意義。除了確保執行之外，同時也會檢查一下是否有低級的邏輯失誤或是安全性的疑慮，像是資料庫沒有正確關閉或密碼明碼沒有加密之類的問題。 第二個關注點是「程式碼品質提升」的部分，我會把它定義成程式運作上沒有問題，但看起來很不舒服或執行效率很差的部分。大致上可以從以下幾點下手： 命名有沒有意義/不一致 資料庫的正規化情況 是否存在特別複雜的程式片段（例如多次的資料庫查詢、多層的迴圈使用） 重複的程式碼有沒有定義成 function 冗長的程式碼能不能拆分成 function 不過一次的 Code Review 建議著重在 3 - 5 個優化地方，比較容易聚焦在優化的品質。根據時程的壓力，決定 Code Review 迭代的次數。 從架構的規劃到細節的優化 在拿到一份程式碼時，通常會先掃過一眼程式的檔案結構，是否有不該上傳的檔案或缺漏。 以這個例子來說，第一眼會覺得檔案配置蠻結構化的。但再多看一點會發現存在幾個冗餘的檔案，例如：-filesqqqq、diff，甚至 /icon 資料夾也不該放在最上層。 進入程式的第一步先從 package.json 檔案開始，確認一下專案的基本資訊是否完整、使用到的套件與版本，以及程式的進入點是什麼。然後打開進入點的檔案（通常會命名成 app 或 main），通常有幾個點需要注意：「套件的載入順序」會建議從第三方套件 → 自定義的模組 → 程式內的變數這樣順序定義；「善用 MVC 的架構」將非主程式的部分依照功能拆分模組，避免檔案資訊量太雜亂。接著就會從 Router → Controller → Service → View 的流程一個一個功能，以下分享一些存在優化空間的程式碼： 善用工具，已有的工具，不用自己手刻 變數名稱不建議用大寫開頭（通常是用在 Class 的命名） 保持優化的空間與彈性 「優化其實是一種取捨」，不需要也不應該追求一步到位。開發往往都是在品質跟產出做取捨，初期可以把開發目標放在「先求可以動，再求持續優化」的節奏上。新手需要在意的點有幾下兩點： 很容易把重點全部放在程式碼的產出上而忽略的程式碼的品質。 停留在做出成果的喜悅，而停滯了優化的步調。 因此，會建議在開發當下就「多想」兩秒鐘，感覺可優化但來不及的部分先在旁邊加個註解提醒自己。另外也養成一段時間回頭看之前的程式碼的習慣，試著刻意找出可以優化改進的部分。專案的提交可能會有期限，但程式碼的優化沒有盡頭。面對相同的專案與程式碼，唯有透過不停的迭代優化才能打造更好的程式，同時也見證了你和程式一起變得更好的過程。所以建立逐步優化的空間，養成持續提升程式碼品質的習慣，才是一個新手工程師需要修煉的心法。 ","date":"2021-03-04","objectID":"/posts/codereview/:0:0","tags":["codereview","Fullstack"],"title":"Code Review 怎麼做？新手工程師如何提升「程式碼品質」","uri":"/posts/codereview/"},{"categories":["JavaScript"],"content":"起因 起因 事情是這樣，年前和朋友一起合租了一個房子，然後捏，生活嘛，除了開心，當然是乾飯最大啦！ 自然就會有購物，買菜等日常消費，那就要記賬，一開始是各自記在手機的便簽上，最後再算一下； 三個人，一共七种組合消費，排除各自消費的三種情況，也有四種 (AB, AC, BC, ABC)。好麻煩啊！！！ 經過 作為一個程序猿，怎麼能接受這麼麻煩的記賬方式呢，拿起筆就開始畫，於是有了下面這張圖的公式。簡單說明一下就是： 設前面說的四種組合為: X1, X2, X3, X4，個人實際付款總額為: Y1, Y2, Y3，那麼帶入未知數，我們就可以算出每個人最後結算時的錢: S1, S2, S3， 綜上所述，很好理解，當 S \u003e= 0 時，收紅包，當 S \u003c 0 時，發紅包。 OK，一個簡單的初中方程式已經到位了，下一步，思考一下，用什麼來運作這個這個方程。來，先跑個題，春節期間，不是每天都要在騰訊文檔上填表記錄活動軌跡嗎？ 再回來，那不如就用 excel 實現吧，三個人都可以在手機上編輯。好的，說做就做。 一頓操作，10 minutes later… 只新建了一個 excel 文件，O.o! 不會 excel，果斷放棄，另尋他路。 結果 回到本職，那不如寫個網站吧，可是畢業後，學生機服務器也過期了，怎麼搞？那就寫個純前端的，數據呢存哪裡？ 別急，重新擼一擼需求先： 存取消費數據 計算每月，實付(總分)，應付以及最後計算結算金額 按月查詢，月結賬單 三人皆可編輯 主要就是存取數據這點，沒有服務器，數據庫怎麼實現？ valine 可以實現無後端，那我是不是也可以，leancloud 文檔走一波，然後“數據表”設計一下，其實是 leancloud-storage Object ，於是有了以下東西，源碼放在 http://github.com/Lruihao/bill-note bill-note ","date":"2021-03-02","objectID":"/posts/bill-note/:0:0","tags":["Frontend","JavaScript","leancloud","VueJS"],"title":"基于 leancloud-storage 实现的无后端记账本","uri":"/posts/bill-note/"},{"categories":["JavaScript"],"content":"數據設計 去 leancloud 创建一个应用，再新增一个 Bill Class, 补充一下字段： name type description pay Number 消费金额 pay_description String 消费描述 pay_type String 消费类型 pay_user String 付款人 ","date":"2021-03-02","objectID":"/posts/bill-note/:1:0","tags":["Frontend","JavaScript","leancloud","VueJS"],"title":"基于 leancloud-storage 实现的无后端记账本","uri":"/posts/bill-note/"},{"categories":["JavaScript"],"content":"主要邏輯 ","date":"2021-03-02","objectID":"/posts/bill-note/:2:0","tags":["Frontend","JavaScript","leancloud","VueJS"],"title":"基于 leancloud-storage 实现的无后端记账本","uri":"/posts/bill-note/"},{"categories":["JavaScript"],"content":"初始化 set for yourself. AV.init({ appId: '', appKey: '', serverURL: '' }); ","date":"2021-03-02","objectID":"/posts/bill-note/:2:1","tags":["Frontend","JavaScript","leancloud","VueJS"],"title":"基于 leancloud-storage 实现的无后端记账本","uri":"/posts/bill-note/"},{"categories":["JavaScript"],"content":"存數據 //記賬提交按鈕事件監聽 document.querySelector('.submit').addEventListener('click',function(event){ event.preventDefault(); let formPay = document.querySelector('#form-pay'); let bill = new AV.Object('Bill'); bill.set('pay', Number(formPay.pay.value)); bill.set('pay_type', Number(formPay.pay_type.value)); bill.set('pay_user', Number(formPay.pay_user.value)); bill.set('pay_description', formPay.pay_description.value); bill.save().then((object) =\u003e { formPay.reset(); }, (function (error) { console.log(JSON.stringify(error)); alert('保存失敗'); })) }); ","date":"2021-03-02","objectID":"/posts/bill-note/:2:2","tags":["Frontend","JavaScript","leancloud","VueJS"],"title":"基于 leancloud-storage 实现的无后端记账本","uri":"/posts/bill-note/"},{"categories":["JavaScript"],"content":"取數據 /** * 獲取歷史消費記錄數據 * @param [start=0] 開始位置 * @param [count=15] 每次查詢筆數 */ function getBillData(start = 0,count = 15) { queryBill.descending('createdAt') .skip(start * count).limit(count) .find().then(function (response) { let billLength = response.length; if(billLength \u003e 0){ billVm.noMore = (billLength !== count) ? true : false; for(bill of response){ billVm.bills.push({ pay: bill.attributes.pay, payType: payType[bill.attributes.pay_type], payUser: payUser[bill.attributes.pay_user], payDescription: bill.attributes.pay_description, payDt: new Date(bill.createdAt).toLocaleString() }) } } else { billVm.noMore = true; } }); } /** * 獲取月賬單數據 * @param month 年月份 fmt: yyyy-MM */ function getMonthBill(month){ let dateTime = `${month}00:00:00` let startMonth = new Date(dateTime); let nextMonth = new Date(new Date(dateTime).setMonth(startMonth.getMonth() + 1)); let startDateQuery = new AV.Query('Bill'); startDateQuery.greaterThanOrEqualTo('createdAt', startMonth); let endDateQuery = new AV.Query('Bill'); endDateQuery.lessThan('createdAt', nextMonth); let MonthBillQuery = AV.Query.and(startDateQuery, endDateQuery); MonthBillQuery.find().then(function(response){ billVm.monthBill = { payType0: 0, payType1: 0, payType2: 0, payType3: 0, payUser0: 0, payUser1: 0, payUser2: 0 }; for(bill of response){ let {pay, pay_type, pay_user} = bill.attributes; billVm.monthBill[`payType${pay_type}`] += pay; billVm.monthBill[`payUser${pay_user}`] += pay; } }); } ","date":"2021-03-02","objectID":"/posts/bill-note/:2:3","tags":["Frontend","JavaScript","leancloud","VueJS"],"title":"基于 leancloud-storage 实现的无后端记账本","uri":"/posts/bill-note/"},{"categories":["JavaScript"],"content":"技術棧 leancloud-storage Vue.js HTML,CSS,JS 總結 簡單總結一下，登录功能不做，安不安全自己说了算。删除修改功能也不做，直接上 leacloud 操作，css 美化的样式也不写，干净又卫生！ 然后衍生一下，什么过年斗地主，天炸，麻将，字牌记账系统那不也是同理可得嘛！ over! ","date":"2021-03-02","objectID":"/posts/bill-note/:3:0","tags":["Frontend","JavaScript","leancloud","VueJS"],"title":"基于 leancloud-storage 实现的无后端记账本","uri":"/posts/bill-note/"},{"categories":["PHP"],"content":" Cell Blog 开发记录，项目地址 搭建php环境 安装wampserver 安装composer 更换aliyun源 composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ 新建laravel项目 composer create-project --prefer-dist laravel/laravel cell-blog \"7.*\" 或者 composer global require laravel/installer laravel new blog 下载debugbar composer require barryvdh/laravel-debugbar --dev 修改语言时区 修改config/app.php，将local的值 en 改成 zh-CN(laravel-admin自带zh-CN)： # 时区 'timezone' =\u003e 'Asia/Shanghai', # 语言 'locale' =\u003e 'zh-CN', 配置数据库 首先确保安装好了laravel，并且数据库连接设置正确。 APP_URL=http://cell.blog DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3307 DB_DATABASE=cell_blog DB_USERNAME=root DB_PASSWORD=123456 下载laravel-admin cd cell-blog composer require encore/laravel-admin 卸载命令composer remove xxx 然后运行下面的命令来发布资源： php artisan vendor:publish --provider=\"Encore\\Admin\\AdminServiceProvider\" 在该命令会生成配置文件config/admin.php，可以在里面修改安装的地址、数据库连接、以及表名，建议都是用默认配置不修改。 然后运行下面的命令完成安装： php artisan admin:install 运行这个命令的时候，如果遇到了下面的错误: SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 1000 bytes (SQL: alter tableusersadd uniqueusers_email_unique(email)) 参考这个issue来解决 https://github.com/z-song/laravel-admin/issues/1541 在app\\Providers\\AppServiceProvider.php添加默认值 \u003c?php namespace App\\Providers; use Illuminate\\Support\\ServiceProvider; use Illuminate\\Support\\Facades\\Schema; //add fixed sql class AppServiceProvider extends ServiceProvider { /** * Bootstrap any application services. * * @return void */ public function boot() { Schema::defaultStringLength(191); //add fixed sql } /** * Register any application services. * * @return void */ public function register() { // } } 启动服务后，在浏览器打开 http://localhost/admin/ ,使用用户名 admin 和密码 admin 登录. 报错Disk [admin] not configured, please add a disk config in config/filesystems.php 在config/filesystems.php中disks处添加以下配置后执行php artisan storage:link来创建软链接（windows和linux的软链接不一样不能直接复制！） 宝塔执行时删除禁用函数putenv(),symlink() 'admin' =\u003e [ 'driver' =\u003e 'local', 'root' =\u003e storage_path('app/public/system'), 'url' =\u003e env('APP_URL').'/storage/system', 'visibility' =\u003e 'public', ], 或 'admin' =\u003e [ 'driver' =\u003e 'local', 'root' =\u003e public_path('uploads'), 'url' =\u003e env('APP_URL').'/public/uploads/', 'visibility' =\u003e 'public', ], 下载dcat-admin composer require dcat/laravel-admin 然后运行下面的命令来发布资源： php artisan admin:publish 在该命令会生成配置文件config/admin.php，可以在里面修改安装的地址、数据库连接、以及表名，建议都是用默认配置不修改。 然后运行下面的命令完成安装： php artisan admin:install 迁移文件创建表 php artisan make:migration create_articles_table php artisan make:migration create_tags_table php artisan make:migration create_categories_table php artisan make:migration create_article_tags_table php artisan make:migration create_navigations_table php artisan make:migration create_friendship_links_table php artisan make:migration create_pages_table php artisan make:migration create_systems_table php artisan make:migration create_mottoes_table 运行迁移 php artisan migrate 创建模型model php artisan make:model Models/Article php artisan make:model Models/Category php artisan make:model Models/Tag php artisan make:model Models/Navigation php artisan make:model Models/FriendshipLink php artisan make:model Models/Page php artisan make:model Models/System php artisan make:model Models/Motto 创建控制器 php artisan admin:make ArticleController --model=App\\Models\\Article php artisan admin:make CategoryController --model=App\\Models\\Category php artisan admin:make TagController --model=App\\Models\\Tag php artisan admin:make NavigationController --model=App\\Models\\Navigation php artisan admin:make FriendshipLinkController --model=App\\Models\\FriendshipLink php artisan admin:make PageController --model=App\\Models\\Page php artisan admin:make SystemController --model=App\\Models\\System php artisan admin:make MottoController --model=App\\Models\\Motto 添加后台路由 app/Admin/routes.php $router-\u003eresource('articles', ArticleController::class); $router-\u003eresource('categories', CategoryController::class); $router-\u003eresource('tags', TagController::class); $router-\u003eresource('navigations', Navigati","date":"2020-07-25","objectID":"/posts/cell-blog-dev/:0:0","tags":["PHP","Laravel","Markdown","Backend"],"title":"cell-blog 开发记录","uri":"/posts/cell-blog-dev/"},{"categories":["PHP"],"content":"存放本地表情 public\\vendor\\laravel-admin-ext\\editormd\\editormd-1.5.0\\images\\emojis 修改editormd.js及editormd.min.js // Emoji graphics files url path editormd.emoji = { path : \"/iamges/emojis/\", ext : \".png\" }; ","date":"2020-07-25","objectID":"/posts/cell-blog-dev/:1:0","tags":["PHP","Laravel","Markdown","Backend"],"title":"cell-blog 开发记录","uri":"/posts/cell-blog-dev/"},{"categories":["PHP"],"content":"图片上传 ","date":"2020-07-25","objectID":"/posts/cell-blog-dev/:2:0","tags":["PHP","Laravel","Markdown","Backend"],"title":"cell-blog 开发记录","uri":"/posts/cell-blog-dev/"},{"categories":["PHP"],"content":"csrf 419错误 可以在VerifyCsrfToken.php中添加白名单跳过验证，或者手动添加csrf验证器： 修改image-dialog.js的var dialogContent 参考 if (settings.crossDomainUpload) { action += \"\u0026callback=\" + settings.uploadCallbackURL + \"\u0026dialog_id=editormd-image-dialog-\" + guid; } //添加csrf验证 var csrfToken = $('meta[name=\"csrf-token\"]').attr('content'); var csrfField = \"\"; if (csrfToken) { csrfField = \"\u003cinput type='hidden' name='_token' value='\" + csrfToken + \"' /\u003e\"; } markdown 转 HTML https://www.zhiqiexing.com/119.html Laravel Markdown安装 composer require graham-campbell/markdown php artisan vendor:publish 扩展表格 composer require league/commonmark config/markdown.php 'extensions' =\u003e [ League\\CommonMark\\Extension\\TaskList\\TaskListExtension::class, ], Eloquent 模型事件 Eloquent 模型可以触发事件，允许你在模型生命周期中的多个时间点调用如下这些方法：retrieved, creating, created, updating, updated, saving, saved, deleting, deleted, restoring, restored。事件允许你在一个指定模型类每次保存或更新的时候执行代码。 retrieved 事件会在从数据库中获取已存在模型时触发。当一个新模型被首次保存的时候，creating 和 created 事件会被触发。如果一个模型已经在数据库中存在并调用 save 方法，updating/updated 事件会被触发，无论是创建还是更新，saving/saved 事件都会被触发。 添加后台验证码 依赖php扩展fileinfo 添加验证码 Media manager composer require laravel-admin-ext/media-manager php artisan admin:import media-manager 'extensions' =\u003e [ 'media-manager' =\u003e [ // Select a local disk that you configured in `config/filesystem.php` 'disk' =\u003e 'public' ], ], 给laravel-admin增加锁屏功能 composer require laravel-admin-ext/lock-screen 'route' =\u003e [ 'prefix' =\u003e 'demo', 'namespace' =\u003e 'App\\\\Admin\\\\Controllers', // 在中间件数组中加上'admin.lock' 'middleware' =\u003e ['web', 'admin', 'admin.lock'], ], 前台设计 创建控制器 php artisan make:controller HomeController php artisan make:controller ArticleController php artisan make:controller CategoryController php artisan make:controller TagController php artisan make:controller PageController 后台img灯箱 https://github.com/laravel-admin-extensions/grid-lightbox composer require laravel-admin-ext/grid-lightbox php artisan vendor:publish --tag=laravel-admin-grid-lightbox ","date":"2020-07-25","objectID":"/posts/cell-blog-dev/:2:1","tags":["PHP","Laravel","Markdown","Backend"],"title":"cell-blog 开发记录","uri":"/posts/cell-blog-dev/"},{"categories":["Python"],"content":" 使用python模拟浏览器行为刷csdn访问量，脚本仅做学习，请勿滥用~ 直接丢代码，把代码挂到服务器上可以策马奔腾~，也可以生成二进制文件放到Windows桌面上随时使用~ 打包exe参考 #!/usr/bin/python # -*- coding: utf-8 -*- __author__ = 'lruihao.cn' import urllib.request import re import time from bs4 import BeautifulSoup opener = urllib.request.build_opener() opener.addheaders = [('User-agent', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 UBrowser/4.0.3214.0 Safari/537.36')] def get_article_url(page,name): endurl = \"/\"+name+\"/article/details/........\" print(name) p = re.compile(endurl) url = \"http://blog.csdn.net/\"+name+\"/article/list/\"+str(page) # 使用build_opener()是为了让python程序模仿浏览器进行访问 html = opener.open(url).read().decode('utf-8') allfinds = p.findall(html) return allfinds #print('allfinds',allfinds) def start_do(allfinds): urlBase = \"http://blog.csdn.net\" # 需要将网址合并的部分 # 页面中的网址有重复的，需要使用set进行去重复 mypages = list(set(allfinds)) for i in range(len(mypages)): mypages[i] = urlBase + mypages[i] print('要刷的网页有：') for index, page in enumerate(mypages): print(str(index), page) # 设置每个网页要刷的次数 brushNum = 1 # 所有的页面都刷 print('下面开始刷了哦：') for index, page in enumerate(mypages): for j in range(brushNum): try: pageContent = opener.open(page).read().decode('utf-8') # 使用BeautifulSoup解析每篇博客的标题 soup = BeautifulSoup(pageContent) blogTitle = str(soup.title.string) blogTitle = blogTitle[0:blogTitle.find('-')] print(str(j), blogTitle) except urllib.error.HTTPError: print('urllib.error.HTTPError') time.sleep(3) # 出现错误，停几秒先 except urllib.error.URLError: print('urllib.error.URLError') time.sleep(3) # 出现错误，停几秒先 time.sleep(0.5) # 正常停顿，以免服务器拒绝访问 def main(name): for page in range(1,5): print(\"************第\"+str(page)+\"页*************\") endurl = get_article_url(page,name) start_do(endurl) if __name__ == '__main__': name = input(\"输入你的csdn用户名：\") if name==\"\": name = \"qq_39520417\" #cheung99857 while 1: main(name) print(\"开始休息...\") time.sleep(40) 主函数也可以这样写实现同时刷多人的访问量，人多可以适当减少休眠时间，当然有兴趣的可以尝试一下多线程~ if __name__ == '__main__': # 多用户 names = [\"qq_39520417\",\"cheung99857\"] while 1: for name in names: main(name) print(\"开始休息...\") # 控制休眠时间相当于控制刷新的速度 time.sleep(30) ","date":"2020-03-26","objectID":"/posts/csdnvisiter/:0:0","tags":["Python","Backend","脚本"],"title":"使用Python刷csdn访问量","uri":"/posts/csdnvisiter/"},{"categories":["Fullstack"],"content":" \u003c秒\u003e \u003c分钟\u003e \u003c小时\u003e \u003c日期 day-of-month\u003e \u003c月份\u003e \u003c星期 day-of-week\u003e 基本语法 位置字段约束取值可使用的特殊符号1秒必须0-59, - \\* /2分钟必须0-59, - \\* /3小时必须0-23（0 为午夜）, - \\* /4日期必须1-31, - \\* ? /5月份必须1-12、JAN-DEC, - \\* /6星期必须1-7、SUN-SAT, - ? / 特殊符号的用法 符号含义用法\\*所有值代表一个字段的所有可能取值。如将\u003c分钟\u003e 设为\\*，表示每一分钟。?不指定值用于可以使用该符号的两个字段中的一个，在一个表达式中只能出现一次。如任务执行时间为每月 10 号，星期几无所谓，那么表达式中\u003c日期\u003e 设为10，\u003c星期\u003e 设为?。-范围如\u003c小时\u003e 为10-12，即10 点、11 点、12 点。,分隔多个值如\u003c星期\u003e 为MON,WED,FRI，即周一、周三、周五。/增量如\u003c秒\u003e 设为0/15，即从 0 秒开始，以 15 秒为增量，包括 0、15、30、45 秒；5/15 即 5、20、35、50 秒。\\*/ 与0/ 等效，如\u003c日期\u003e 设为1/3，即从每个月的第一天开始，每 3 天（即每隔 2 天）执行一次任务。各字段以空格或空白隔开。JAN-DEC、SUN-SAT 这些值不区分大小写，比如 MON 和 mon 效果一样。 举例如下表达式说明0 0/5 \\* \\* \\* ?每隔 5 分钟执行一次10 0/5 \\* \\* \\* ?每隔 5 分钟执行一次，每次执行都在分钟开始的 10 秒，例如 10:00:10、10:05:10 等等。0 30 10-13 ? \\* WED,FRI每周三和每周五的 10:30、11:30、12:30、13:30 执行。0 0/30 8-9 5,20 \\* ?每个月的 5 号和 20 号的 8 点和 10 点之间每隔 30 分钟执行一次，也就是 8:00、8:30、9:00 和 9:30。","date":"2020-03-25","objectID":"/posts/cron/:0:0","tags":["linux","shell","Cron"],"title":"CRON 表达式的基本语法","uri":"/posts/cron/"},{"categories":["Python"],"content":"信息 这件事还得从一只蝙蝠说起… 算了，昨天下午3点半，我还在王者峡谷Timing,突然潇X巴哥打了个电话给我说关于自动打卡的想法… 哎，反正就是由于疫情需要每天健康打卡汇报给学校，然后每天提交一样的太麻烦了，就想写个程序自动打卡… 我和潇X巴哥确定思路后兵分两路： 他用java写个后台自动刷多人的，再弄个网页给用户填写账号密码保存在数据库； 我想的就很直接，只刷一个人的，python 模拟浏览器登录后打卡，再设置定时任务（多人则设定多个）； Windows运行效果 核心代码 适用湖南工程学院的打卡系统。 请勿滥用代码提交不实健康信息，隐瞒疫情将受到相关法律处理！ 完整代码 def lajaDaka(): # 登录 r1 = requests.post(login_url, data=login,headers=headers,verify=False) if r1.status_code == 200: print(time.strftime(\"%Y:%m:%d:%H:%M\", time.localtime())) print(login[\"username\"] + \" 登录成功！\") # 拿到登录后的cookie并添加到header中 header1 = r1.headers headers[\"Cookie\"] = header1[\"Set-Cookie\"] else: return # 打卡 r2 = requests.post(daka_url, data=daka,headers=headers,verify=False) response2=r2.json() if r2.status_code != 200: print(\"打卡失败！\") return if response2[\"result\"] == True: print(\"打卡成功！\") else: print(response2[\"errorInfoList\"][0][\"message\"]) if __name__==\"__main__\": lajaDaka() 自动运行 ","date":"2020-03-25","objectID":"/posts/daka/:0:0","tags":["Python","脚本","HTTP","Backend"],"title":"新冠疫情未返校未返工第N天之“自动打卡”","uri":"/posts/daka/"},{"categories":["Python"],"content":"Windows 适用python代码控制休眠时间 if __name__==\"__main__\": while True: now_hour = time.strftime(\"%H\", time.localtime()) now_min = time.strftime(\"%M\", time.localtime()) # 设置每天8点发送 if now_hour \u003c \"08\": rest = 8 - int(now_hour) sleeptime = (rest-1)*3600 + (60-int(now_min))*60 print(\"启动时北京时间为：\"+time.strftime(\"%H:%M\", time.localtime()),\"\\t脚本将在\",rest-1,\"小时\",int((sleeptime-(rest-1)*3600)/60),\"分钟后打卡\") time.sleep(sleeptime) elif now_hour \u003e \"08\": rest = 8 - int(now_hour) + 24 sleeptime = (rest-1)*3600 + (60-int(now_min))*60 print(\"启动时北京时间为：\"+time.strftime(\"%H:%M\", time.localtime()),\"\\t脚本将在\",rest-1,\"小时\",int((sleeptime-(rest-1)*3600)/60),\"分钟后打卡\") time.sleep(sleeptime) elif now_hour == \"08\": print(\"软件明天开始将在每天8点发送数据！\") lajaDaka() time.sleep(24*60*60-int(now_min)*60) ","date":"2020-03-25","objectID":"/posts/daka/:1:0","tags":["Python","脚本","HTTP","Backend"],"title":"新冠疫情未返校未返工第N天之“自动打卡”","uri":"/posts/daka/"},{"categories":["Python"],"content":"linux(云服务器) 搭建python环境下载依赖后，使用shell脚本定时执行。 python /home/python/yiban_daka/daka.py CRON表达式的基本语法 潇x巴哥的java web版本 符合程序员的应该有的简洁和方便，干净又卫生！ http://39.105.174.214/index.html ","date":"2020-03-25","objectID":"/posts/daka/:2:0","tags":["Python","脚本","HTTP","Backend"],"title":"新冠疫情未返校未返工第N天之“自动打卡”","uri":"/posts/daka/"},{"categories":["生活随笔"],"content":" 回顾2019，是从“迷茫”到“忙”的一年，何为“迷茫”，何为“忙”。 ","date":"2020-01-16","objectID":"/years/2019/:0:0","tags":["总结","生活随笔"],"title":"2019年度总结","uri":"/years/2019/"},{"categories":["生活随笔"],"content":"上半年·湘潭·湖南工程学院 java 2019年伊始，步入大三下学期， 回顾大学前段生涯，无论是ACM是实验室里所学的所谓算法(甚至现在已经忘记怎么写了)， 还是自己一时兴起折腾的简单网页，似乎都无法支撑自己找到工作，甚至实习。 于是乎，浓浓的\"迷茫\"和\"焦虑\"感来了。 由于\"卓越计划\"的缘故，大四我们就不在学校了，要去企业实习。 这正是我所担心的，没有一技之长，哪家公司会收我。 不得不走上新的学习旅程，我选择了java，我也不知道为什么选java，反正就是选了。 制定了计划当然要执行啊，所以从2019年刚开始，我先把java的基础复习了一遍， 然后在慕课网上开始刷课，然后碰到一些小例子时都会编程练习。 从我的博客记录显示，java学习一直持续到5月初。 期间还折腾了一段时间python，正是这小段时间的python， 让我有机会接触到了\"麻小科技\"，这里非常感谢捷哥，算起来也是认识多年的朋友了， 后来也认识了涛哥，非常感谢涛哥在技术方面给了我很多的指导。 后来机缘巧合之下，一场面试让我不得不考虑暂停我的java计划， 这场面试就是富士康C次的一场面试，面试官庆哥也就是我未来的主管， 当时庆哥面试时问了我们三个很简单的问题一个css选择器，一个数据库的查询，还有一个是css的盒子模型。 我当时数据库的那个联合查询没答出来，一紧张内外边距的英文padding和margin也忘记怎么拼写了。 双方还问了一些了解性的问题面试就这样结束了。 很幸运过了一两天就收到了邮件。 ","date":"2020-01-16","objectID":"/years/2019/:1:0","tags":["总结","生活随笔"],"title":"2019年度总结","uri":"/years/2019/"},{"categories":["生活随笔"],"content":"下半年·深圳·富士康科技集团 php 然后时间一晃而过来到了下半年，我来到了陌生的深圳，来到了富士康。 来到深圳后一周，捷哥说一起吃个饭，晚上一起走走， 然后那天我就去找捷哥吃饭了，吃的是顺德公的猪肚包鸡，很好吃。 然后也见到了涛哥，感觉涛哥是一个很谦逊很和蔼的人。非常感谢捷哥和涛哥在我刚来深圳的热情款待。 安顿好后，也开始实习工作了，前面的我所说的\"忙\"呢其实指的是\"充实\"， 在庆哥带领下的学习工作让我每天都过很充实，每天都能感觉到自己一点点的进步，真的非常庆哥的悉心培养。 从html5到php，然后ajax交互，SQL等等，几乎是从零开始教学，效果完全比得上外面的培训机构。 那段时间每天上班测试，学习MES系统流程，然后下班后学习新的知识，每天都能感觉充实带来的愉悦感。 不仅只有学习还有测试，公司的测试比在学校的考试真实多了，公司是要你真的掌握，所以会有理论知识学习，还会有实际操作。 后来大概12月初又学习了，部门平台的模组开发，12月份汇报，自己整体评价很行，松了一口气。 12月底正式接手了项目，拿到的新项目是两支论坛模组。 由于手上不够的原因，我被安排做前端开发，本以为前端会很容易。一直以来大家也都这样认为。 可是自己实际开发后才知道前端也是很容易出bug的，并且有时候前端的bug往往让你不知所措。 一切还需继续努力！ 12月26日，zxm考研结束，来深圳找我玩，和她一起在深圳逛了逛，去了深圳湾。 本来她还想去动物园的，但是老是睡过头，所以就没去了哈哈哈哈。 虽然我知道zxm喜欢吃肯德基，以前在湘潭也常陪她去， 但这一次深圳之旅，我才发现她真的太爱吃了，搞的我的不敢给她吃太多。 又不忍心拒绝她吃，所以来深圳就吃了好几次肯德基和麦当劳。 来到20年初，部门聚餐吃海鲜，和大家部门内的同事也都熟了，大家都很好相处， 很庆幸所在部门大家都是很好的学习工作氛围，没有那种老练职场的尔虞我诈。 1月初的一个周末还很荣幸的受邀参加了麻小科技的年会，和捷哥涛哥一起爬南山，然后一起在粗茶淡饭吃饭， 认识了很多很优秀的朋友，有在华为的，有腾讯的，也有清华博士在读的等等， 听他们说了一些话都觉得很有道理。 下午还一起去打了棋牌室打了桌球和麻将。 感觉陕西麻将和长沙麻将有点像，但和我们那的麻将打法略有不同。（输了十块哈哈哈哈） ","date":"2020-01-16","objectID":"/years/2019/:2:0","tags":["总结","生活随笔"],"title":"2019年度总结","uri":"/years/2019/"},{"categories":["生活随笔"],"content":"总结 总的来说，19 年还算顺利，下半年的实习没向家里要钱，凭自己能力\"活着\"，只希望 20 年和 zxm 更好，顺利毕业，活的更好！ ","date":"2020-01-16","objectID":"/years/2019/:3:0","tags":["总结","生活随笔"],"title":"2019年度总结","uri":"/years/2019/"},{"categories":["JavaScript"],"content":"注意 JS的加载分为两个部分：下载和执行。 浏览器在执行HTML的时候如果遇到\u003cscript\u003e时会停止页面的渲染,去下载和执行js的文件直接遇见\u003c/scirpt\u003e会继续渲染页面。故浏览器在执行js文件的时候浏览器表现为一片空白,为了解决这个问题ECMAScript定义了defer和async两个属性用于控制JS的下载和执行。 不带任何属性 同步模式，又称阻塞模式，我们平时使用的最多的一种方式。当浏览器解析到\u003cscript\u003e标签时，浏览器会停止解析其后的内容，而优先下载脚本文件，并执行其中的代码，是个同步阻塞的过程。 一般建议把\u003cscript\u003e标签放在\u003cbody\u003e结尾处，这样尽可能减少页面阻塞。 而如果想要异步执行script，则可以给其加上async或defer属性。 \u003cscript\u003e defer defer属性在HTML解析期间异步下载文件，并且只在HTML解析完成后才执行它。对于defer，我们可以理解是将外链的js放在了页面底部。js的加载不会阻塞页面的渲染和资源的加载。不过defer会按照原本的js的顺序执行，所以如果前后有依赖关系的js可以放心使用。 \u003cscript defer\u003e async async属性会在HTML解析期间异步下载文件，并在完成下载后立即暂停HTML解析器去执行script中的代码。在执行过程中浏览器处于阻塞状态，响应不了任何需求。如果js前后有依赖性，用async，就很有可能出错。 \u003cscript async\u003e 区别 ","date":"2019-09-08","objectID":"/posts/async-defer/:0:0","tags":["JavaScript","defer","async","Frontend"],"title":"script 的三种加载方式 (async, defer)","uri":"/posts/async-defer/"},{"categories":["JavaScript"],"content":"相同点 加载文件时不阻塞页面渲染 对于inline的script无效（只适用有src的外部js） 使用这两个属性的脚本中不能调用document.write方法 有脚本的onload的事件回调 ","date":"2019-09-08","objectID":"/posts/async-defer/:1:0","tags":["JavaScript","defer","async","Frontend"],"title":"script 的三种加载方式 (async, defer)","uri":"/posts/async-defer/"},{"categories":["JavaScript"],"content":"区别点 html4.0中定义了defer；html5.0中定义了async 浏览器支持不同 每一个async属性的脚本都在它下载结束之后立刻执行，同时会在window的load事件之前执行。所以就有可能出现脚本执行顺序被打乱的情况；每一个defer属性的脚本都是在页面解析完毕之后，按照原本的顺序执行，同时会在document的DOMContentLoaded之前执行。 那么这三种方式各在什么情况下使用呢？ 通常来说，尽可能使用async，然后是defer，最后不使用属性。 并遵循以下规则： 如果脚本是模块化的，并且不依赖于任何脚本，则使用async。 如果脚本依赖于或依赖于另一个脚本，则使用defer。 如果脚本很小并且有async脚本依赖该脚本，则不加属性。 兼容性 Internet Explorer 10、Firefox、Opera、Chrome 和 Safari 支持 async 属性。 所有主流浏览器都支持defer属性。 参考 https://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html https://www.jianshu.com/p/17dc82bf08f1 ","date":"2019-09-08","objectID":"/posts/async-defer/:2:0","tags":["JavaScript","defer","async","Frontend"],"title":"script 的三种加载方式 (async, defer)","uri":"/posts/async-defer/"},{"categories":["Fullstack"],"content":"精神 絕對不寫死程式 不留不要用的、垃圾程式碼 Git Master 的 BUG 必須最少且趨近於零，为最稳定的版本 每次 Commit 訊息應該確實填寫。不可模稜兩可，eg: 修复BUG、增加功能 禁止 Commit IDE 的 project data 禁止上傳垃圾程式碼 Gitea編輯內容類似里程碑和版本描述時要使用Markdown格式 ","date":"2019-08-15","objectID":"/posts/dev-rules/:0:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"分支（Branch） 命名規則：應以此分支主要目的命名（修復什麼BUG，新增特定功能） 不可出現版本號，模組ID 合併後的分支應刪除 ","date":"2019-08-15","objectID":"/posts/dev-rules/:1:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"commit 遵循一個功能一個commit的原則 Restful 資源名詞站在API的角度思考 複數名詞：可以複數筆資料，回傳結果為Array 舉例：GET/users 取得多筆使用者資料 刪除，放在複數名詞內，讓Router保持一致性 增加，放在複數名詞內，讓Router保持一致性 單數名詞：僅取得單筆資料，必須指定PK，兩兩一組，回傳結果為Object 舉例：GET/user/{accont} 取得單筆使用者資料，必須指定PK URL中一律不帶id參數 正確範例： calendar_manager/calendar/29 錯誤範例： calendar_manager/calendar/29?id=29 命名 命名應根據內容做有意義的命名，讓後續維護人員可以顧名思義! 即使不會發生錯誤，程式碼英文大小寫也需明確區分。 ","date":"2019-08-15","objectID":"/posts/dev-rules/:2:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"語意 類型 命名規則 說明 屬性 (Attribute, Property) 名詞user_name、userName 方法 (Method, Function) 動詞+名詞getUserName、get_user_name 常見的動詞有：get、set、update、delete、remove ","date":"2019-08-15","objectID":"/posts/dev-rules/:3:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"字母與分隔 語言變數 (Variable, Parameter, Argument)常數 (Constant)物件導向 - 類名 (Class Name)物件導向 - 成員 (mebmer)HTML、CSS全部小寫，不同單字以「-」分隔 user-idJavaScript駝峰式命名法首字小寫，不同單字「首字以大寫」分隔 userId全部大寫，不同單字以「_」分隔 MAX_COUNT駝峰式命名法首字大寫，不同單字「首字以大寫」分隔 一個檔案放一個 Class 檔名即為 Class Name User駝峰式命名法公有 (public) : 首字小寫，不同單字「首字以大寫」分隔 name, getName 私有 (private): _公有命名規則 _name, _getNamePHP全部小寫，不同單字以「_」分隔 user_idSQL由使用者定義的：表名、欄位名 全部小寫，不同單字以「_」分隔SQL語法、函數 全部大寫 SELECT、INSERT INTO- 通用 程式碼撰寫 每個函數應該註解，註解應包含函數工能說明、引數說明。 不必要的代碼不要寫，也禁止放到註解裡面! if-else 的 {} 嚴禁省略。 {} 起始一律跟在 前一個功能的尾巴，禁止分行 ","date":"2019-08-15","objectID":"/posts/dev-rules/:4:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"正確寫法 public function test(){ //do something if($a === $b){ //do something } } ","date":"2019-08-15","objectID":"/posts/dev-rules/:5:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"錯誤寫法 public function test() { //do something if($a === $b) { //do something } } 程式碼排版 任何程式碼應該以 2 個 space 為一個階層做好排版、不可使用 tab。 函數 (Function, Methd) 函數宣告時需在函數上方加上函數註解，註解應包含函數說明、引數內容 (引數型態、引數英文名稱、引數說明)、 回傳值內容 (回傳值型態、回傳值說明) 類 (Class) 一個類 (Class) 的宣告只能存在一個檔案。 類 (Class) 的宣告檔，檔名必須為類名。 其他 連結本地任何其他資源 (圖片、檔案、網站) 皆使用相對路徑，禁止使用絕對路徑，非本地資源除外。 HTML ","date":"2019-08-15","objectID":"/posts/dev-rules/:6:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"程式碼撰寫 禁止在 HTML 使用 \u003cstyle\u003e、\u003cscript\u003e，一律使用外部檔案引用方式引用 CSS、JavaScript檔案。 HTML 標籤需成雙成對，有頭有尾。 區塊標籤：\u003ctag\u003e\u003c/tag\u003e 單標籤：\u003ctag /\u003e 禁止使用已被 HTML 捨棄的舊標籤、屬性，如： \u003c!-- html tag --\u003e \u003ccenter\u003e \u003cfont\u003e \u003cbasefont\u003e \u003cs\u003e \u003cstrike\u003e \u003cu\u003e \u003clisting\u003e \u003cplaintext\u003e \u003cxmp\u003e \u003c!-- html attribute --\u003e align bgcolor color ","date":"2019-08-15","objectID":"/posts/dev-rules/:7:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"資安禁止： 禁止使用 readonly 做為參數傳遞 ","date":"2019-08-15","objectID":"/posts/dev-rules/:8:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"其他 連結本地任何其他資源 (圖片、檔案、網站) 皆使用相對路徑，禁止使用絕對路徑，非本地資源除外。 CSS ","date":"2019-08-15","objectID":"/posts/dev-rules/:9:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"程式碼撰寫 CSS 的定義應該獨立一個 CSS 檔案，禁止使用 \u003cstyle\u003e 或 style 屬性直接在 HTML 中定義樣式。 JavaScript ","date":"2019-08-15","objectID":"/posts/dev-rules/:10:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"程式碼撰寫 禁止使用 HTML 字串，一律使用 Dom 產生 HTML 禁止省略箭頭函數 (Arrow function) 的括弧 正確 a = (a, b) =\u003e { c; } 錯誤 (這是允許的，但造成程式碼閱讀困難，故禁止) a =\u003e c; ","date":"2019-08-15","objectID":"/posts/dev-rules/:11:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"註解 JavaScript 註解應該遵循 JSDoc 的標準撰寫 ","date":"2019-08-15","objectID":"/posts/dev-rules/:12:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"全域變數 (Global) /* global $t, Tiger */ ","date":"2019-08-15","objectID":"/posts/dev-rules/:12:1","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"常數 (Constant) /** * 常數說明 * @type {常數型態} */ Example /** * 使用者ID * @type {String} */ var userId = 'Hello'; ","date":"2019-08-15","objectID":"/posts/dev-rules/:12:2","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"函數、方法 (Function, Method) /** * 函數用途說明 * @param {引數型態} 引數名稱 引數說明 * @param {引數型態} [選擇性引數名稱] 引數說明 * @param {引數型態} [選擇性引數名稱=引數預設值] 引數說明 * @returns {回傳值型態} 回傳值說明 */ Example /** * 取得使用者 * @param {Int} userId 使用者ID * @param {Object} [options] 其他選項 * @param {String} [options.query='a'] 查詢關鍵字 預設為 a * @returns {Object} 使用者資料 */ var getUser = function(userId, options){ //do something return user; }; PHP ","date":"2019-08-15","objectID":"/posts/dev-rules/:12:3","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"前端參數取得 參數取得需透過 filter_input 函數取得，不得使用 $_GET、 $_POST ","date":"2019-08-15","objectID":"/posts/dev-rules/:13:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"輸出到前台 參數命名必須為：全部小寫，不同單字以「_」分隔 ","date":"2019-08-15","objectID":"/posts/dev-rules/:14:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"註解 PHP 註解應該遵循 PHPDoc 的標準撰寫 ","date":"2019-08-15","objectID":"/posts/dev-rules/:15:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"成員變數 (Member) 成員變數只的是 Class 內的成員變數，我們都會要求替成員變數增加註解說明。通常 Function 的變數除非太特別否則都不需要特別註解說明。 /** * 成員變數說明 * @type {型態} */ Example /** * 使用者ID * @type {String} */ $userId = 'Hello'; ","date":"2019-08-15","objectID":"/posts/dev-rules/:16:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"函數、方法 (Function, Method) /** * 函數用途說明 * @param 引數型態 引數名稱 引數說明 * @option 引數選項型態 引數選項名稱 引數選項說明 * @uses 全域變數 全域變數說明 * @returns 回傳值型態 回傳值說明 */ Example /** * 取得使用者 * @param int userId 使用者ID * @param object options 其他選項 * @option string options['query'] 查詢關鍵字 * @uses $_POST['role_id'] 從前端以POST取得角色ID * @returns object 使用者資料 */ function getUser($userId, $options){ //do something return $user; }; Database 禁止使用 Table Join。 禁止使用 Oracle Trigger。 禁止將查詢資料庫的 SQL 放在迴圈中查詢 ","date":"2019-08-15","objectID":"/posts/dev-rules/:17:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["Fullstack"],"content":"SQL 撰寫 屬於 SQL 語法使用大寫 (SELECT, WHERE, INSERT etc..) 屬於使用者自己定義的使用小寫 (表名 table name, 欄位名 column name etc..) 表名、欄位名前後需加上 ` Example INSERTINTO`user`VALUES('a','b'); 統一用詞 僅為舉例，不限與此。 用詞 統一 最后 最後 關閉 取消 存儲保存修改 儲存 搜尋 查詢 ","date":"2019-08-15","objectID":"/posts/dev-rules/:18:0","tags":["PHP","JavaScript","Git","总结","Fullstack"],"title":"web 开发规则，代码规范","uri":"/posts/dev-rules/"},{"categories":["ACM"],"content":" 二进制最大公约数算法避免了欧几里得算法（辗转相除法）的大量取模操作，有效减少了时间消耗，且更为方便。 原理 本算法基于以下事实： 对于两个数的最大公约数gcd(m, n)，有 m\u003cn时，gcd(m, n)=gcd(n, m) m偶n偶时，gcd(m, n)=2*gcd(m/2, n/2) m偶n奇时，gcd(m, n)=gcd(m/2, n) m奇n偶时，gcd(m, n)=gcd(m, n/2) m奇n奇时，gcd(m, n)=gcd(n, m-n) 采用递归即可。 实现 inline int GCD(int x,int y) { int i,j; if(x==0) return y; if(y==0) return x; for(i=0;0==(x\u00261);++i)x\u003e\u003e=1; // 去掉所有的2 for(j=0;0==(y\u00261);++j)y\u003e\u003e=1; // 去掉所有的2 if(j\u003ci) i=j; while(1){ if(x\u003cy)x^=y,y^=x,x^=y; // 若 x \u003c y 交换 x, y if(0==(x-=y)) return y\u003c\u003ci; // 若x == y， gcd == x == y (就是在辗转减，while(1)控制) while(0==(x\u00261))x\u003e\u003e=1; // 去掉所有的2 } } int get_lcm(int a,int b)///获得最小公倍数 { int x=a; int y=b; while(b) { int t=a; a=b; b=t%b; } return x/a*y; } ","date":"2019-05-17","objectID":"/posts/gcd-bit/:0:0","tags":["欧几里得","数学","数论","C"],"title":"最大公约数(二进制算法)","uri":"/posts/gcd-bit/"},{"categories":["Java"],"content":" 基本功能： 给定一个密钥，读取文件内容，加密后，输出到另外一个文件。 这里使用文件输入流读取文件内容，然后每个字节和密码进行异或简单加密。加密完成，使用文件输出流写入另一个文件中。解密和加密方法一样。利用的是对同一个数异或两遍其值不变的性质。因此一个程序可以完成加密和解密功能。只需修改文件名即可。 文件加密解密 package cn.lruihao.base; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; public class EncryptFile { public static void main(String[] args) throws IOException { byte pwd=123;//加密/解密密码 FileInputStream f=new FileInputStream(\"src/cn/lruihao/base/EncryptFile.java\");//待加密文件 FileOutputStream fout=new FileOutputStream(\"encrypted.txt\");//已加密文件 System.out.println(\"开始加密。。。\"); int n=f.available()/5; byte[] b=new byte[n];//以一个字节数组的长度读取和复制 int count=0; while((count=f.read(b,0,n))!=-1) { //写入之前先加密/解密 for(int i=0;i\u003ccount;i++) { b[i]=(byte)(b[i]^pwd);// } fout.write(b,0,count); } System.out.println(\"完成加密\"); f.close(); fout.close(); // f=new FileInputStream(\"encrypted.txt\"); // fout=new FileOutputStream(\"unencrypted.txt\"); // System.out.println(\"开始解密。。。\"); // n=f.available()/5; // b=new byte[n];//以一个字节数组的长度读取和复制 // count=0; // while((count=f.read(b,0,n))!=-1) { // //写入之前先加密/解密 // for(int i=0;i\u003ccount;i++) { // b[i]=(byte)(b[i]^pwd); // } // fout.write(b,0,count); // } // System.out.println(\"完成解密\"); // f.close(); // fout.close(); } } 文件复制 package cn.lruihao.base; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; public class FileStreamCopy { public static void main(String[] args) throws IOException { int size; FileInputStream f=new FileInputStream(\"src/cn/lruihao/base/FileStreamCopy.java\"); FileOutputStream fout=new FileOutputStream(\"copy-of-file.txt\"); System.out.println(\"总长度：\"+(size=f.available())); int n=size/10; System.out.print(\"使用单字节方法读取后：\"); for(int i=0;i\u003cn;i++) { fout.write(f.read()); } System.out.println(\"剩余长度：\"+f.available()); System.out.println(\"读取一个字节数组后：\"); byte b[]=new byte[n]; f.read(b); fout.write(b); System.out.println(\"剩余长度：\"+f.available()); System.out.println(\"读取余下数据：\"); int count=0; while((count=f.read(b,0,n))!=-1) { //System.out.println(count); fout.write(b,0,count); } System.out.println(\"剩余长度：\"+f.available()); f.close(); fout.flush(); fout.close(); } } package cn.lruihao.base; import java.io.BufferedInputStream; import java.io.BufferedOutputStream; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; public class BufferedStreamCopy { public static void main(String[] args) throws IOException { FileInputStream f=new FileInputStream(\"src/cn/lruihao/base/BufferedStreamCopy.java\"); FileOutputStream fout=new FileOutputStream(\"copy-of-file.txt\"); BufferedInputStream bis=new BufferedInputStream(f); BufferedOutputStream bos=new BufferedOutputStream(fout); System.out.println(\"开始复制。。。\"); int n=f.available()/5; byte[] b=new byte[n]; int count=0; while((count=bis.read(b,0,n))!=-1) { bos.write(b,0,count); } System.out.println(\"复制完成\"); bis.close(); bos.flush(); bos.close(); f.close(); fout.flush(); fout.close(); } } ","date":"2019-05-02","objectID":"/posts/byteio/:0:0","tags":["Java","Backend"],"title":"文件加密解密（字节流）","uri":"/posts/byteio/"},{"categories":["生活随笔"],"content":" 时间过得真快，一下从大一到了大三，马上就要实习毕业等等了。 Success 富士康在学校有一个春招的机会，我和朋友抱着侥幸的心理去试了试。 虽然深知自己还身有很多缺点，但是不面试不知道，一面试都暴露出来了，以下记录一下自己的不足之处： php和sql的经典组合虽然有所接触了解，但是确实什么都会，得花时间学 html/css等虽然平时折腾博客这些应用的比较多，但是今天竟然紧张地忘记了margin和padding都不会写了 如上一条，公众表现能力有待加强。正如当今“酒香也怕巷子深”，何况“不香”。 惊喜的事说来就来，本来知道自己这么多缺点，这么菜后，觉得这个实习的offer是没戏了，没想到下午技术主管微信发来消息，说录用了。当场懵逼，受宠若惊的感觉！非常谢谢面试官老师！ 无论生活还是学习，希望以后的自己一定要保持一颗谦逊爱学的心，早日实现全栈工程师的梦想，还有早点存钱把大学学费的贷款还掉！ ","date":"2019-04-24","objectID":"/posts/1thintervivew/:0:0","tags":["面试"],"title":"第一次面试经历","uri":"/posts/1thintervivew/"},{"categories":["Nodejs"],"content":" 想趴几本金庸小说的做成电子书自己阅读，在博客上尝试了一下整理了6本中短篇小说就开始感觉博客臃肿，于是找到gitbook前来一试。 写完这篇文章开始实际操作，我发现还不如用hexo来写小说，遂放弃！Gitbook用来写相关文档介绍还差不多。 GitBook简介 GitBook官网 GitBook文档 Gitbook的作用和Hexo有点像，也是把md渲染成html,也见到有人用这个来写博客的。 GitBook是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。 GitBook支持输出多种文档格式： 静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上； PDF：需要安装gitbook-pdf依赖； eBook：需要安装ebook-convert； 单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程； JSON：一般用于电子书的调试或元数据提取。 使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md GitBook安装步骤 ","date":"2019-04-04","objectID":"/posts/gitbookuse/:0:0","tags":["gitbook","Nodejs","Backend"],"title":"GitBook 使用教程","uri":"/posts/gitbookuse/"},{"categories":["Nodejs"],"content":"安装node.js GitBook是一个基于Node.js的命令行工具，下载安装Node.js(我以前搭建hexo的文章里也有介绍)，安装完成之后，你可以使用下面的命令来检验是否安装成功。 node -v ","date":"2019-04-04","objectID":"/posts/gitbookuse/:1:0","tags":["gitbook","Nodejs","Backend"],"title":"GitBook 使用教程","uri":"/posts/gitbookuse/"},{"categories":["Nodejs"],"content":"安装GitBook npm install gitbook-cli -g 检验是否安装成功 gitbook -V 参照GitBook安装文档 ","date":"2019-04-04","objectID":"/posts/gitbookuse/:2:0","tags":["gitbook","Nodejs","Backend"],"title":"GitBook 使用教程","uri":"/posts/gitbookuse/"},{"categories":["Nodejs"],"content":"gitbook初始化 和hexo init类似，GitBook准备工作做好之后，我们进入一个你要写书的目录（比如新建mybook文件夹），输入如下命令初始化 gitbook init 初始化后可以看到他会创建README.md和SUMMARY.md 这两个文件，README.md应该不陌生，就是说明文档，而SUMMARY.md其实就是书的章节目录，其默认内容如下所示： # Summary * [Introduction](README.md) ","date":"2019-04-04","objectID":"/posts/gitbookuse/:3:0","tags":["gitbook","Nodejs","Backend"],"title":"GitBook 使用教程","uri":"/posts/gitbookuse/"},{"categories":["Nodejs"],"content":"启动服务器 和hexo serve类似，我们使用gitbook serve命令，然后在浏览器地址栏中输入侧http://localhost:4000便可预览书籍。 运行该命令后会在书籍的文件夹中生成一个_book文件夹，里面的内容即为生成的html文件。 也可以修改端口 gitbook serve --port 5000 我们可以使用gitbook build命令来生成网页而不开启服务器。这个类似于 hexo 的hexo g命令。 当然，build 命令可以指定路径： gitbook build [书籍路径] [输出路径] 你还可以生成 PDF,epub,mobi 格式的电子书： gitbook pdf ./ ./mybook.pdf gitbook epub ./ ./mybook.epub gitbook mobi ./ ./mybook.mobi 如果生成不了，你可能还需要安装一些工具，比如 ebook-convert。或者在 Typora 中安装 Pandoc 进行导出。 目录结构 . ├── book.json ├── README.md ├── SUMMARY.md ├── chapter-1/ | ├── README.md | └── something.md └── chapter-2/ ├── README.md └── something.md ","date":"2019-04-04","objectID":"/posts/gitbookuse/:4:0","tags":["gitbook","Nodejs","Backend"],"title":"GitBook 使用教程","uri":"/posts/gitbookuse/"},{"categories":["Nodejs"],"content":"book.json 该文件主要用来存放配置信息。 ","date":"2019-04-04","objectID":"/posts/gitbookuse/:5:0","tags":["gitbook","Nodejs","Backend"],"title":"GitBook 使用教程","uri":"/posts/gitbookuse/"},{"categories":["Nodejs"],"content":"SUMMARY.md 这个文件主要决定GitBook的章节目录，它通过Markdown中的列表语法来表示文件的父子关系。 ","date":"2019-04-04","objectID":"/posts/gitbookuse/:6:0","tags":["gitbook","Nodejs","Backend"],"title":"GitBook 使用教程","uri":"/posts/gitbookuse/"},{"categories":["Nodejs"],"content":"更多 更多详情介绍 ","date":"2019-04-04","objectID":"/posts/gitbookuse/:7:0","tags":["gitbook","Nodejs","Backend"],"title":"GitBook 使用教程","uri":"/posts/gitbookuse/"},{"categories":["ACM"],"content":" 我国古代数学家张丘建在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？ 设公鸡，母鸡，小鸡数目分别为x,y,z(x\u003c=20,y\u003c=33,z\u003c=100) 约束条件 x+y+z=100 5x+3y+z/3=100 算法分析 若依次枚举x,y,x,则至少尝试21*34*100=71400次，显然效率太低。 在x,y的数目确定后，z的数目也就确定下来了100-x-y，无须再进行枚举，此时约束条件只有一个5x+3y+z/3=100.只需枚举x,y，共21*34=714次。 算法设计 #include\u003cstdio.h\u003e int main(){ int x,y,z; for(x=0;x\u003c=20;x++) //21*34=714 for(y=0;y\u003c=33;y++){ z=100-y-x; if(z%3==0 \u0026\u0026 (5*x+3*y+z/3)==100){//限定z能被3整除，进一步提高效率 printf(\"cock number:%d\\t\",x); printf(\"hen number:%d\\t\",y); printf(\"chick number:%d\\n\",z); } } return 0; } 运行解 cock number:0 hen number:25 chick number:75 cock number:4 hen number:18 chick number:78 cock number:8 hen number:11 chick number:81 cock number:12 hen number:4 chick number:84 ","date":"2019-03-30","objectID":"/posts/bqbj/:0:0","tags":["ACM"],"title":"百钱百鸡（枚举法）","uri":"/posts/bqbj/"},{"categories":["ACM"],"content":" 大数乘法c版(基础写法) #include\u003cstdio.h\u003e#include\u003cstring.h\u003e#define N 202 int main() { int a[N] = {0}, b[N] = {0}, c[404] = {0}, la, lb, i, j,k, d = 0, n1, n2;//202位数相乘，最长404位数 int get(int *p); void change(int *a, int *b, int n); la = get(a); lb = get(b); n1 = la \u003e lb ? la : lb;//较长的数长 n2 = la \u003c lb ? la : lb;//较短的数长 if (la \u003c lb) change(a, b, lb); //模拟乘法运算过程（进位等考虑） for (i = 0; i \u003c n2; i++) { for (j = 0; j \u003c n1; j++) { c[j + i] += (b[i] * a[j] + d)%10; d = (b[i] * a[j] + d) / 10; if (c[j+i]\u003e9){ d++; c[j+i]%=10; } if (a[j+1]==0\u0026\u0026d!=0){ k=j+i+1; c[k]=d; } } d=0; } k=k\u003e(j+i-2)?k:j+i-2; for (i = k; i \u003e= 0; i--)//将倒序装入的结果打印 printf(\"%d\", c[i]); return 0; } //输入字符串作为数字，并返回数字去除前导0后的长度 int get(int *p) { char x[N]; int l, i, ex = 0; scanf(\"%s\", x); l = strlen(x); while (x[ex] == '0') ex++; for (i = ex; i \u003c l; i++) //提取字符串数字到int数组，倒序排列 *(p + l - i - 1) = x[i] - '0'; return l - ex; } void change(int *a, int *b, int n) { int i, t; for (i = 0; i \u003c n; i++) { t = a[i]; a[i] = b[i]; b[i] = t; } } 程序运行结果 1234567890123456789 98765432109876543210 121932631124517831023715309991126352690 ","date":"2019-03-28","objectID":"/posts/dacheng/:0:0","tags":["数学","大数运算","ACM","C"],"title":"大数乘法","uri":"/posts/dacheng/"},{"categories":["linux"],"content":"极速方便的一键配置与管理，免除繁琐的命令行操作，通过Web面板一键即可操作实现。可选择安装lamp或者lnmp环境，可创建及管理网站，可创建及管理数据库，可创建及管理FTP等等。宝塔官网介绍 系统要求 操作系统：全新系统(支持CentOS、Ubuntu、Debian、Fedora、Deepin)， 确保是干净的操作系统，没有安装过其它环境带的Apache/Nginx/php/MySQL 宝塔Linux6.0版本是基于centos7开发的，强烈建议使用centos7.x 系统 内存要求：内存要求最低512MB，推荐768MB以上，纯面板约占系统60MB内存 安装方法 官方号称2分钟装好面板，一键管理服务器。 使用 SSH 连接工具，如宝塔远程桌面助手连接到您的 Linux 服务器后，挂载磁盘，根据系统执行相应命令开始安装（大约2分钟完成面板安装）： yum install -y wget \u0026\u0026 wget -O install.sh http://download.bt.cn/install/install_6.0.sh \u0026\u0026 sh install.sh wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh \u0026\u0026 sudo bash install.sh wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh \u0026\u0026 bash install.sh wget -O install.sh http://download.bt.cn/install/install_6.0.sh \u0026\u0026 bash install.sh 搭建ftp和云盘服务器 可以很傻瓜式的搭建自己的云盘，和平时用的比较多的ftp服务器。搭建静态网站也可以用ftp来上传文件。 ","date":"2019-03-18","objectID":"/posts/bt/:0:0","tags":["linux","server","宝塔面板"],"title":"宝塔面板安装","uri":"/posts/bt/"},{"categories":["Java"],"content":" 泛型方法，它在修饰符后，返回值类型前增加了类型参数(\u003c\u003e) 类型通配符一般使用问号?代替具体的类型实参，注意不是类型形参。 代码 package code0507; public class WildCardTest { public static void main(String[] args) { Box\u003cString\u003ename=new Box\u003cString\u003e(\"hello\"); Box\u003cInteger\u003eage=new Box\u003cInteger\u003e(12); Box\u003cDouble\u003enumber=new Box\u003cDouble\u003e(210.50); Box\u003cInteger\u003epoint=new Box\u003cInteger\u003e(); getData(name); getData(age); getData(number); point.printpoint(520, 1314); point.printpoint(\"me\", \"too\"); } public static void getData(Box\u003c?\u003edata){//类型通配符 System.out.println(\"data:\"+data.getData()); } } class Box\u003cT\u003e{ private T data; public Box() {}//构造方法重载 public Box(T data) { setData(data); } public T getData() { return data; } public void setData(T data) { this.data = data; } //定义泛型方法 public\u003cT1,T2\u003evoid printpoint(T1 x,T2 y){ T1 m=x; T2 n=y; System.out.println(\"This point is:\"+m+\",\"+n); } } 运行结果 data:hello data:12 data:210.5 This point is:520,1314 This point is:me,too ","date":"2019-03-16","objectID":"/posts/fanxing/:0:0","tags":["泛型","Java","Backend"],"title":"java 泛型 test","uri":"/posts/fanxing/"},{"categories":["Fullstack"],"content":"基本使用 A:选择一个工作空间 D:\\develop\\eclipse-SDK-3.7.2-win64\\workspace B:如何写一个HelloWorld案例(代码以项目为基本单位) a:创建项目(工程) *File -- New -- Java Project *在左边空白处，直接右键 -- New -- Java Project 键入项目名称后直接Finish。 b:所有的java文件必须写到src下面才有效 c:创建一个包 cn.lruihao d:在包下创建一个类 HelloWorld 同时让它帮我们写好了main方法。 e:在main方法中写内容即可 f:编译程序 自动编译，在保存的那一刻帮你做好了 g:运行程序 选择要运行的文件或者在要运行的文件内容中 右键 -- Run as - Java Application即可 h:内容显示 在Console控制台显示内容 Eclipse的基本设置 A:程序的编译和运行的环境配置(如果你的Eclipse启动没有问题，就不要配置了) B:去掉默认注释(可以不用改) C:行号的显示和隐藏 显示：在代码区域的最左边的空白区域，右键 -- Show Line Numbers即可。 隐藏：把上面的动作再做一次。 D:字体大小及颜色 a:Java代码区域的字体大小和颜色： window -- Preferences -- General -- Appearance -- Colors And Fonts -- Java修改 -- Java Edit Text Font b:控制台 window -- Preferences -- General -- Appearance -- Colors And Fonts -- Debug -- Console font c:其他文件 window -- Preferences -- General -- Appearance -- Colors And Fonts -- Basic -- Text Font E:窗体给弄乱了，怎么办 window -- Reset Perspective F:控制台找不到了 Window--Show View—Console 快捷键的使用 A:内容辅助键 Alt+/ 起提示作用 main+alt+/,syso+alt+/,给出其他提示 B:快捷键 格式化 ctrl+shift+f 导入包 ctrl+shift+o 注释 ctrl+/ ctrl+shift+/,ctrl+shift+\\ 代码上下移动 选中代码alt+上/下箭头 查看源码 选中类名(F3或者Ctrl+鼠标点击) Eclipse中如何提高开发效率 A:自动生成构造方法 a:无参构造方法 在代码区域右键--source--Generate Constructors from Superclass b:带参构造方法 在代码区域右键--source--Generate Constructors using fields.. -- finish B:自动生成get/set方法 在代码区域右键--source--Generate Getters and Setters... ","date":"2019-03-15","objectID":"/posts/eclipseuse/:0:0","tags":["eclipse","Java"],"title":"eclipse的基本使用","uri":"/posts/eclipseuse/"},{"categories":["others"],"content":"外存的组织方式 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:1:0","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"连续组织方式 连续组织方式的优点 顺序访问容易 顺序访问速度快 连续组织方式的缺点 分配连续的存储空间 必须知道文件长度 删除与插入数据不灵活 动态增长的文件分配空间问题 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:1:1","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"链接组织方式 隐式链接 显式链接 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:1:2","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"FAT技术 FAT12 早期的FAT12文件系统 以簇为单位的FAT12文件系统 FAT16 FAT32 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:1:3","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"NTFS的文件组织方式 NTFS新特征 磁盘组织 文件的组织 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:1:4","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"索引组织方式 单级索引组织方式 多级索引组织方式 增量式索引组织方式 增量式索引组织方式的基本思想 UNIX System V的组织方式 直接地址 一次间接地址 多次间接地址 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:1:5","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"文件存储空间的管理 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:2:0","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"空闲表法和空闲链表法 空闲表法 空闲表 存储空间的分配与回收 空闲链表法 空闲盘块链 空闲盘区链 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:2:1","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"位示图法 位示图 盘块的分配（步骤） 1.顺序扫描示图 2.转换盘块号 3.修改位示图 盘块的回收（步骤） 1.盘块号转换成行列号 2.修改位示图 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:2:2","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"成组链接法 空闲盘块的组织 空闲盘块的分配与回收 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:2:3","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"提高磁盘I/O速度的途径 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:3:0","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"磁盘高速缓存 数据交付方式 数据交付 指针交付 置换算法 周期性地写回磁盘 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:3:1","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"提高磁盘I/O速度的其他方法 提前读 延迟写 优化物理块的分布 虚拟盘 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:3:2","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"廉价磁盘冗余阵列(RAID) 并行交叉存取 RAID的分级 RAID 0级 RAID 1级 RAID 2级 RAID 3级 RAID 4级 RAID 5级 RAID 6级和RAID 7级 RAID的优点 可靠性高 磁盘I/O速度高 性价比高 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:3:3","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"提高磁盘可靠性的技术 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:4:0","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"第一级容错技术SFT-Ⅰ 双份目录和双份文件分配表 热修复重定向和写后读校验 热修复重定向 写后读校验方式 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:4:1","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"第二级容错技术SFT-Ⅱ 磁盘镜像 磁盘双工 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:4:2","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"基于集群技术的容错功能 双机热备份模式 双机互为备份模式 公用磁盘模式 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:4:3","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"后备系统 磁带机 硬盘 移动磁盘 固定硬盘驱动器 光盘驱动器 CD-ROM 和 DVD-ROM 刻录机 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:4:4","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"数据一致性控制 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:5:0","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"事务 事务的定义 事务记录 恢复算法 undo \u003cTi\u003e redo \u003cTi\u003e ","date":"2019-03-04","objectID":"/posts/cipanadmin/:5:1","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"检查点 检查点的作用 新的恢复算法 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:5:2","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"并发控制 利用互斥锁实现“顺序性” 利用互斥锁和共享锁实现顺序性 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:5:3","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["others"],"content":"重复数据的数据一致性问题 重复文件的一致性 链接数一致性检查 ","date":"2019-03-04","objectID":"/posts/cipanadmin/:5:4","tags":["OS","磁盘"],"title":"磁盘存储器的管理","uri":"/posts/cipanadmin/"},{"categories":["JavaScript"],"content":"#code{ font-family:Arial; font-style:italic; font-weight:bold; border:2px solid #ddd; letter-spacing:9px; color:blue; font-size: 15px; } //设置一个全局的变量，便于保存验证码 var code; function createCode(){ //首先默认code为空字符串 code = ''; //设置长度，这里看需求，我这里设置了4 var codeLength = 4; var codeV = document.getElementById('code'); //设置随机字符 var random = new Array('人','徒','知','枯','坐','息','思','为','进','德','之','功','殊','不','知','上','达','之', '士','圆','通','定','慧','体','用','双','修','即','动','而','静','虽','撄','而','宁'); //循环codeLength 我设置的4就是循环4次 for(var i = 0; i 请点击验证码处: ↑ 验证码 JS 来源互联网 \u003cscript type=\"text/javascript\"\u003e //设置一个全局的变量，便于保存验证码 var code; function createCode(){ //首先默认code为空字符串 code = ''; //设置长度，这里看需求，我这里设置了4 var codeLength = 4; var codeV = document.getElementById('code'); //设置随机字符 var random = new Array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R', 'S','T','U','V','W','X','Y','Z'); //循环codeLength 我设置的4就是循环4次 for(var i = 0; i \u003c codeLength; i++){ //设置随机数范围,这设置为0 ~ 36 var index = Math.floor(Math.random()*36); //字符串拼接 将每次随机的字符 进行拼接 code += random[index]; } //将拼接好的字符串赋值给展示的Value codeV.value = code; } //下面就是判断是否== 的代码，无需解释,也可以结合ajax在后台做判断 function validate(){ var Input = document.getElementById('input'); var oValue = Input.value.toUpperCase(); if(oValue ==0){ alert('请输入验证码'); }else if(oValue != code){ Input.value = ''; alert('验证码不正确，请重新输入'); createCode(); }else{ Input.value = ''; alert('验证码正确！');//window.open('http://lruihao.cn','_self'); } } //设置此处的原因是每次进入界面展示一个随机的验证码，不设置则为空 window.onload = function (){ createCode(); } \u003c/script\u003e ","date":"2019-03-04","objectID":"/posts/vcode/:0:0","tags":["Frontend","JavaScript"],"title":"JS 验证码","uri":"/posts/vcode/"},{"categories":["hexo"],"content":" 本以为 coding pages 与腾讯云合作后会更好，没想到正是这种初期 bug 不断，速度也是非常慢。比 gitee, 甚至 github 都要慢很多了。所以决定放弃 coding 了，本想挂到云服务器上，但是这个云服务器只续费了半年，可能不会再续费，前几天看到用腾讯云的 cos 桶 xml 制作动态相册的文章，知道了对象存储这个玩意，腾讯云 COS 提供免费 50G 的存储空间，还有 CDN 加速服务，我觉得是个不错的选择，部署后发现速度还挺好。 适用于 hexo, hugo 等静态博客的部署。 ","date":"2019-01-22","objectID":"/posts/cos-hexo/:0:0","tags":["hexo","hugo","腾讯云cos桶","对象存储"],"title":"利用腾讯云对象存储 COS 桶托管 hexo 博客","uri":"/posts/cos-hexo/"},{"categories":["hexo"],"content":"创建存储桶 打开腾讯云控制台–云产品–存储–对象存储，然后创建存储桶。 ","date":"2019-01-22","objectID":"/posts/cos-hexo/:0:1","tags":["hexo","hugo","腾讯云cos桶","对象存储"],"title":"利用腾讯云对象存储 COS 桶托管 hexo 博客","uri":"/posts/cos-hexo/"},{"categories":["hexo"],"content":"开启静态网站设置 在基础配置打开静态网站(关掉强制https) ","date":"2019-01-22","objectID":"/posts/cos-hexo/:0:2","tags":["hexo","hugo","腾讯云cos桶","对象存储"],"title":"利用腾讯云对象存储 COS 桶托管 hexo 博客","uri":"/posts/cos-hexo/"},{"categories":["hexo"],"content":"绑定域名 SSL设置 ","date":"2019-01-22","objectID":"/posts/cos-hexo/:0:3","tags":["hexo","hugo","腾讯云cos桶","对象存储"],"title":"利用腾讯云对象存储 COS 桶托管 hexo 博客","uri":"/posts/cos-hexo/"},{"categories":["hexo"],"content":"域名解析，添加记录 去dns服务商添加域名解析记录CNAME指向上面的域名 ","date":"2019-01-22","objectID":"/posts/cos-hexo/:0:4","tags":["hexo","hugo","腾讯云cos桶","对象存储"],"title":"利用腾讯云对象存储 COS 桶托管 hexo 博客","uri":"/posts/cos-hexo/"},{"categories":["hexo"],"content":"hexo设置 安装插件 npm install hexo-deployer-cos --save 站点配置文件 deploy: type: cos bucket: yourBucketName #cos桶名称 appId: yourAppId #cos桶名称后数字 secretId: yourSecretId #云API密钥 secretKey: yourSecretKey #云API密钥 region: yourRegion #所属地域 发布还是一样的 hexo clean hexo g -d 结果类似于 ","date":"2019-01-22","objectID":"/posts/cos-hexo/:0:5","tags":["hexo","hugo","腾讯云cos桶","对象存储"],"title":"利用腾讯云对象存储 COS 桶托管 hexo 博客","uri":"/posts/cos-hexo/"},{"categories":["hexo"],"content":"CDN 刷新 每次更新博客内容完后，都要登陆腾讯云CDN–缓存刷新，手动刷新一下CDN。 用脚本在每次更新后刷新 安装 npm install qcloud-cdn-node-sdk --save 创建qcloudcdn.js放入script文件夹 const qcloudSDK = require('qcloud-cdn-node-sdk'); qcloudSDK.config({ secretId: '你的ID', secretKey: '你的密钥' }) qcloudSDK.request('RefreshCdnDir', { 'dirs.1': 'http://博客地址' }, (res) =\u003e { console.log(res) }) ","date":"2019-01-22","objectID":"/posts/cos-hexo/:0:6","tags":["hexo","hugo","腾讯云cos桶","对象存储"],"title":"利用腾讯云对象存储 COS 桶托管 hexo 博客","uri":"/posts/cos-hexo/"},{"categories":["hexo"],"content":"自动 CDN 刷新配置 (推荐) 进入腾讯云，找到 函数计算 -\u003e CDN 缓存刷新函数 -\u003e 创建 CDN 缓存刷新函数 修改 index.js 内容后重新部署 'use strict' const CosSdk = require('cos-nodejs-sdk-v5') const CdnSdk = require('./common/CdnSdk') const CdnRefreshTask = require('./common/CdnRefreshTask') const { getParams, getObjectUrl, logger, getLogSummary } = require('./common/utils') exports.main_handler = async (event, context, callback) =\u003e { /** * parse param from event and process.env */ const { objects, cdnHosts, secretId, secretKey, token } = getParams(event) logger({ title: 'param is parsed success, param as follow: ', data: { objects, cdnHosts, event } }) /** * init cos instance */ if (!secretId || !secretKey || !token) { throw new Error(`secretId, secretKey or token is missing`) } const cdnSdkInstance = new CdnSdk({ secretId, secretKey, token }) const cosInstance = new CosSdk({ SecretId: secretId, SecretKey: secretKey, XCosSecurityToken: token }) const taskList = objects.map(({ bucket, region, key }) =\u003e { /* 变更内容-START */ const purgeUrls = []; cdnHosts.forEach(host =\u003e { const tempUrl = getObjectUrl({ cosInstance, bucket, region, key, origin: `${/^(http\\:\\/\\/|https\\:\\/\\/)/.test(host) ? '' : 'https://'}${host}` }); purgeUrls.push(tempUrl); // 如果以 /index.html 结尾，则增加目录首页/。 // 例如 https://www.xxxx.com/index.html, 则增加 https://www.xxxx.com/。 if(tempUrl.lastIndexOf('/index.html') == (tempUrl.length - 11)){ purgeUrls.push(tempUrl.substr(0, tempUrl.length - 10)) } }); return new CdnRefreshTask({ cdnSdkInstance, urls: purgeUrls }) /* 变更内容-END */ }) const taskResults = [] for (const task of taskList) { const results = await task.runPurgeTasks() taskResults.push(...results) } logger({ title: 'cdn refresh full logs:', data: taskResults }) const { status, messages } = getLogSummary(taskResults) logger({ messages: messages.map(item =\u003e item.replace(/\\,\\ /g, '\\n')) }) if (status === 'fail') { throw messages.join('; ') } else { return messages.join('; ') } } ","date":"2019-01-22","objectID":"/posts/cos-hexo/:0:7","tags":["hexo","hugo","腾讯云cos桶","对象存储"],"title":"利用腾讯云对象存储 COS 桶托管 hexo 博客","uri":"/posts/cos-hexo/"},{"categories":["Java"],"content":"主要方法 static type[] copyof(type[] original,int length) static int binarysearch(type[] a,type key) static boolean equals(type[] a,type[] b) static void fill(type[] a,type val) static void fill(type[] a,int fromindex,int toindex,type val) static void sort(type[] a) ","date":"2019-01-18","objectID":"/posts/arrays/:0:1","tags":["Java","Collator","Comparator","Backend"],"title":"Arrays类及基本使用","uri":"/posts/arrays/"},{"categories":["Java"],"content":"实例代码 package Arrays; import java.text.Collator; import java.util.Arrays; import java.util.Comparator; public class ArraysDemo { public static void main(String agrs[]) { Integer arr[]=new Integer[9]; for(int i=0;i\u003c9;i++) arr[i]=(int)(Math.random()*100); //显示，排序数组 System.out.print(\"原内容：\"); display(arr); Arrays.sort(arr); System.out.print(\"排序后：\"); display(arr); //将值-1分配给数组arr中下标从0到3-1的位置 Arrays.fill(arr, 0,3,-1); System.out.print(\"fill()后：\"); display(arr); //搜索23 System.out.print(\"值23的位置：\"); int index =Arrays.binarySearch(arr, 23);//二分查找 System.out.print(index);//如果查找不到，index为负 System.out.print(\"\\n插入0在3号位置：\"); Arrays.fill(arr,3,4,0); display(arr); System.out.print(\"值0的位置：\"); index =Arrays.binarySearch(arr, 0); System.out.print(index); Integer arr2[]=new Integer[8]; arr2=Arrays.copyOf(arr, arr2.length); //复制8个 System.out.print(\"\\n复制后的数组：\"); display(arr2); if(Arrays.equals(arr, arr2)) System.out.println(\"两数组相同！\"); else System.out.println(\"两数组不相同！\"); System.out.println(\"----------------------------------------\"); String[] str = {\"计算机\",\"黄桑\",\"通信\",\"李瑞豪\"}; Arrays.sort(str); for(int i=0;i\u003cstr.length;i++) System.out.print(str[i]+\" \"); System.out.println(\"\"); //Collator类是用来执行分语言环境的字符串比较，这里用的CHINA Comparator com=Collator.getInstance(java.util.Locale.CHINA);//获取Comparator对象，参数表示按中文排序 //根据指定的 \"比较器\" 产生的顺序对 \"指定对象数组\" 进行排序 Arrays.sort(str,com);//sort(T[] a,Comparator\u003c?super T\u003ec) for(int i=0;i\u003cstr.length;i++) System.out.print(str[i]+\" \"); } static void display(Integer arr[]) { for(int i=0;i\u003carr.length;i++) System.out.print(arr[i]+\" \"); System.out.println(\"\"); } } ","date":"2019-01-18","objectID":"/posts/arrays/:0:2","tags":["Java","Collator","Comparator","Backend"],"title":"Arrays类及基本使用","uri":"/posts/arrays/"},{"categories":["Java"],"content":"程序运行结果 原内容：41 0 44 96 49 96 30 6 87 排序后：0 6 30 41 44 49 87 96 96 fill()后：-1 -1 -1 41 44 49 87 96 96 值23的位置：-4 插入0在3号位置：-1 -1 -1 0 44 49 87 96 96 值0的位置：3 复制后的数组：-1 -1 -1 0 44 49 87 96 两数组不相同！ ---------------------------------------- 李瑞豪 计算机 通信 黄桑 黄桑 计算机 李瑞豪 通信 ","date":"2019-01-18","objectID":"/posts/arrays/:0:3","tags":["Java","Collator","Comparator","Backend"],"title":"Arrays类及基本使用","uri":"/posts/arrays/"},{"categories":["Java"],"content":"面向对象思想(理解) 面向对象是基于面向过程的一种编程思想 思想特点： A:是一种更符合我们思考习惯的思想 B:把复杂的问题简单化 C:让我们从执行者变成了指挥者 举例： A:洗衣服 B:吃饭 C:买电脑 举例并代码体现 把大象装进冰箱 ","date":"2019-01-15","objectID":"/posts/duixiang/:0:1","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"类与对象(掌握) 我们学习编程是为了把现实世界的事物用编程语言描述来实现信息化。 现实世界事物是如何表达的呢? 属性：外在特征 行为：内在行为 我们学习的是java语言，它最基本的单位是类。 所以我们要学会用类来体现一个事物。 类：是一组相关的属性和行为的集合 对象：是该类事物的具体个体。 举例： 学生 类 张三 对象 ","date":"2019-01-15","objectID":"/posts/duixiang/:0:2","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"类的组成(掌握) 成员变量 其实就是变量，只不过定义在类中，方法外，并且可以不用初始化。 成员方法 其实就是方法，只不过不需要static了 案例： 学生类 class Student { String name; int age; public void study() {} } ","date":"2019-01-15","objectID":"/posts/duixiang/:0:3","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"类的使用(掌握) 创建对象 格式：类名 对象名 = new 类名(); 使用成员 成员变量：对象名.变量名; 成员方法：对象名.方法名(…); ","date":"2019-01-15","objectID":"/posts/duixiang/:0:4","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"成员变量和局部变量的区别(理解) 在类中的位置不同 A:成员变量 类中，方法外 B:局部变量 方法的形式参数，或者方法体中 在内存中的位置不同 A:成员变量 在堆中 B:局部变量 在栈中 生命周期不同 A:成员变量 随着对象的存在而存在，随着对象的消失而消失 B:局部变量 随着方法的调用而存在，随着方法的调用完毕而消失 初始化值不同 A:成员变量 有默认初始化值 B:局部变量 没有默认值，必须先声明，赋值，最后才能使用 ","date":"2019-01-15","objectID":"/posts/duixiang/:0:5","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"形式参数问题(理解) 基本类型 基本类型作为形式参数，需要的是该基本类型的值。 引用类型 引用类型作为形式参数，需要的是该引用类型的地址值。(对象) ","date":"2019-01-15","objectID":"/posts/duixiang/:0:6","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"匿名对象(理解) 匿名对象：没有名字的对象。是对象的简化书写方式。 使用场景 A:调用方法，仅仅只调用一次 B:作为实际参数传递 ","date":"2019-01-15","objectID":"/posts/duixiang/:0:7","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"封装(掌握) 隐藏实现细节，提供公共的访问方式 好处： A:隐藏实现细节，提供公共的访问方式 B:提高了代码的复用性 C:提高了代码的安全性 使用原则 A:把成员变量隐藏 B:给出该成员变量对应的公共访问方式 ","date":"2019-01-15","objectID":"/posts/duixiang/:0:8","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"private关键字(掌握) 是一个权限修饰符 可以修饰类的成员(成员变量和成员方法) 仅仅在本类中可以访问,对外提供对应的GetXXX()，SetXXX()等方法 标准代码： class Student { private String name; private int age; public void setName(String n) { name = n; } public String getName() { return name; } public void setAge(int a) { age = a; } public int getAge() { return age; } public void study() {} } ","date":"2019-01-15","objectID":"/posts/duixiang/:0:9","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"this关键字(掌握) this：代表本类的对象 应用场景： 解决了局部变量隐藏成员变量的问题。 其他用法和super一起讲。 标准代码： class Student { private String name; private int age; public void setName(String name) {//局部变量 this.name = name; } public String getName() { return name; } public void setAge(int age) { this.age = age; } public int getAge() { return age; } public void show() { System.out.println(\"姓名是：\"+name+\",年龄是：\"+age); } public void study() { System.out.println(\"学生爱学习\"); } public void eat() { System.out.println(\"学生要吃饭\"); } public void sleep() { System.out.println(\"学生想睡觉\"); } } class StudentTest { public static void main(String[] args) { Student s = new Student(); s.setName(\"林青霞\"); s.setAge(28); s.show(); s.study(); s.eat(); s.sleep(); System.out.println(\"姓名是：\"+s.getName()); System.out.println(\"年龄是：\"+s.getAge()); } } ","date":"2019-01-15","objectID":"/posts/duixiang/:0:10","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"构造方法(掌握) 作用：对对象的数据进行初始化。 特点： A:方法名和类名相同 B:没有返回值类型 C:没有返回值 注意事项 A:如果我们没写构造方法，系统将默认给出无参构造方法 B:如果我们写了构造方法，系统将不再给出默认无参构造方法 建议：我们自己手动给出无参构造方法 给成员变量赋值： A:无参+setXxx() B:带参 一个标准的代码： class Student { private String name; private int age; public Student() {} public Student(String name,int age) {//构造方法 this.name = name; this.age = age; } public void setName(String name) { this.name = name; } public String getName() { return name; } public void setAge(int age) { this.age = age; } public int getAge() { return age; } public void show() { System.out.println(\"姓名是：\"+name+\",年龄是：\"+age); } } class StudentTest { public static void main(String[] args) { //无参+setXxx() Student s = new Student(); s.setName(\"林青霞\"); s.setAge(28); s.show(); //带参 Student ss = new Student(\"张曼玉\",20); ss.show(); } } ","date":"2019-01-15","objectID":"/posts/duixiang/:0:11","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"对象的初始化过程(理解) Student s = new Student();做了哪些事情 A:加载Student.class文件进内存 B:在栈中为s开辟空间 C:在堆中为学生对象开辟空间 D:为学生对象的成员变量赋默认值 E:为学生对象的成员变量赋显示值 F:通过构造方法给成员变量赋值 G:对象构造完毕，把地址赋值给s变量 ","date":"2019-01-15","objectID":"/posts/duixiang/:0:12","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"static关键字(掌握) 是一个状态修饰符。静态的意思 它可以修饰成员变量和成员方法 特点： A:随着类的加载而加载 B:优先于对象存在 C:被所有对象共享 这也是判断我们是不是该使用静态的条件 举例：饮水机(可共享static)和水杯例子。 D:可以通过类名调用 静态修饰的内容，可以通过类名调用，也可以通过对象名调用 方法访问特点 A:普通成员方法 可以访问静态成员变量，非静态成员变量，静态成员方法，非静态成员方法 B:静态成员方法 只能访问静态成员变量，静态成员方法 简记：静态只能访问静态 注意： 静态中是不能有this的。 先进内存的不能访问后进内存的。反之可以。 /* 班级编号应该是被班级每个人都共享的，所以定义一个就应该可以了。 而姓名和年龄，每个人应该是不一样的，所以，每个对象，都应该定义自己的。 在java中，用什么来表示成员变量是被共享的呢? static */ class Student { //姓名 String name; //年龄 int age; //班级编号 //String classNumber; static String classNumber; public Student(String name,int age) { this.name = name; this.age = age; } public Student(String name,int age,String classNumber) { this.name = name; this.age = age; this.classNumber = classNumber; } public void show() { System.out.println(name+\"---\"+age+\"---\"+classNumber); } } class StudentDemo { public static void main(String[] args) { //创建学生对象 Student s1 = new Student(\"林青霞\",28,\"20150306\"); s1.show(); /* Student s2 = new Student(\"马云\",35,\"20150306\"); s2.show(); Student s3 = new Student(\"马化腾\",33,\"20150306\"); s3.show(); */ Student s2 = new Student(\"马云\",35); s2.show(); Student s3 = new Student(\"马化腾\",33); s3.show(); } } /* static:静态关键字。 作用： 可以修饰成员变量和成员方法 特点： A:随着类的加载而加载 B:优先于对象存在 C:被类的所有对象共享 这也是我们判断是否使用静态关键字的条件 饮水机：可以被静态修饰 水杯：不可以被静态修饰 D:可以通过类名调用 我们的调用既可以是对象，还可以是类名 */ class Student { public void show() { System.out.println(\"show\"); } public static void show2() { System.out.println(\"show2\"); } } class StudentDemo2 { public static void main(String[] args) { Student s = new Student(); s.show(); s.show2(); Student.show2(); //Student.show();\u0026ensp; } } /* static的注意事项： A:在静态方法中是没有this关键字的 因为静态是随着类的加载而加载，优先于对象而存在。而this是随着对象的创建而存在。 先进内存的， 不能访问后进内存的；而后进内存的，可以访问先进内存的。 B:静态只能访问静态。 非静态的成员方法： 可以访问静态成员变量，非静态成员变量，静态成员方法，非静态成员方法 静态的成员方法： 只能访问静态的成员变量，静态的成员方法 */ /* class Student { private String name; public static void setName(String name) {//\u0026ensp;静态方法不能用this this.name = name; } public void show() { System.out.println(name); } }*/ class Demo { int x = 10; static int y = 20; public void show() { System.out.println(x); System.out.println(y); } public static void show2() { //System.out.println(x);\u0026ensp; System.out.println(y);//√ } public void show3() { show(); show2(); } public static void show4() { //show();只能访问静态的成员方法 show2(); } } class StudentDemo3 { public static void main(String[] args) { //Student.setName(\"林青霞\"); } } ","date":"2019-01-15","objectID":"/posts/duixiang/:0:13","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"静态成员变量和普通成员变量的区别(理解) 所属不同 静态属于类的，称为类变量 非静态属于对象的，称为对象变量，实例变量 内存空间不同 静态在方法区的静态区 非静态在堆内存 生命周期不同 静态随着类的加载而加载，随着类的消失而消失 非静态随着对象的创建而存在，随着对象的消失而消失 调用不同 静态可以通过类名调用，也可以通过对象名调用。建议通过类名调用 非静态只能通过对象名调用 ","date":"2019-01-15","objectID":"/posts/duixiang/:0:14","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"main方法是静态的(理解) public static void main(String[] args) public:访问权限修饰符，表示最大的访问权限，被jvm调用，所有权限要够大。 static:被jvm调用，不用创建对象，直接类名访问 void:被jvm调用，不需要给jvm返回值 main:一个通用的名称，虽然不是关键字，但是被jvm识别 String[] args: 早期出现是为了接收键盘录入数据的。 ","date":"2019-01-15","objectID":"/posts/duixiang/:0:15","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"实例 /*求和*/ class Demo { private int x; private int y; public Demo() {} public Demo(int x,int y) { this.x = x; this.y = y; } public void setX(int x) { this.x = x; } public int getX() { return x; } public void setY(int y) { this.y = y; } public int getY() { return y; } //成员变量已经有x,y了。这里就没有必要在定义了 /* public int sum(int x,int y) { return x + y; } */ public int sum() { return x + y; } } class Test { public static void main(String[] args) { Demo d = new Demo(); d.setX(10); d.setY(20); int result = d.sum(); System.out.println(result); } } /*求和*/ class Demo { public int sum(int x,int y) { return x + y; } } class Test2 { public static void main(String[] args) { Demo d = new Demo(); int result = d.sum(10,20); System.out.println(result); } } /* 定义一个员工类,自己分析出几个成员， 然后给出成员变量，构造方法，getXxx()/setXxx()方法， 以及一个显示所有成员信息的方法。并测试。 Employee： 成员变量：员工编号,姓名,职位 构造方法：无参，带参 成员方法：getXxx()/setXxx()方法，show() */ class Employee { private String eid; private String name; private String job; public Employee() {} public Employee(String eid,String name,String job) { this.eid = eid; this.name = name; this.job = job; } public void setEid(String eid) { this.eid = eid; } public String getEid() { return eid; } public void setName(String name) { this.name = name; } public String getName() { return name; } public void setJob(String job) { this.job = job; } public String getJob() { return job; } public void show() { System.out.println(\"员工编号是：\"+eid+\",姓名是：\"+name+\",职位是：\"+job); } } class EmployeeDemo { public static void main(String[] args) { //无参 Employee e = new Employee(); e.setEid(\"itcast007\"); e.setName(\"周星驰\"); e.setJob(\"高级工程师\"); e.show(); //带参 Employee e2 = new Employee(\"itcast003\",\"刘德华\",\"挖掘机工程师\"); e2.show(); } } ","date":"2019-01-15","objectID":"/posts/duixiang/:0:16","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":"java类中的成员变量和方法访问权限 关键词 同一个类 同一个包 不同包中的子类 不同包中的非子类 private √ default √ √ protected √ √ √ public √ √ √ √ ","date":"2019-01-15","objectID":"/posts/duixiang/:0:17","tags":["面向对象","Java"],"title":"面向对象基础知识总结","uri":"/posts/duixiang/"},{"categories":["Java"],"content":" 水仙花数（Narcissistic number）也被称为超完全数字不变数（pluperfect digital invariant, PPDI）、自恋数、自幂数、阿姆斯壮数或阿姆斯特朗数（Armstrong number），水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身（例如：1^3 + 5^3+ 3^3 = 153）。 ","date":"2019-01-14","objectID":"/posts/xunhuan/:0:0","tags":["水仙花数","Backend","Java"],"title":"java水仙花数（循环）","uri":"/posts/xunhuan/"},{"categories":["Java"],"content":"定义 水仙花数只是自幂数的一种，严格来说3位数的3次幂数才称为水仙花数。 附：其他位数的自幂数名字 一位自幂数：独身数 两位自幂数：没有 三位自幂数：水仙花数 四位自幂数：四叶玫瑰数 五位自幂数：五角星数 六位自幂数：六合数 七位自幂数：北斗七星数 八位自幂数：八仙数 九位自幂数：九九重阳数 十位自幂数：十全十美数 package xunhuan; import java.util.Scanner; public class shuixianhua { public static void main(String[] agrs) { System.out.print(\"指定最大位数N:\"); Scanner input = new Scanner(System.in); int N = input.nextInt(); input.close(); for (int i = 3; i \u003c= N; i++) { int a[] = new int[i]; int num = (int) Math.pow(10, i - 1) + 1; System.out.print(i + \"位的水仙花数有：\\t\"); while (num \u003c= Math.pow(10, i)) { int sum = 0; for (int j = 0; j \u003c i; j++) a[j] = (int) (num / Math.pow(10, j) % 10);//取各个位的数 for (int j = 0; j \u003c i; j++) sum = sum + (int) Math.pow(a[j], i); if (num == sum) System.out.print(num + \"\\t\"); num++; } System.out.print(\"\\n\"); } } } 由于int精度限制，最多算到9位，而且使用常规算法，算到8，9位的时候就特别慢了。 指定最大位数N:10 3位的水仙花数有： 153 370 371 407 4位的水仙花数有： 1634 8208 9474 5位的水仙花数有： 54748 92727 93084 6位的水仙花数有： 548834 7位的水仙花数有： 1741725 4210818 9800817 9926315 8位的水仙花数有： 24678050 24678051 88593477 9位的水仙花数有： 146511208 ","date":"2019-01-14","objectID":"/posts/xunhuan/:0:1","tags":["水仙花数","Backend","Java"],"title":"java水仙花数（循环）","uri":"/posts/xunhuan/"},{"categories":["Java"],"content":"标识符： 给类，接口，方法或者变量起名字的符号 ","date":"2019-01-14","objectID":"/posts/biaoshi/:0:1","tags":["Backend","Java"],"title":"java 标识符","uri":"/posts/biaoshi/"},{"categories":["Java"],"content":"组成规则： A:英文字母大小写 B:数字 C:_和$ ","date":"2019-01-14","objectID":"/posts/biaoshi/:0:2","tags":["Backend","Java"],"title":"java 标识符","uri":"/posts/biaoshi/"},{"categories":["Java"],"content":"注意事项： A:不能以数字开头 B:不能是Java中的关键字 C:区分大小写 Student,student 这是两个名称 ","date":"2019-01-14","objectID":"/posts/biaoshi/:0:3","tags":["Backend","Java"],"title":"java 标识符","uri":"/posts/biaoshi/"},{"categories":["Java"],"content":"常见命名方式： A:包 其实就是文件夹,用于解决相同类名问题 全部小写 单级：com 多级：cn.itcast B:类或者接口 一个单词：首字母大写 Student,Person,Teacher 多个单词：每个单词的首字母大写 HelloWorld,MyName,NameDemo C:方法或者变量 一个单词：全部小写 name,age,show() 多个单词：从第二个单词开始，每个单词首字母大写 myName,showAllStudentNames() D:常量 一个单词：全部大写 AGE 多个单词：每个单词都大写，用_连接 STUDENT_MAX_AGE ","date":"2019-01-14","objectID":"/posts/biaoshi/:0:4","tags":["Backend","Java"],"title":"java 标识符","uri":"/posts/biaoshi/"},{"categories":["生活随笔"],"content":" 以前每年都会在QQ空间写每年的总结，可是现在已经过了肆意在空间写说说的年纪了。所幸还有博客这一席之地。 18年主要的收获，经历大概就在下面了，可还是没有学到什么硬本事，寒假还是要学习一下 java 和 jsp。 首先最开心的是在狗年刚开始3月底回到湘潭后，拿下了驾照（年前挂了一次很不爽），可以开共享汽车了，体验共享时代的新滋味。 然后是11月份的软考，虽然没有认真准备考试，还是过了（上午压线）。不知道是今年的容易还是怎么的，反正我考完就觉得挺容易的。 5月底搭建了现在这个hexo静态博客，还收到了一些网上朋友的打赏，感谢！ 用打赏的钱买了两个服务器一个国内的，一个国外的。搭了一个文件浏览器作为自己的网盘,还搭了一个ss梯子供自己翻墙使用。 参加了 2018 年 ACM 的湘潭全国邀请赛，在湘大，虽然很遗憾没有拿奖，但就当走过这步吧，略过。 暑假结束，退出了 E313ACM 实验室，也就没有刷题打比赛了。 大二获得了个国家励志，还不错。hhhh有奖金! 真的很菜但是退实验之前，学院的编程比赛还是运气好拿了个三等奖。 ","date":"2019-01-12","objectID":"/years/2018/:0:0","tags":["总结","生活随笔"],"title":"2018年度总结","uri":"/years/2018/"},{"categories":["others"],"content":" 前面我有文章提到怎么提交本地文件到github,coding等远程仓库。每次可以分为三个步骤 git add * (添加需要提交的文件，这里全选) git commit -m “提交信息” git push 但是这样感觉很麻烦每次都要重复输入提交命令和提示信息。 这个时候可以用到windows批处理bat文件(linux的话可以用shell脚本)。用完发现好用到不行! ","date":"2018-11-17","objectID":"/posts/commit-bat/:0:0","tags":["脚本","bat"],"title":"通过bat批处理文件自动提交博客代码","uri":"/posts/commit-bat/"},{"categories":["others"],"content":"新建文本文档 @echo off title Commit git add . set /p m=Message: git commit -m \"%m%\" git push 然后另存为commit.bat文件，只要后缀是bat就行了。 ","date":"2018-11-17","objectID":"/posts/commit-bat/:0:1","tags":["脚本","bat"],"title":"通过bat批处理文件自动提交博客代码","uri":"/posts/commit-bat/"},{"categories":["others"],"content":"使用 把文件放到你原本需要提交代码的本地文件夹。双击运行，输入提交信息回车即可。 ","date":"2018-11-17","objectID":"/posts/commit-bat/:0:2","tags":["脚本","bat"],"title":"通过bat批处理文件自动提交博客代码","uri":"/posts/commit-bat/"},{"categories":["others"],"content":"hexo博客新姿势 hexo提交也很麻烦，当然也要批处理一下呀 hexo clean\u0026\u0026hexo g -d ","date":"2018-11-17","objectID":"/posts/commit-bat/:0:3","tags":["脚本","bat"],"title":"通过bat批处理文件自动提交博客代码","uri":"/posts/commit-bat/"},{"categories":["others"],"content":"其他 死机脚本 (友情提醒千万不要在真机实验，请在虚拟机运行) start cmd ifconfig 另外也说一下linux死机命令。fork炸弹。 死机无非是耗尽系统资源 _(){ _ | _ \u0026 }; _ 这个\u0026指后台运行的意思。 统计文件名 dir \\\\?\\%1 /a:-d /b /o /p /w \u003eFilelist.txt 将需要统计的文件夹拖到bat文件上。 ","date":"2018-11-17","objectID":"/posts/commit-bat/:0:4","tags":["脚本","bat"],"title":"通过bat批处理文件自动提交博客代码","uri":"/posts/commit-bat/"},{"categories":["others"],"content":"博客app下载 ","date":"2018-11-12","objectID":"/posts/fas-app/:0:0","tags":["lua","fusion"],"title":"博採眾長app","uri":"/posts/fas-app/"},{"categories":["others"],"content":"介绍 使用fusion app对网页进行的封装。 功能： 浏览本博客，主页 私人网盘 2048等小游戏 在线客服，QQ等 pc与移动浏览器标识切换 留言，打赏，博主日志等 分享功能，分享到QQ，微信，浏览器打开等 app内添加书签，自动记录历史记录，刷新等 配合博客的PWA + quicklink功能可实现离线浏览 ","date":"2018-11-12","objectID":"/posts/fas-app/:0:1","tags":["lua","fusion"],"title":"博採眾長app","uri":"/posts/fas-app/"},{"categories":["others"],"content":"下载 app内也可以更新，不过就我自己用，懒得更新。 百度云，密码:479l github下载 PWA应用 地址栏输入: Chrome://flags 搜索并启用以下项目: Desktop PWAs(桌面PWAs)、App Banners(应用横幅)、Experimental App Banners(实验性应用横幅) 重启浏览器使修改的设置生效 点击地址栏最右边按钮 安装“博採眾長” ","date":"2018-11-12","objectID":"/posts/fas-app/:0:2","tags":["lua","fusion"],"title":"博採眾長app","uri":"/posts/fas-app/"},{"categories":["others"],"content":"部分源码 看到这些中文的函数总觉得怪怪的哈哈哈😂 语言：lua 检测更新 --检查测当前是否最新版本 local dl=ProgressDialog.show(activity,nil,'更新检测中…') dl.show() local tt=Ticker() tt.start() packinfo=this.getPackageManager().getPackageInfo(this.getPackageName(),((32552732/2/2-8183)/10000-6-231)/9) version=tostring(packinfo.versionName) versioncode=tostring(packinfo.versionCode) url=\"https://share.weiyun.com/43fa66d8fc95db27141530ed2d006be2\"; function 过滤(content) 版本名=content:match(\"【版本名】(.-)【版本名】\") 版本=content:match(\"【版本】(.-)【版本】\") 内容=content:match(\"【内容】(.-)【内容】\") 链接=content:match(\"【链接】(.-)【链接】\") if(版本名==nil) then 版本名=\"获取失败\" end if(版本==nil) then 版本=\"0\" end if(内容==nil) then 内容=\"获取失败\" end if(链接==nil) then 弹出消息(\"服务器参数配置错误，请过段时间再次尝试\") end if(版本 \u003e versioncode) then dl.dismiss() tt.stop() 对话框() .设置标题(\"检测到更新\") .设置消息(\"版本：\"..version..\"→\"..版本名..\"\\n更新内容：\"..内容) .设置积极按钮(\"下载更新\",function() 下载文件(链接) 弹出消息(\"下载更新中…\") end) .设置消极按钮(\"取消更新\") .显示() else dl.dismiss() tt.stop() 弹出消息(\"当前已是最新版本！\") end end Http.get(url,nil,\"UTF-8\",nil,function(code,content,cookie,header) if(code==200 and content)then content=content:match(\"\\\"html_content\\\":(.-),\"):gsub(\"\\\\u003C/?.-%\u003e\",\"\"):gsub(\"\\\\\\\\\",\"\u0026revs;\"):gsub(\"\\\\n\",\"\\n\"):gsub(\"\u0026nbsp;\",\" \"):gsub(\"\u0026lt;\",\"\u003c\"):gsub(\"\u0026gt;\",\"\u003e\"):gsub(\"\u0026quot;\",\"\\\"\"):gsub(\"\u0026apos;\",\"'\"):gsub(\"\u0026revs;\",\"\\\\\"):gsub(\"\u0026amp;\",\"\u0026\"); 过滤(content) else dl.dismiss() tt.stop() 弹出消息(\"本地网络或服务器异常 \"..code) end end) 方向锁定 --flag在程序启动事件声明的全局变量 if flag==1 then activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR); SetHSP=\"H\" else SetHSP=nil end if SetHSP==nil then --竖屏锁定 activity.setRequestedOrientation(1); flag=1 else flag=0 end 程序启动事件 弹出消息(\"©2018 李瑞豪\") --自动，由物理感应器决定 import \"android.content.pm.ActivityInfo\" flag=1 --程序退出时执行对话框 function onKeyDown(key,event) if(key==4)then if(webView.canGoBack())then webView.goBack() else appinfo=this.getPackageManager().getApplicationInfo(this.getPackageName(),0) applabel=this.getPackageManager().getApplicationLabel(appinfo) 退出确认=对话框() .设置消息(\"您确定要退出 \"..applabel..\" 吗?\") 退出按钮={ [1]=function() 退出确认 .设置积极按钮(\"确认\",function() 退出程序() end ) .设置中立按钮(\"清除缓存\",function() 对话框() .设置消息(\"清除缓存后再次运行程序将变得缓慢\\n您确定要清除 \"..applabel..\" 的缓存吗?\") .设置积极按钮(\"确定\",function() os.execute(\"pm clear \"..this.packageName) 退出程序() end) .设置消极按钮(\"取消\",function() end) .显示() end ) .设置消极按钮(\"取消\") end } math.randomseed(tonumber(tostring(os.time()):reverse():sub(1, 6))) 退出按钮[math.random(1,1)]() 退出确认.show() end return true end end --历史记录 lstads=\"/data/data/\"..activity.getPackageName()..\"/lst.lua\" lstwebads=\"/data/data/\"..activity.getPackageName()..\"/lstweb.lua\" --2.序列化 function slz(obj) local lua = \"\" local t = type(obj) if t == \"number\" then lua = lua .. obj elseif t == \"boolean\" then lua = lua .. tostring(obj) elseif t == \"string\" then lua = lua .. string.format(\"%q\", obj) elseif t == \"table\" then lua = lua .. \"{\\n\" for k, v in pairs(obj) do lua = lua .. \"[\" .. slz(k) .. \"]=\" .. slz(v) .. \",\\n\" end local metatable = getmetatable(obj) if metatable ~= nil and type(metatable.__index) == \"table\" then for k, v in pairs(metatable.__index) do lua = lua .. \"[\" .. slz(k) .. \"]=\" .. slz(v) .. \",\\n\" end end lua = lua .. \"}\" elseif t == \"nil\" then return nil else error(\"can not serialize a \" .. t .. \" type.\") end return lua end function rslz(lua) local t = type(lua) if t == \"nil\" or lua == \"\" then return {} elseif t == \"number\" or t == \"string\" or t == \"boolean\" then lua = tostring(lua) else error(\"can not unserialize a \" .. t .. \" type.\") end lua = \"return \" .. lua local func = loadstring(lua) if func == nil then return nil end return func() end --3.历史记录框布局 function hstshow() hstlayout={ LinearLayout, orientation=\"1\", gravity=\"center\", layout_width=\"wrap_content\", layout_height=\"wrap_content\", { TextView, text=\"\", gravity=\"center\", layout_width=\"wrap_content\", textSize=\"0sp\", background=\"#000000\", layout_height=\"15dp\",}, { TextView, text=\"历史记录\", gravity=\"center\", layout_width=\"wrap_content\", textSize=\"30sp\", textStyle=\"bold\", layout_height=\"50dp\",}, { ListView, id=\"hlst\", items=lst, layout_width=\"fill\", layout_height=\"wr","date":"2018-11-12","objectID":"/posts/fas-app/:0:3","tags":["lua","fusion"],"title":"博採眾長app","uri":"/posts/fas-app/"},{"categories":["others"],"content":"安装 cd ~ curl https://getcaddy.com | bash -s personal http.filemanager ","date":"2018-11-11","objectID":"/posts/caddy-file/:0:1","tags":["云盘","caddy","server"],"title":"caddy-两步搭建超简单云盘","uri":"/posts/caddy-file/"},{"categories":["others"],"content":"编写配置文件 vim Caddyfile 内容如下: :80 { filemanager / /sdcard timeouts none gzip } 这里的8080端口号可以随意指定, 如果在手机termux等搭建，由于手机权限比较低, 所以一般设置1024以上的端口.80端口可以直接通过ip访问。如118.24.217.167 如果用域名，先在域名服务商解析ip,再配置文件如下 https://pan.lruihao.cn { filemanager / /sdcard timeouts none tls admin@lruihao.cn gzip } 指定邮箱是为了申请ssl,实现https. ","date":"2018-11-11","objectID":"/posts/caddy-file/:0:2","tags":["云盘","caddy","server"],"title":"caddy-两步搭建超简单云盘","uri":"/posts/caddy-file/"},{"categories":["others"],"content":"demo 启动caddy caddy 账号密码默认admin ","date":"2018-11-11","objectID":"/posts/caddy-file/:0:3","tags":["云盘","caddy","server"],"title":"caddy-两步搭建超简单云盘","uri":"/posts/caddy-file/"},{"categories":["others"],"content":"设置定时器启动caddy（好像没用,我不会） 为了断开xshell后caddy还在运行。 vim run.sh 编辑以下内容 #!/bin/bash caddy 加权 chmod +x run.sh 设置任务 参考 crontab -e 加入 * * * * * /root/run.sh service crond start ","date":"2018-11-11","objectID":"/posts/caddy-file/:0:4","tags":["云盘","caddy","server"],"title":"caddy-两步搭建超简单云盘","uri":"/posts/caddy-file/"},{"categories":["others"],"content":"？？？ 最后误打误撞开启了caddy 昨晚双十一要抢裤子，加上湘潭天气太tm冷了，就上床了，接着用termux远程连接服务器继续搞。结果连接的时候命令输错了-_-! 本来是ssh root@118.24.217.167再输入密码就可以了。这次搞错了多写了个-T,然后运行caddy,ctrl+c 再断开，意外地发现filemanager竟然可以访问了。 ssh -T root@118.24.217.167 caddy Ctrl+c ","date":"2018-11-11","objectID":"/posts/caddy-file/:0:5","tags":["云盘","caddy","server"],"title":"caddy-两步搭建超简单云盘","uri":"/posts/caddy-file/"},{"categories":["hexo","Git"],"content":"备份hexo博客 //如果themes/next(主题文件)下面有.git，请删除这个.git文件夹。 cd hexo git init //初始化本地仓库 git add source themes scaffolds _config.yml package.json package-lock.json //将必要的文件依次添加 git commit -m \"blog hexo\" git branch hexo //新建hexo分支 git checkout hexo //切换到hexo分支上 git remote add origin git@github.com:username/username.github.io.git //将本地与Github项目对接 git push origin hexo //push到Github项目的hexo分支上 ","date":"2018-11-03","objectID":"/posts/blog-backup/:0:1","tags":["hexo","Git","Nodejs"],"title":"hexo 博客源码备份","uri":"/posts/blog-backup/"},{"categories":["hexo","Git"],"content":"在其他终端克隆和更新hexo博客 nodejs,git,hexo已经安装好,即搭建完成 克隆hexo博客备份 git clone -b hexo git@github.com:username/username.github.io.git //将Github中hexo分支clone到本地 cd user.github.io npm install //注意，这里一定要切换到刚刚clone的文件夹内执行，安装必要的所需组件，不用再init 这样我们的备份文件就会原封不动的拷贝到本地。 写新文章并备份和部署（备用操作） 其实源码拷下来了，这步不做我们也知道怎么做了，完全没必要按照教程死搬硬套。灵活一点就行了。 //进入username.github.io文件夹,应是hexo分支 git pull origin hexo //本地和远端的融合 hexo new post \"new post name\" //写新文章 git add source git commit -m \"xxx\" git push origin hexo //备份 hexo d -g //部署 参考 ","date":"2018-11-03","objectID":"/posts/blog-backup/:0:2","tags":["hexo","Git","Nodejs"],"title":"hexo 博客源码备份","uri":"/posts/blog-backup/"},{"categories":["生活随笔"],"content":"备案 经过时间长达20多天的备案之旅今天终于结束了，也闭馆了20多天，也按相关要求把ICP备案号和公安备案号加载了网站和博客底部。只是今天去岳塘分局签网络安全告知书的时候不小心把身份证落在那个办公室了。亏我走之前一秒还在提醒自己，唉！不过那个办公室的大姐姐挺好的，前面跟我说好星期一来，我还今天上午提前给她打了电话，她还下楼给我开办公楼楼道的门禁，还有我身份证落在那里她说先帮我收着，有时间再去拿！总之，这个姐姐的服务态度五星好评！手动@岳塘分局B204的姐姐。 备案完成也算放下一块提着的石头，可以睡个好觉了！ZzZzzzz ","date":"2018-10-29","objectID":"/posts/beian/:0:0","tags":["生活随笔","网站备案"],"title":"网站备案之旅","uri":"/posts/beian/"},{"categories":["others"],"content":"数据的表示 数据的表示可分为：原码，反码和补码。（二进制） 原码： 符号位0为正，1为负。 反码： 符号位0为正，1为负。 正数： 反码同原码。 负数： 符号位除外其他位按位取反。 补码： 正数： 同原码。 负数： 符号位除外其他位按位取反再+1。 移码： 补码符号位取反。 ","date":"2018-10-08","objectID":"/posts/data/:0:1","tags":["计算机数据","计算机组成与体系结构"],"title":"计算机数据","uri":"/posts/data/"},{"categories":["others"],"content":"数据表示范围 原码： -(z^n-1 - 1) ~ 2^n-1 - 1 反码： -(z^n-1 - 1) ~ 2^n-1 - 1 补码： -z^n-1 ~ 2^n-1 - 1 (补码正0和负0相同，少占一数位，就多一个范围) 例： 8位二进制，除去符号位还有7位，7个1为最大数，相当于8个1减1，也就是2^7-1,所以范围就算出来了。 ","date":"2018-10-08","objectID":"/posts/data/:0:2","tags":["计算机数据","计算机组成与体系结构"],"title":"计算机数据","uri":"/posts/data/"},{"categories":["others"],"content":"浮点数运算 对阶（小阶对大阶）+ 尾数计算（科学计数法）+ 结果规格化（科学技术法） ","date":"2018-10-08","objectID":"/posts/data/:0:3","tags":["计算机数据","计算机组成与体系结构"],"title":"计算机数据","uri":"/posts/data/"},{"categories":["JavaScript"],"content":" 从暑假到现在有好几个小伙伴问我博客的标题怎么变来变去的，不想再和每个人都说一遍了，耽误时间，索性写一下。 ","date":"2018-09-26","objectID":"/posts/crash-cheat/:0:0","tags":["JavaScript","Frontend","hexo"],"title":"网页离开时改变标题“崩溃欺骗”","uri":"/posts/crash-cheat/"},{"categories":["JavaScript"],"content":"创建一个js文件 我们先创建一个js文件，我们用记事本就好了，然后改个文件名，不妨就叫crash-cheat.js吧，你们可以随意！ 然后把文件放到source文件夹的js文件夹的src里面。（我用的next主题，放这里统一存放，其他主题随意） 崩溃欺骗(Jquery版) var OriginTitle = document.title; var titleTime; document.addEventListener('visibilitychange', function () { if (document.hidden) { $('[rel=\"icon\"]').attr('href', \"https://i.loli.net/2018/08/24/5b7fcb00ed9bf.png\"); document.title = '怎么回事╭(°A°`)╮'; clearTimeout(titleTime); } else { $(\"[rel='icon']\").attr('href', \"https://i.loli.net/2018/09/25/5baa4f21661e7.png\"); document.title = '小老弟(ฅ\u003eω\u003c*ฅ)'; titleTime = setTimeout(function () { document.title = OriginTitle; $(\"[rel='icon']\").attr('href', \"/images/favicon-32x32-next.png\"); }, 2000); } }); 崩溃欺骗(JS版) var oldTitle = document.title; var titleTime; //標題恢復計時器 document.addEventListener(\"visibilitychange\", function () { if (document.hidden) { document.querySelector(\"[rel='icon']\").setAttribute(\"href\", \"/images/icons/favicon-32.png\"); document.title = \"網站崩潰了！\"; clearTimeout(titleTime); } else { document.title = \"其實並沒有！\"; document.querySelector(\"[rel='icon']\").setAttribute(\"href\", \"/images/icons/crash.png\"); titleTime = setTimeout(function () { document.title = oldTitle; }, 1000); } }); ","date":"2018-09-26","objectID":"/posts/crash-cheat/:1:0","tags":["JavaScript","Frontend","hexo"],"title":"网页离开时改变标题“崩溃欺骗”","uri":"/posts/crash-cheat/"},{"categories":["JavaScript"],"content":"使用 在hexo\\themes\\hexo-theme-next\\layout文件路径找到layout.swig文件，其他有些主题用的是.ejs后缀，一样的。 然后打开文件，在\u003cbody\u003e\u003c/body\u003e之间加入调用刚刚的js。 \u003cscript type=\"text/javascript\" src=\"/js/src/crash-cheat.js\"\u003e\u003c/script\u003e 重新部署博客就可以了。 ","date":"2018-09-26","objectID":"/posts/crash-cheat/:2:0","tags":["JavaScript","Frontend","hexo"],"title":"网页离开时改变标题“崩溃欺骗”","uri":"/posts/crash-cheat/"},{"categories":["JavaScript","hexo"],"content":" 本文适合我这种纯小白。 目前为止，全网也就只有一个博主写到过这样动态显示subtitle的文章。传送门（关键词：js,后加载） 但是嘞，该博写的不怎么详细，17年底写的。当然更大的可能是next更新了一些文件结构，所以不适合现在使用了。以前我按原博的流程配置了一下没成功就搁在那里了，今天突然心血来潮。翻了翻原博主博客的源码，再与自己的对比了一下，发现了一些端倪。稍作调整后如下： ","date":"2018-08-20","objectID":"/posts/dongtaisub/:0:0","tags":["hexo","JavaScript","Frontend"],"title":"hexo 个性化 - next 主题动态显示 subtitle","uri":"/posts/dongtaisub/"},{"categories":["JavaScript","hexo"],"content":"修改站点配置文件，主要修改subtitle subtitle: 不怕万人阻挡，只怕自己投降。W你如何回忆，决定你是一个怎样的人！W这是一个句子。W这是另一个句子。W这些句子你们不要搞一样的不然怎么叫个性签名-_-！。 句子与句子之间以W分割，后续需要根据该标志位去拆分句子组。 小伙伴们博主这里只是提供一个思路，不要和我用一模一样的啊，不然撞了多尴尬呀 ","date":"2018-08-20","objectID":"/posts/dongtaisub/:1:0","tags":["hexo","JavaScript","Frontend"],"title":"hexo 个性化 - next 主题动态显示 subtitle","uri":"/posts/dongtaisub/"},{"categories":["JavaScript","hexo"],"content":"修改 header\\index.swig 修改 themes\\next\\layout_partials\\header 下面的 index.swig 文件 在最开头添加如下代码： (这里用的原博的js) \u003cscript\u003e function GetRandomNum(Min,Max) { var Range = Max - Min; var Rand = Math.random(); return(Min + Math.round(Rand * Range)); } function setSidebarMarginTop (headerOffset) { return $('#sidebar').css({ 'margin-top': headerOffset }); } function getHeaderOffset () { return $('.header-inner').height() + CONFIG.sidebar.offset; } window.onload=function(){ var subtitle = \"{{config.subtitle}}\"; var mytitle = subtitle.split(\"W\"); var max = mytitle.length-1; var index = GetRandomNum(0,max); var text = mytitle[index]; $(\"#helloTitle\").html(text); var headOffset = getHeaderOffset(); setSidebarMarginTop(headOffset); //动态subtitle设置 } \u003c/script\u003e ","date":"2018-08-20","objectID":"/posts/dongtaisub/:2:0","tags":["hexo","JavaScript","Frontend"],"title":"hexo 个性化 - next 主题动态显示 subtitle","uri":"/posts/dongtaisub/"},{"categories":["JavaScript","hexo"],"content":"修改 brand.swig 找到 {% if subtitle %} {% if theme.seo %} ... {% else %} ... {% endif %} {% endif %} 把这一段，把原来的修改成以下代码即可 ps: title和subtitle的字体还有颜色也可以在这个文件修改，即使用style标签，按个人爱好修改也可不要。 {% if subtitle %} {% if theme.seo %} \u003cp class=\"site-subtitle\" id=\"helloTitle\" itemprop=\"description\"\u003e\u003c/p\u003e {% else %} \u003cp id=\"helloTitle\" class=\"site-subtitle\"\u003e\u003c/p\u003e {% endif %} {% endif %} 之后部署后每次刷新就可以看到不同的 subtitle 了，开心😀 ","date":"2018-08-20","objectID":"/posts/dongtaisub/:3:0","tags":["hexo","JavaScript","Frontend"],"title":"hexo 个性化 - next 主题动态显示 subtitle","uri":"/posts/dongtaisub/"},{"categories":["JavaScript","hexo"],"content":"今日诗词 今日诗词 \u003cspan id=\"jinrishici-sentence\"\u003e正在加载今日诗词....\u003c/span\u003e \u003cscript src=\"https://sdk.jinrishici.com/v2/browser/jinrishici.js\" charset=\"utf-8\"\u003e\u003c/script\u003e 正在加载今日诗词.... ","date":"2018-08-20","objectID":"/posts/dongtaisub/:4:0","tags":["hexo","JavaScript","Frontend"],"title":"hexo 个性化 - next 主题动态显示 subtitle","uri":"/posts/dongtaisub/"},{"categories":["JavaScript","hexo"],"content":"api 调用 直接 js 调用 api 简单快速 2021/9/30 更新 一言api-参数详见 已经挂了 \u003cdiv\u003e \u003cscript type=\"text/javascript\" src=\"https://api.imjad.cn/hitokoto/?cat=\u0026charset=utf-8\u0026length=\u0026encode=js\u0026fun=sync\u0026source=\"\u003e\u003c/script\u003e \u003cdiv id=\"hitokoto\"\u003e \u003cscript\u003ehitokoto()\u003c/script\u003e \u003c/div\u003e \u003c/div\u003e ","date":"2018-08-20","objectID":"/posts/dongtaisub/:5:0","tags":["hexo","JavaScript","Frontend"],"title":"hexo 个性化 - next 主题动态显示 subtitle","uri":"/posts/dongtaisub/"},{"categories":["ACM"],"content":"题目链接 Dreamoon wants to climb up a stair of n steps. He can climb 1 or 2 steps at each move. Dreamoon wants the number of moves to be a multiple of an integer m. What is the minimal number of moves making him climb to the top of the stairs that satisfies his condition? ","date":"2018-08-10","objectID":"/posts/codeforces476a/:0:0","tags":["Codeforces","ACM","数学","C++","C"],"title":"Dreamoon and Stairs","uri":"/posts/codeforces476a/"},{"categories":["ACM"],"content":"Input The single line contains two space separated integers n, m (0 \u003c n ≤ 10000, 1 \u003c m ≤ 10). ","date":"2018-08-10","objectID":"/posts/codeforces476a/:0:1","tags":["Codeforces","ACM","数学","C++","C"],"title":"Dreamoon and Stairs","uri":"/posts/codeforces476a/"},{"categories":["ACM"],"content":"Output Print a single integer — the minimal number of moves being a multiple of m. If there is no way he can climb satisfying condition print - 1 instead. ","date":"2018-08-10","objectID":"/posts/codeforces476a/:0:2","tags":["Codeforces","ACM","数学","C++","C"],"title":"Dreamoon and Stairs","uri":"/posts/codeforces476a/"},{"categories":["ACM"],"content":"Examples input 10 2 output 6 input 3 5 output -1 ","date":"2018-08-10","objectID":"/posts/codeforces476a/:0:3","tags":["Codeforces","ACM","数学","C++","C"],"title":"Dreamoon and Stairs","uri":"/posts/codeforces476a/"},{"categories":["ACM"],"content":"Note For the first sample, Dreamoon could climb in 6 moves with following sequence of steps: {2, 2, 2, 2, 1, 1}. For the second sample, there are only three valid sequence of steps {2, 1}, {1, 2}, {1, 1, 1} with 2, 2, and 3 steps respectively. All these numbers are not multiples of 5. 有一个n级台阶，每次可以走一级或两级，问最少的步数是多少，且步数必须是m的倍数。 找一下数学公式就好了。 具体看代码。 #include\u003cbits/stdc++.h\u003eusing namespace std; int main(){ int x,n,m; cin\u003e\u003en\u003e\u003em; if(n\u003cm){ cout\u003c\u003c-1\u003c\u003cendl; return 0; } if(n==m){ cout\u003c\u003cn\u003c\u003cendl; return 0; } if(n%2==0){ x=n/2%m; if(x==0) cout\u003c\u003cn/2\u003c\u003cendl; else cout\u003c\u003cn/2+m-x\u003c\u003cendl; }else if(n%2!=0){ x=(n/2+1)%m; if(x==0) cout\u003c\u003cn/2+1\u003c\u003cendl; else cout\u003c\u003c(n/2+1)+m-x\u003c\u003cendl; } return 0; } ","date":"2018-08-10","objectID":"/posts/codeforces476a/:0:4","tags":["Codeforces","ACM","数学","C++","C"],"title":"Dreamoon and Stairs","uri":"/posts/codeforces476a/"},{"categories":["ACM"],"content":"题目链接 ","date":"2018-08-10","objectID":"/posts/codeforces476b/:0:0","tags":["组合数学","Codeforces","ACM","数学","C++","C"],"title":"Dreamoon and WiFi(组合数学)","uri":"/posts/codeforces476b/"},{"categories":["ACM"],"content":"题目大意 就是给定两个字符串，第一个字符串由\"+\",\"-“组成，第二个字符串由”+\",\"-\",\"?“组成，“+”代表加1，\"-“代表减一，“?“代表可取正也可取负，问第二个字符串的位置和第一个字符串相等的概率是多少。 我一开始的想法是把（+1，-1）^n 看成和二项式定理一样的展开始式，只不过把乘法改为加法，然后得到公式 c(n,0)(n+(-1)0)+c(n,1)(n-1+(-1)1)+c(n,i)(n-i+(-1)i)+...+c(n,n)(n-n+(-1)n) 化简一下可知通项为c(n,i)(n-2*i) 然后我对第一个串求出位置sum,第二个串先求出已知位置sum1，然后记录下？的个数，然后遍历找出展开式中某一项n-2i+sum1==sum，这样x的系数就是可能出现位置相等的所有情况，用(n-2i)/系数和就是概率了啊，可是为什么不对呢，本地调试，数据没问题，可是交到cf上第二组都过不了，烦亏我还觉得想到一个独辟的方法呢，过不了。。。 //cf错误报告，思前恐后不晓得why,wtf???先码着吧 Test: #2, time: 0 ms., memory: 0 KB, exit code: 0, checker exit code: 1, verdict: WRONG_ANSWER Input +-+- +-?? Output -0.000000000000 Answer 0.500000000000 Checker Log wrong answer 1st numbers differ - expected: '0.5000000', found: '-0.0000000', error = '0.5000000' ","date":"2018-08-10","objectID":"/posts/codeforces476b/:0:1","tags":["组合数学","Codeforces","ACM","数学","C++","C"],"title":"Dreamoon and WiFi(组合数学)","uri":"/posts/codeforces476b/"},{"categories":["ACM"],"content":"错误代码 #include\u003cbits/stdc++.h\u003eusing namespace std; int main(){ int i,j,cnt=0; long long c[11][11],sum=0,sum1=0; for(i = 0; i \u003c 11; i++){//杨辉三角 c[i][0] = 1; c[i][i] = 1; for(j = 1; j \u003c i; j++) c[i][j] = c[i-1][j] + c[i-1][j-1]; } string a,b; cin\u003e\u003ea\u003e\u003eb; //cout\u003c\u003ca\u003c\u003cendl\u003c\u003cb\u003c\u003cendl; int len=a.length(); for(i=0;i\u003clen;i++) if(a[i]=='+') sum+=1; else sum-=1; for(i=0;i\u003cb.length();i++){ if(b[i]=='+') sum1+=1; else if(b[i]=='-')sum1-=1; if(b[i]=='?') cnt++; } if(sum==sum1\u0026\u0026cnt==0){ printf(\"1.000000000000\\n\"); return 0; } int flag=0; int x=0; for(j=0;j\u003c=cnt;j++) x+=c[cnt][j]; //cout\u003c\u003cx\u003c\u003cendl; for(i=0;i\u003c=cnt;i++) if(cnt-2*i+sum1==sum){ flag=1; long double y=c[cnt][i]*1.0/x; printf(\"%.12llf\\n\",y); } if(!flag)printf(\"0.000000000000\\n\"); return 0; } 想不通，没办法只好换思路。。。。 我先分别记下a,b串的'+','-','?‘个数，然后后我们很容易知道，如要a,b位置相等,则加号和减号的数目，两串要相等，且a中的加号要比b中已知的加号要多，减号也要比b中已知的要多，否则打死都不会相等的，仔细比划一下就知道了。然后有z个‘?’，相当于有z个坑，让我们去填使得a,b相等。只能填+或-，设加号差等于x-p,所以概率就等于c(z,x-p)/2^z。 ","date":"2018-08-10","objectID":"/posts/codeforces476b/:0:2","tags":["组合数学","Codeforces","ACM","数学","C++","C"],"title":"Dreamoon and WiFi(组合数学)","uri":"/posts/codeforces476b/"},{"categories":["ACM"],"content":"AC代码 #include\u003cbits/stdc++.h\u003eusing namespace std; int main(){ string a,b; int x,y,z,p,q,c[11][11],i,j; for(i = 0; i \u003c 11; i++){ c[i][0] = 1; c[i][i] = 1; for(j = 1; j \u003c i; j++) c[i][j] = c[i-1][j] + c[i-1][j-1]; } cin\u003e\u003ea; cin\u003e\u003eb; x=y=z=p=q=0; for(i=0;i\u003ca.length();i++) if(a[i]=='+') x++; else y++; for(i=0;i\u003cb.length();i++){ if(b[i]=='+') p++; else if(b[i]=='-') q++; else z++; } if(x==p\u0026\u0026z==0){ printf(\"1.000000000000\\n\"); return 0; } if(x-p\u003c0||y-q\u003c0) { printf(\"0.000000000000\\n\"); return 0; } x=x-p; printf(\"%0.12f\",c[z][x]*1.0/(2\u003c\u003c(z-1))); return 0; } 几分钟写完后面的代码，心中一万头草泥马在奔腾。。。。 ","date":"2018-08-10","objectID":"/posts/codeforces476b/:0:3","tags":["组合数学","Codeforces","ACM","数学","C++","C"],"title":"Dreamoon and WiFi(组合数学)","uri":"/posts/codeforces476b/"},{"categories":["ACM"],"content":"转载注明，侵删 ","date":"2018-08-10","objectID":"/posts/euclid/:0:0","tags":["数学","数论","ACM","欧几里得","他山之石","C++","C"],"title":"The equation-SGU106(扩展欧几里得)","uri":"/posts/euclid/"},{"categories":["ACM"],"content":"题意： 给出a,b,c,x1,x2,y1,y2，求满足ax+by+c=0，且x∈[x1,x2],y∈[y1,y2]的整数解个数。 ","date":"2018-08-10","objectID":"/posts/euclid/:0:1","tags":["数学","数论","ACM","欧几里得","他山之石","C++","C"],"title":"The equation-SGU106(扩展欧几里得)","uri":"/posts/euclid/"},{"categories":["ACM"],"content":"分析： 对于解二元一次不定方程，容易想到利用扩展欧几里得求出一组可行解后找到通解，下面来介绍一下欧几里得以及扩展欧几里得。 欧几里得： 又名辗转相除法，是用来计算两个数的最大公约数，其中就是利用gcd(a,b)=gcd(b,a mod b)来求解。下证gcd(a,b)=gcd(b,a mod b)的正确性： 设a,b的一个公约数为d 设a mod b=r，则a=kb+r(k为整数)，r=a-kb 因为d|a,d|b 所以d|a-kb,即d|r，而r=a mod b 所以d为b,a mod b的公约数 又因为d也为a,b的公约数，所以（a,b)和(b,a mod b)的公约数一样，所以最大公约数必然一样，得证。 代码描述： int gcd(int a,int b) { if (b==0) return a; return gcd(b,a%b); } 扩展欧几里得 顾名思义，为上述欧几里得算法的扩展。欧几里得是用来求a,b的最大公约数，那么扩展欧几里得不仅能求出a,b的最大公约数，还能求出满足ax+by=gcd(a,b)的一组可行解。 求解过程中，扩展欧几里得比欧几里得多了一个赋值过程，具体证明如下： 设ax1+by1=gcd(a,b),bx2+(a mod b)y2=gcd(b,a mod b) 因为由欧几里得算法可知，gcd(a,b)=gcd(b,a mod b) 所以ax1+by1=bx2+(a mod b)y2 因为a mod b=a-(a div b)*b（div为整除 所以有ax1+by1=bx2+(a-(a div b)*b)y2 将右边移项，展开得： ax1+by1=ay2+bx2-(a div b)*b*y2 =ay2+b[x2-(a div b)]y2 所以可得： x1=y2 y1=x2-(a div b)*y2 将得到的的x1,y1递归操作求解x2,y2，如此循环往复，将会像欧几里得一样得到b=0的情况，此时递归结束，返回x=1,y=0，回溯得解。 代码描述： 此函数返回的是a,b的最大公约数，同时也求解出满足ax+by=gcd(a,b)的一组可行的(x,y) int exgcd(int a,int b,int \u0026x,int \u0026y) { if (b==0) {x=1;y=0;return a;} int t=exgcd(b,a%b,x,y); int x0=x,y0=y; x=y0;y=x0-(a/b)*y0; return t; } 关于求解二元一次不定方程ax+by=c 首先，如果c不是gcd(a,b)的倍数，方程显然无解。 扩展欧几里得求解的是ax+by=gcd(a,b)=1的可行解，但是题目中并没有说c与a,b互质之类的条件，所以需要在开始时两边同时除以gcd(a,b)。 设d=gcd(a,b) 设a'=a/d,b'=b/d,c'=c/d, 则下面需要求解a’x+b’y=c’的整数解，而gcd(a',b')=1， 则我们只需求a’x+b’y=1的可行解 直接使用扩展欧几里得，得到(x',y'),则最终解为x'*c',y'*c'设为(x0,y0)。 现在得到了一组可行解，但是如何得到通解呢？ 将(x0,y0)代入ax+by=c，则有 a*(x0)+b*(y0)=c 通过拆添项，可有： a*(x0+1*b)+b*(y0-1*a)=c a*(x0+2*b)+b*(y0-2*a)=c a*(x0+3*b)+b*(y0-3*a)=c …… a*(x0+k*b)+b*(y0-k*a)=c (k∈Z) 至此，我们得到了通解的方程 x=x0+k*b y=y0-k*a (k∈Z) 这样，所有满足ax+by=c的可行解都可求出。 ","date":"2018-08-10","objectID":"/posts/euclid/:0:2","tags":["数学","数论","ACM","欧几里得","他山之石","C++","C"],"title":"The equation-SGU106(扩展欧几里得)","uri":"/posts/euclid/"},{"categories":["ACM"],"content":"具体实现 有了主体算法，下面要谈到具体实现了。 先处理一下无解的情况： 当a=0并且b=0，而c≠0时，显然无解； 当a=0,b=0，而c=0时，[x1,x2],[y1,y2]都为可行解，根据乘法原理，可行解的个数为(x2-x1+1)*(y2-y1+1); 当a=0 b≠0时： 此时即为求解by=c，则y=c/b， 如果c/b不是整数或c/b不在[y1,y2]的范围内，无解 否则[x1,x2]内全部整数都为可行解. 当b=0,a≠0时，同上。 若c不是gcd(a,b)的个数，方程显然无解。 处理完了一些繁琐的细节后，下面是具体的求解过程： 扩展欧几里得求解的是ax+by=c，而本题是ax+by+c=0，需将c移项。 对于本道题，首先要注意的是，对于负数的模运算在此算法中无法得到正确解，所以要处理一下a,b,c的正负情况。 如果a为负数，只需将a取相反数后，再处理一下x∈[x1,x2]的范围。当a取了相反数，相当于把x也取反，则需要把x的范围由[x1,x2]转变成[-x2,-x1],类似于把数轴反了过来。b同理。 利用扩展欧几里得解二元一次不定方程，得到一组可行解(x0,y0)。 因为题目中对x,y有条件约束，而有x=x0+kb,y=y0-kb，我们可以求出满足x∈[x1,x2],y∈[y1,y2]的k的取值范围, 即为求解x1\u003c=x0+kb\u003c=x2,y1\u003c=y0-kb\u003c=y2的整数k的个数 但是在求解这两个一次函数的过程中，会有除不尽的现象，该如何取整呢？ 举个例子 当出现2.5\u003c=k\u003c=5.5时，我们需要的可行的k为3,4,5，所以需要将2.5向上取整得到3，5.5向下取整得到5，即为3\u003c=k\u003c=5； 当出现-5.5\u003c=\u003c=-2.5时，我们需要的可行的k为-5,-4,-3,所以需要将-5.5向上取整得到-5,-2.5向下取整得到-3，即为-5\u003c=k\u003c=-3； 正负数的情况都已经考虑完全了，可以得到取整的结论：上界下取整，下界上取整。 最后，将得到的两个范围取交集，得到[l,r]，则最终答案为r-l+1。 这样，本题就可以完美解决了。 // BY Rinyo #include\u003ccstdio\u003e#include\u003ccmath\u003elong long a,b,c,x1,x2,yy1,y2,x0,yy0; inline long long cmin(const long long \u0026x,const long long \u0026y) {return x\u003cy?x:y;} inline long long cmax(const long long \u0026x,const long long \u0026y) {return x\u003ey?x:y;} long long gcd(long long a,long long b) { if (b==0) return a; return gcd(b,a % b); } void exgcd(long long a,long long b) { if (b==0){x0=1;yy0=0;return;} exgcd(b,a%b); long long t=x0;x0=yy0;yy0=t-a/b*yy0; return; } int main() { scanf(\"%I64d%I64d%I64d%I64d%I64d%I64d%I64d\",\u0026a,\u0026b,\u0026c,\u0026x1,\u0026x2,\u0026yy1,\u0026y2); c=-c; if (c\u003c0) {a=-a;b=-b;c=-c;} if (a\u003c0) {a=-a;long long t=x1;x1=-x2;x2=-t;} if (b\u003c0) {b=-b;long long t=yy1;yy1=-y2;y2=-t;} if (a==0 \u0026\u0026 b==0) { if (c==0) { printf(\"%I64d\",(x2-x1+1)*(y2-yy1+1)); return 0; } printf(\"0\");return 0; } else if (a==0) { if (c %b ==0) if (c/b\u003c=y2 \u0026\u0026 c/b\u003e=yy1) {printf(\"%I64d\",x2-x1+1);return 0;} printf(\"0\");return 0; } else if (b==0) { if (c%a==0) if (c/a\u003c=x2 \u0026\u0026 c/a\u003e=x1) {printf(\"%I64d\",y2-yy1+1);return 0;} printf(\"0\");return 0; } long long d=gcd(a,b); if (c%d!=0){printf(\"0\");return 0;} a=a/d;b=b/d;c=c/d; exgcd(a,b); x0=x0*c;yy0=yy0*c; double tx2=x2,tx1=x1,tx0=x0,ta=a,tb=b,tc=c,ty1=yy1,ty2=y2,ty0=yy0; long long down1=floor(((tx2-tx0)/tb)),down2=floor(((ty0-ty1)/ta)); long long r=cmin(down1,down2); long long up1=ceil(((tx1-tx0)/tb)),up2=ceil(((ty0-ty2)/ta)); long long l=cmax(up1,up2); if (r\u003cl) printf(\"0\"); else printf(\"%I64d\",r-l+1); return 0; } 扩展欧几里得模板 #include\u003ciostream\u003eusing namespace std; int exgcd(int a,int b,int \u0026x,int \u0026y) { if(b==0) { x=1; y=0; return a; } int gcd=exgcd(b,a%b,x,y); int x2=x,y2=y; x=y2; y=x2-(a/b)*y2; return gcd; } int main() { int x,y,a,b; cout\u003c\u003c\"请输入a和b:\"\u003c\u003cendl; cin\u003e\u003ea\u003e\u003eb; cout\u003c\u003c\"a和b的最大公约数:\"\u003c\u003cendl; cout\u003c\u003cexgcd(a,b,x,y)\u003c\u003cendl; cout\u003c\u003c\"ax+by=gcd(a,b) 的一组解是:\"\u003c\u003cendl; cout\u003c\u003cx\u003c\u003c\" \"\u003c\u003cy\u003c\u003cendl; return 0; } ","date":"2018-08-10","objectID":"/posts/euclid/:0:3","tags":["数学","数论","ACM","欧几里得","他山之石","C++","C"],"title":"The equation-SGU106(扩展欧几里得)","uri":"/posts/euclid/"},{"categories":["ACM"],"content":"A. The Rank 题目大意： 给出n个学生的成绩，Thomas Smith的成绩是第一行，然后要按总成绩进行排序，总分相同的按编号从小到大排； 开始看还以为要写sort的cmp函数进行多条件排序，敲完才发现其实只要按总分就可以了，因为托马斯的id是一，必然会排在前面。 #include\u003cbits/stdc++.h\u003eusing namespace std; int a[4],sum[1005]; int main(){ int n,s,f1; cin\u003e\u003en; for(int j=1;j\u003c=n;j++){ s=0; for(int i=0;i\u003c4;i++){ cin\u003e\u003ea[i]; s+=a[i]; } sum[j]=s; if(j==1) f1=s; } sort(sum+1,sum+n+1,greater\u003cint\u003e()); for(int i=1;i\u003c=n;i++) if(sum[i]==f1){ cout\u003c\u003ci\u003c\u003cendl; break; } return 0; } ","date":"2018-08-09","objectID":"/posts/cfcontest1017/:0:1","tags":["ACM","Codeforces","组合数学","C++"],"title":"Codeforces Round 502(Div.1 + Div.2)","uri":"/posts/cfcontest1017/"},{"categories":["ACM"],"content":"B. The Bits 题目大意： 先给出二进制数的长度，然后输入两个二进制数a,b，问交换a中的某些位数的数，使得a|b(按位或)的结果不同，求有多少种不同的或值。 a,b上下对应的情况：a/b 个数 1/0 m 0/0 n 1/1 x 0/1 y 用组合数学的思想来想： 只要看b为0的位就行了，如果0/0,a只能换1的位置，为了避免重复，所以这里总数为n*x, 再考虑1/0的情况，只能和0的位置换，这是后可以把0/0没算的都算上，所以总数m*(n+y) 所以最后总数为sum=n*x+m*(n+y) #include\u003cbits/stdc++.h\u003eusing namespace std; int main(){ long long n,m,x,y,t; n=m=x=y=0; char a[100005],b[100005]; cin\u003e\u003et; cin\u003e\u003ea\u003e\u003eb; for(int i=0;i\u003ct;i++){ int p=a[i]-'0'; int q=b[i]-'0'; if(p==0\u0026\u0026q==0) n++; if(p==1\u0026\u0026q==0) m++; if(p==1\u0026\u0026q==1) x++; if(p==0\u0026\u0026q==1) y++; } long long sum=n*x+m*(y+n); cout\u003c\u003csum\u003c\u003cendl; return 0; } ","date":"2018-08-09","objectID":"/posts/cfcontest1017/:0:2","tags":["ACM","Codeforces","组合数学","C++"],"title":"Codeforces Round 502(Div.1 + Div.2)","uri":"/posts/cfcontest1017/"},{"categories":["ACM"],"content":"欧拉函数是求小于x并且和x互质的数的个数 通式：φ(x)=x(1-1/p1)(1-1/p2)(1-1/p3)(1-1/p4)…..(1-1/pn) 其中p1, p2……pn为x的所有质因数，x是不为0的整数 φ(1)=1（唯一和1互质的数就是1本身）【注意：每种质因数只一个。比如12=223】 ","date":"2018-08-08","objectID":"/posts/euler/:0:1","tags":["数学","数论","euler","C"],"title":"欧拉函数","uri":"/posts/euler/"},{"categories":["ACM"],"content":"定理： 若n是素数p的k次幂，φ(n)=p^k-p^(k-1)=(p-1)p^(k-1)，因为除了p的倍数外，其他数都跟n互质 欧拉函数是积性函数——若m,n互质，φ(mn)=φ(m)φ(n) ","date":"2018-08-08","objectID":"/posts/euler/:0:2","tags":["数学","数论","euler","C"],"title":"欧拉函数","uri":"/posts/euler/"},{"categories":["ACM"],"content":"特殊性质： 当n为奇数时，φ(2n)=φ(n) p是素数，φ(p) = p - 1，φ(p)称为p的欧拉值 若a为素数,b mod a=0,φ(a*b)=φ(b)*a ","date":"2018-08-08","objectID":"/posts/euler/:0:3","tags":["数学","数论","euler","C"],"title":"欧拉函数","uri":"/posts/euler/"},{"categories":["ACM"],"content":"模板 //直接法 int Euler(int n){ int res = n,i; //由于任何一个合数都至少有一个不大于根号n的素因子，所以只要遍历到根号n即可 for(i=2;i * i \u003c= n;i++) if(n%i == 0){ //第一次找到的必为素因子 n /=i ; res = res - res/i; //x(1-1/p1) while(n % i ==0) n/=i; //将该素因子的倍数也全部筛掉 } if (n \u003e 1) res = res - res/n; return res; } 以上转载注明 //素数筛选法，先素数筛选，再求欧拉 /* 特性 : 1.若a为质数,phi[a]=a-1; 2.若a为质数,b mod a=0,phi[a*b]=phi[b]*a 3.若a,b互质,phi[a*b]=phi[a]*phi[b](当a为质数时,if b mod a!=0 ,phi[a*b]=phi[a]*phi[b]) */ int m[n],phi[n],p[n],nump; //m[i]标记i是否为素数,0为素数,1不为素数;p是存放素数的数组;nump是当前素数个数;phi[i]为欧拉函数 int make() { phi[1]=1; for (int i=2;i\u003c=n;i++) { if (!m[i])//i为素数，m[]初始化为0 { p[++nump]=i;//将i加入素数数组p中 phi[i]=i-1;//因为i是素数,由特性得知 } for (int j=1;j\u003c=nump\u0026\u0026p[j]*i\u003cn;j++) //用当前已的到的素数数组p筛,筛去p[j]*i { m[p[j]*i]=1;//可以确定i*p[j]不是素数 if (i%p[j]==0) //看p[j]是否是i的约数,因为素数p[j],等于判断i和p[j]是否互质 { phi[p[j]*i]=phi[i]*p[j]; //特性2 break; } else phi[p[j]*i]=phi[i]*(p[j]-1); //互质,特性3,p[j]-1就是phi[p[j]] } } } 附素数打表 int p[N]={1,1,0}; void prime(){ for(int i=2;i\u003cN;i++) if(!p[i]){ for(int j=2*i;j\u003c=N;j+=i)//筛掉i的倍数 p[j]=1; } } ","date":"2018-08-08","objectID":"/posts/euler/:0:4","tags":["数学","数论","euler","C"],"title":"欧拉函数","uri":"/posts/euler/"},{"categories":["ACM"],"content":"例题 Bi-shoe and Phi-shoe LightOJ - 1370 题意： 给一些数Ai（第 i 个数），Ai这些数代表的是某个数欧拉函数的值，我们要求出数 Ni 的欧拉函数值不小于Ai。而我们要求的就是这些 Ni 这些数字的和sum，而且我们想要sum最小，求出sum最小多少。 解题思路： 要求和最小，我们可以让每个数都尽量小，那么我们最后得到的肯定就是一个最小值。 给定一个数的欧拉函数值ψ(N)，我们怎么样才能求得最小的N? 我们知道，一个素数P的欧拉函数值ψ(P)=P-1。所以如果我们知道ψ(N)，那么最小的N就是最接近ψ(N)，并且大于ψ(N) 的素数。我们把所有素数打表之后再判断就可以了。 这个lightoj有毒，什么头文件都不支持，卡了我好久。。。 #include\u003cstdio.h\u003e#define N 1000005 #define ll long long int m[N]={1,1,0}; int p[100000],cnt=0; int max(int x,int y){ return x\u003ey?x:y; } void prime(){ for(int i=2;i\u003cN;i++) if(!m[i]){ for(int j=2*i;j\u003c=N;j+=i) m[j]=1; p[cnt++]=i; } } int binary_search(int x){//二分查找 int l=0,r=cnt; while(l\u003c=r){ int mid=(l+r)/2; if(p[mid]\u003ex) r=mid-1; else l=mid+1; } for(int i=max(r,0);;i++) if(p[i]\u003ex) return p[i]; } int main(){ prime(); int T,n,cas=1,temp; scanf(\"%d\",\u0026T); while(T--){ scanf(\"%d\",\u0026n); ll sum=0; for(int i=0;i\u003cn;i++){ scanf(\"%d\",\u0026temp); sum+=binary_search(temp); } printf(\"Case %d: %lld Xukha\\n\",cas++,sum); } return 0; } ","date":"2018-08-08","objectID":"/posts/euler/:0:5","tags":["数学","数论","euler","C"],"title":"欧拉函数","uri":"/posts/euler/"},{"categories":["JavaScript"],"content":"看到知乎，百度的页面F12检查后都会有一些有趣的招聘信息。于是乎我也想给我的博客加一个。 我主要用到的工具： console.log() Notepad++ 在线图片转文字工具 ","date":"2018-08-04","objectID":"/posts/console-log/:0:0","tags":["hexo","Frontend","JavaScript"],"title":"hexo 博客自定义 console log","uri":"/posts/console-log/"},{"categories":["JavaScript"],"content":"用法 用js在\u003cbody\u003e\u003c/body\u003e使用console.log()就行了，hexo的主题文件在_layout.swig里，所以我们打开该文件，在该位置，添加js就行了； ","date":"2018-08-04","objectID":"/posts/console-log/:1:0","tags":["hexo","Frontend","JavaScript"],"title":"hexo 博客自定义 console log","uri":"/posts/console-log/"},{"categories":["JavaScript"],"content":"图案 我用的我自己的一张照片(电脑上照片就那么几张。。。)，然后用 在线图片转文字工具 转字符， 选择文件，设置大小，然后生成，生成后，复制TXT文件（下面那个框，上面的是HTML代码） 粘贴到 Notepad++ 里面，然后按图操作； Ctrl+H 替换 最后就变成一个字符串了。 ","date":"2018-08-04","objectID":"/posts/console-log/:2:0","tags":["hexo","Frontend","JavaScript"],"title":"hexo 博客自定义 console log","uri":"/posts/console-log/"},{"categories":["JavaScript"],"content":"效果图 线上demo,按 F12 找到 console ","date":"2018-08-04","objectID":"/posts/console-log/:3:0","tags":["hexo","Frontend","JavaScript"],"title":"hexo 博客自定义 console log","uri":"/posts/console-log/"},{"categories":["JavaScript"],"content":"我的txt \\n` @@#``@@@@@@@@@@@@@@@@@@##,` \\n` @@#`;@@@@@@@@@@@@@@@@@@@':' \\n` @@#`@@@@@@@@@@@@@@@@@@@#+#;` \\n` @@#`@@@@@@@@@@@@@@@@@@###@'. \\n` @@+.@@@@@@@@@@@@@@@@@@@@@##, \\n` @@#,@@@@@@@@@@@@@@@@@@@@@@#, \\n` #@#:@@@@@@@@@@@@@@@@@@@@@@@, \\n` #@#'@@@@@@@@@@@@@@@@@@@@@@@. \\n` +@#;@@@@@@@@@@@@@@@@@@@@@@# \\n` `;: ;@#'@@@@@@@@@@@@@@@@@@+'+@' \\n` `,,;';'+';'@@+:@@@@@@@@@@@@##@#',.:#; \\n,, `` ``..,:;@@#'@@@@@@@@#####@@@@#:`:. \\n` `````:++@@@@@@@@@@@@@###@@@@#+,.. \\n ``````.#@@@@@@@@@@@@@@#@@@#++#'`` \\n` ```.,,:,.`:@@@@@@@@@@@@@###@@@##'.` \\n``..`````..,::;+@@@@@@@@@@@@#+`::+##'`. \\n` ````.```,@@@@@@@@@@@##;``.,';` ` \\n``.;@@@@@@@@@@@@@@@@@@@@@@###;``..`````` \\n#@@@@@@@@@@@@@@@@@@@@@@@@##@#;``,``,.`` \\n@@@@@@@@@@@@@@@@@@@.`````..``.. +` `:` \\n@+''++#####@@#`.@@@``````` ` `,``` `` \\n';;;;'+##+'+.`;+@@@,..```` `` :,. \\n;::,,:;+#++``,,#@@@'..``````` ,`.`` \\n;,,,,...'#.,,..#@@@#,,.`````` .```` \\n:,,,,....`,::;''+#@#;,..`````````.`` \\n:,,,.....'##++''';:+':,.`..,,...` \\n:,,,...#####+'+#@@@'.';+:. ` `` \\n;,,.`'####'#,`.`+@@@+'``` `.` \\n;,.`#@@@#+:'+++##+@##@,,,,` \\n',.#@@###'''';:,.```,+#. \\n+,#@@@####;,,..``````````````` `.:,::\\n+@@@@###+;,,..`````````````````` `.,\\n#@@@##+',,,........`````````````` \\n@@@@#+:,,,,`........`````````` \\n@@@#+:,,,,.`````.....`````````` `` \\n@@##':,......`````....``` ````` ```\\n@@@#':,....,..``````..```` ``` ```\\n@@@#',....,,,..``````````` ``` ..\\n@@@#,.....,,,,.`` ```````` `````` \\n@@@+....,,,,,..````````````` `````````` \\n@@@:....,,,,.LiRuihao```````` ```````````` \\n#@@,....,,,,.Always Be Yourself !````````````\\n,##,,...,::,.````````````..`````` `......``\\n,'#,,..,,:::.`````````........`````` `.,,..\\n\\n你好！\\n欢迎进入什么都不会的李瑞豪的个人网站！\\nhttps://lruihao.cn\\nhttps://www.lruihao.cn\\nhttps://lruihao.github.io\\nhttps://liruihao.coding.me\\n\\n\\n\\n 其他个人网站，个人博客也是可以的。 ","date":"2018-08-04","objectID":"/posts/console-log/:4:0","tags":["hexo","Frontend","JavaScript"],"title":"hexo 博客自定义 console log","uri":"/posts/console-log/"},{"categories":["ACM"],"content":"Dijkstra算法 ","date":"2018-08-03","objectID":"/posts/zuiduanlu/:0:0","tags":["最短路","ACM"],"title":"最短路入门","uri":"/posts/zuiduanlu/"},{"categories":["ACM"],"content":"1.定义概览 Dijkstra(迪杰斯特拉)算法是典型的单源最短路径算法，用于计算一个节点到其他所有节点的最短路径。主要特点是以起始点为中心向外层层扩展，直到扩展到终点为止。Dijkstra算法是很有代表性的最短路径算法，在很多专业课程中都作为基本内容有详细的介绍，如数据结构，图论，运筹学等等。注意该算法要求图中不存在负权边。 问题描述：在无向图 G=(V,E) 中，假设每条边 E[i] 的长度为 w[i]，找到由顶点 V0 到其余各点的最短路径。（单源最短路径） ","date":"2018-08-03","objectID":"/posts/zuiduanlu/:1:0","tags":["最短路","ACM"],"title":"最短路入门","uri":"/posts/zuiduanlu/"},{"categories":["ACM"],"content":"2.算法描述 ","date":"2018-08-03","objectID":"/posts/zuiduanlu/:2:0","tags":["最短路","ACM"],"title":"最短路入门","uri":"/posts/zuiduanlu/"},{"categories":["ACM"],"content":"1)算法思想： 设G=(V,E)是一个带权有向图，把图中顶点集合V分成两组，第一组为已求出最短路径的顶点集合（用S表示，初始时S中只有一个源点，以后每求得一条最短路径 , 就将加入到集合S中，直到全部顶点都加入到S中，算法就结束了），第二组为其余未确定最短路径的顶点集合（用U表示），按最短路径长度的递增次序依次把第二组的顶点加入S中。在加入的过程中，总保持从源点v到S中各顶点的最短路径长度不大于从源点v到U中任何顶点的最短路径长度。此外，每个顶点对应一个距离，S中的顶点的距离就是从v到此顶点的最短路径长度，U中的顶点的距离，是从v到此顶点只包括S中的顶点为中间顶点的当前最短路径长度。 ","date":"2018-08-03","objectID":"/posts/zuiduanlu/:2:1","tags":["最短路","ACM"],"title":"最短路入门","uri":"/posts/zuiduanlu/"},{"categories":["ACM"],"content":"2)算法步骤： a.初始时，S只包含源点，即S＝{v}，v的距离为0。U包含除v外的其他顶点，即:U={其余顶点}，若v与U中顶点u有边，则\u003cu,v\u003e正常有权值，若u不是v的出边邻接点，则\u003cu,v\u003e权值为∞。 b.从U中选取一个距离v最小的顶点k，把k，加入S中（该选定的距离就是v到k的最短路径长度）。 c.以k为新考虑的中间点，修改U中各顶点的距离；若从源点v到顶点u的距离（经过顶点k）比原来距离（不经过顶点k）短，则修改顶点u的距离值，修改后的距离值的顶点k的距离加上边上的权。 d.重复步骤b和c直到所有顶点都包含在S中。 执行动画过程如下图 spfa算法 spfa是一种求单源最短路的算法 算法中需要用到的主要变量 int n; //表示n个点，从1到n标号 int s,t; //s为源点，t为终点 int d[N]; //d[i]表示源点s到点i的最短路 int p[N]; //记录路径（或者说记录前驱） queue q; //一个队列，用STL实现，当然可有手打队列，无所谓 bool vis[N]; //vis[i]=1表示点i在队列中 vis[i]=0表示不在队列中 几乎所有的最短路算法其步骤都可以分为两步 1.初始化 2.松弛操作 ","date":"2018-08-03","objectID":"/posts/zuiduanlu/:2:2","tags":["最短路","ACM"],"title":"最短路入门","uri":"/posts/zuiduanlu/"},{"categories":["ACM"],"content":"初始化： d数组全部赋值为INF（无穷大）；p数组全部赋值为s（即源点），或者赋值为-1，表示还没有知道前驱,然后d[s]=0; 表示源点不用求最短路径，或者说最短路就是0。将源点入队； （另外记住在整个算法中有顶点入队了要记得标记vis数组，有顶点出队了记得消除那个标记） ","date":"2018-08-03","objectID":"/posts/zuiduanlu/:3:0","tags":["最短路","ACM"],"title":"最短路入门","uri":"/posts/zuiduanlu/"},{"categories":["ACM"],"content":"队列+松弛操作 读取队头顶点u，并将队头顶点u出队（记得消除标记）；将与点u相连的所有点v进行松弛操作，如果能更新估计值（即令d[v]变小），那么就更新，另外，如果点v没有在队列中，那么要将点v入队（记得标记），如果已经在队列中了，那么就不用入队 以此循环，直到队空为止就完成了单源最短路的求解 SPFA可以处理负权边 定理: 只要最短路径存在，上述SPFA算法必定能求出最小值。 证明： 每次将点放入队尾，都是经过松弛操作达到的。换言之，每次的优化将会有某个点v的最短路径估计值d[v]变小。所以算法的执行会使d越来越小。由于我们假定图中不存在负权回路，所以每个结点都有最短路径值。因此，算法不会无限执行下去，随着d值的逐渐变小，直到到达最短路径值时，算法结束，这时的最短路径估计值就是对应结点的最短路径值。（证毕） 期望的时间复杂度O(ke)， 其中k为所有顶点进队的平均次数，可以证明k一般小于等于2。 判断有无负环： 如果某个点进入队列的次数超过N次则存在负环（SPFA无法处理带负环的图） 代码 ","date":"2018-08-03","objectID":"/posts/zuiduanlu/:4:0","tags":["最短路","ACM"],"title":"最短路入门","uri":"/posts/zuiduanlu/"},{"categories":["ACM"],"content":"题目链接 思路参考1,思路参考2（没看懂） 先占坑，有时间再理理思路。 同一棵树中 d=1,即x和y是同类，则需满足r[x]==r[y] d=2,x应该吃了y,也就是(r[x]+1)%3 == r[y] 不同树合并且更新关系(x树做主根) ' 如果 x和y为关系r1, y和z为关系r2， 那么x和z的关系就是（r1+r2）%3 如果 d==1则x和y是同类 ，那么 y对x的关系是0,如果d==2 ,则x吃了y, 那么y对x的关系是1, x对y的关系是2。综上所述 ,无论d为1或者是为2, y对x的关系都是 d-1。 fy对y 的关系为 3-r[y] （有点互补的感觉，注意这里是不同类喔） y对x的关系为 d-1, x 对fx 的关系为 r[x] 所以fy对fx 的关系是（3-r[y] + d-1 + r[x]）%3。可以借助向量图理解 fy-\u003ey-\u003ex-\u003efx #include\u003ccstdio\u003e const int maxn = 50000+10; int p[maxn]; //存父节点 int r[maxn];//存与父节点的关系 0 同一类，1被父节点吃，2吃父节点 void set(int n) //初始化 { for(int x = 1; x \u003c= n; x++) { p[x] = x; //开始自己是自己的父亲节点 r[x] = 0;//开始自己就是自己的父亲，每一个点均独立 } } int find(int x) //找父亲节点 { if(x == p[x]) return x; int t = p[x]; p[x] = find(p[x]); r[x] = (r[x]+r[t])%3; //回溯由子节点与父节点的关系和父节点与根节点的关系找子节点与根节点的关系 return p[x]; } void Union(int x, int y, int d) { int fx = find(x); int fy = find(y); p[fy] = fx; //合并树 注意：被 x 吃，所以以 x 的根为父 r[fy] = (r[x]-r[y]+3+(d-1))%3; //对应更新与父节点的关系 } int main() { int n, m; scanf(\"%d%d\", \u0026n, \u0026m); set(n); int ans = 0; int d, x, y; while(m--) { scanf(\"%d%d%d\", \u0026d, \u0026x, \u0026y); if(x \u003e n || y \u003e n || (d == 2 \u0026\u0026 x == y)) ans++; //如果节点编号大于最大编号，或者自己吃自己，说谎 else if(find(x) == find(y)) //如果原来有关系，也就是在同一棵树中，那么直接判断是否说谎 { if(d == 1 \u0026\u0026 r[x] != r[y]) ans++; //如果 x 和 y 不属于同一类 if(d == 2 \u0026\u0026 (r[x]+1)%3 != r[y]) ans++; // 如果 x 没有吃 y (注意要对应Uinon(x, y)的情况，否则一路WA到死啊！！！) } else Union(x, y, d); //如果开始没有关系，则建立关系 } printf(\"%d\\n\", ans); return 0; } ","date":"2018-08-02","objectID":"/posts/poj1182/:0:0","tags":["ACM","并查集","POJ","C++","C"],"title":"食物链-poj1182（带权并查集经典模板）","uri":"/posts/poj1182/"},{"categories":["ACM"],"content":"题目链接：小希的迷宫 ","date":"2018-08-01","objectID":"/posts/hdu1272/:1:0","tags":["ACM","并查集","HDU","C++","C"],"title":"小希的迷宫-HDU-1272(并查集or树性质)","uri":"/posts/hdu1272/"},{"categories":["ACM"],"content":"并查集： 无回路 单连通 并查集做，首先想到的是判断两个点是否连通，不连通就合并，已连通的话说明会形成回路，则可以判定No，交了一发错了。 想了一下没有考虑到多个连通域的情况，该题必须只有一个连通域 ","date":"2018-08-01","objectID":"/posts/hdu1272/:2:0","tags":["ACM","并查集","HDU","C++","C"],"title":"小希的迷宫-HDU-1272(并查集or树性质)","uri":"/posts/hdu1272/"},{"categories":["ACM"],"content":"树的性质： 既然单连通无回路，则这肯定是一棵树；那么edge=v-1; 最后注意空树的情况，至于自环我这里No也过了，没有去验证自环Yes的情况了 //并查集 #include\u003cbits/stdc++.h\u003eusing namespace std; int pre[100001]; int find(int root){ int son,t; son=root; while(root!=pre[root]) root=pre[root]; while(son!=root){ t=pre[son]; pre[son]=root; son=t; } return root; } void join(int a,int b){ int x=find(a),y=find(b); if(x!=y) pre[y]=x; } int main(){ int a,b,flag,i,sum; while(1) { flag = 0; while(~scanf(\"%d%d\",\u0026a,\u0026b) \u0026\u0026 a!=0 \u0026\u0026 b!=0){ if(a==-1 \u0026\u0026 b==-1) return 0; if(pre[a]==0)pre[a]=a; if(pre[b]==0)pre[b]=b; if(find(a)==find(b))flag = 1; else if(flag!=1) join(a,b); } for(sum = 0,i=1;i\u003c100001;i++){ if(pre[i]==i)sum++; pre[i] = 0; } if(sum\u003e1 || flag == 1) printf(\"No\\n\"); else printf(\"Yes\\n\"); } } //1 2 3 4 0 0 No 没有连通 //0 0 Yes //1 1 0 0 No(该代码) //树性质 #include \u003cstdio.h\u003ebool s[100001]; int main() { int a,b,i,len,num,v; for(i=0;i\u003c100001;++i) s[i]=false; len=0,num=0,v=0; while(1) { scanf(\"%d%d\",\u0026a,\u0026b); if(a==-1\u0026\u0026b==-1) break; if(a==0\u0026\u0026b==0) { if(v==0) { printf(\"Yes\\n\"); continue; } if(num==len-1) //划重点！！ printf(\"Yes\\n\"); else printf(\"No\\n\"); num=len=v=0; for(i=0;i\u003c100001;++i) s[i]=false; continue; } v=1; if(s[a]==false) len++;//点数 if(s[b]==false) len++; s[a]=s[b]=true; num++;//边数 } return 0; ","date":"2018-08-01","objectID":"/posts/hdu1272/:3:0","tags":["ACM","并查集","HDU","C++","C"],"title":"小希的迷宫-HDU-1272(并查集or树性质)","uri":"/posts/hdu1272/"},{"categories":["ACM"],"content":"题目链接：Bear and Finding Criminals 大致题意就是小熊警察住在某个城市，他要抓各个城市的罪犯，现在用一个BCD可以知道那个城市里一定有罪犯。 一定能确定该城市有小偷的几种情况： 1.警察所住城市有罪犯，则一定能检测到 2.警察所住城市的左边和右边位置若都不为0，则说明两座城市都有罪犯（只有一边为1是不能确定到底哪个城市有罪犯的） 3.警察所在城市的一边检测到有罪犯，但在另一边已经没有城市了，则说明该城市一定有罪犯 #include\u003cbits/stdc++.h\u003eusing namespace std; int t[107]; int main() { int n, a; while(cin\u003e\u003en\u003e\u003ea){ int sum = 0; for(int i =1; i \u003c= n; i++) cin \u003e\u003e t[i]; if(t[a]) sum++;//小熊所在城市有罪犯 for(int i = 1; i \u003c= n; i++){ if(a-i \u003e 0\u0026\u0026a+i \u003c= n) { if(t[a-i] == 1\u0026\u0026t[a+i] == 1) sum+=2; } else if(a-i \u003c= 0\u0026\u0026a+i \u003c= n){//警察在第一个点 if(t[a+i]) sum++; } else if(a-i \u003e 0\u0026\u0026a+i \u003e n){ if(t[a-i]) sum++; } } cout \u003c\u003csum\u003c\u003cendl; } return 0; } ","date":"2018-07-31","objectID":"/posts/codeforces680b/:0:0","tags":["Codeforces","ACM","C++"],"title":"Bear and Finding Criminals-Codeforces680B","uri":"/posts/codeforces680b/"},{"categories":["ACM"],"content":"题目链接：Bear and Five Cards 大致题意就是小熊有5张卡片，每张卡片有对应的分数，他可以选择丢弃2张相同的或者3张相同的卡片，没有相同的就无法丢弃，问小熊剩下的分数最少是多少。 没有想得那么复杂，由于分数最大才100，所以直接暴力就好了。。。 #include\u003cbits/stdc++.h\u003eusing namespace std; int main(){ int a[5],b[107],i,j,sum=0,sum1=0; for(i=0;i\u003c5;i++){ cin\u003e\u003ea[i]; sum+=a[i]; } sort(a,a+5); memset(b,0,sizeof(b)); for(i=0;i\u003c5;i++) b[a[i]]++; for(i=0;i\u003c107;i++){ if(b[i]==2) sum1=max(2*i,sum1); if(b[i]\u003e=3) {sum1=max(3*i,sum1);/*cout\u003c\u003c3*i\u003c\u003c\" \"\u003c\u003csum1\u003c\u003cendl;*/} } cout\u003c\u003csum-sum1\u003c\u003cendl; return 0; } ","date":"2018-07-31","objectID":"/posts/codeforces680a/:0:0","tags":["Codeforces","ACM","C++"],"title":"Bear and Five Cards-Codeforces680A","uri":"/posts/codeforces680a/"},{"categories":["ACM"],"content":"并查集入门推荐：超有爱的并查集~ 题目链接：畅通工程 题意分析： 首先在地图上给你若干个城镇，这些城镇都可以看作点，然后告诉你哪些对城镇之间是有道路直接相连的。最后要解决的是整幅图的连通性问题。比如随意给你两个点，让你判断它们是否连通，或者问你整幅图一共有几个连通分支，也就是被分成了几个互相独立的块。像畅通工程这题，问还需要修几条路，实质就是求有几个连通分支。 #include\u003ciostream\u003e#include\u003ccstdio\u003eusing namespace std; int pre[1010]; int findd(int root){ int son,t; son=root; while(root!=pre[root]) root=pre[root]; while(son!=root){ t=pre[son]; pre[son]=root; son=t; } return root; } int main(){ int n,m,i,sum,r1,r2,star,end1; while(scanf(\"%d\",\u0026n)\u0026\u0026n){ sum=n-1; for(i=1;i\u003c=n;i++) pre[i]=i; scanf(\"%d\",\u0026m); while(m--){ scanf(\"%d%d\",\u0026star,\u0026end1); r1=findd(star); r2=findd(end1); if(r1!=r2){ pre[r1]=r2; sum--; } } printf(\"%d\\n\",sum); } return 0; } 基础回顾： find()函数找根结点的两种写法如下： 第一种递归： int find(int x) { return x == pre[x] ? x : find(pre[x]); } 第二种： int find(int x) { int root, temp; root = x; while(root != pre[root]) root = pre[root]; while(x != root) { temp = pre[x]; pre[temp] = root; x = temp; } return root; } 合并函数 void join(int x,int y){ int fx=find(x); int fy=find(y); if(fx!=fy) pre[fx]=fy; } ","date":"2018-07-31","objectID":"/posts/%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/:0:0","tags":["ACM","并查集","HDU","C++","C"],"title":"畅通工程-HDU-1232(并查集经典模板)","uri":"/posts/%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/"},{"categories":["ACM"],"content":"两题水过，暴力，找规律。。 ","date":"2018-07-27","objectID":"/posts/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B23/:0:0","tags":["Nowcoder","ACM","C++","C"],"title":"牛客练习赛23","uri":"/posts/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B23/"},{"categories":["ACM"],"content":"托米的赌球 ","date":"2018-07-27","objectID":"/posts/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B23/:1:0","tags":["Nowcoder","ACM","C++","C"],"title":"牛客练习赛23","uri":"/posts/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B23/"},{"categories":["ACM"],"content":"托米的划分 ","date":"2018-07-27","objectID":"/posts/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B23/:2:0","tags":["Nowcoder","ACM","C++","C"],"title":"牛客练习赛23","uri":"/posts/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B23/"},{"categories":["ACM"],"content":"a #include\u003cbits/stdc++.h\u003eusing namespace std; int main(){ int c[13],d[13]={100,50,20,10,5,2,1,50,20,10,5,2,1}; int i,t; cin\u003e\u003et; int a,b; while(t--){ memset(c,0,sizeof(c)); cin\u003e\u003ea\u003e\u003eb; for(i=0;i\u003c7;i++){ int x=0; if(a\u003ec[i]){ x=a/d[i]; c[i]+=x; a-=x*d[i]; } } for(i=7;i\u003c13;i++){ int x=0; if(b\u003ec[i]){ x=b/d[i]; c[i]+=x; b-=x*d[i]; } } cout\u003c\u003cc[0]; for(i=1;i\u003c13;i++) cout\u003c\u003c\" \"\u003c\u003cc[i]; cout\u003c\u003cendl; } return 0; } ","date":"2018-07-27","objectID":"/posts/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B23/:3:0","tags":["Nowcoder","ACM","C++","C"],"title":"牛客练习赛23","uri":"/posts/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B23/"},{"categories":["ACM"],"content":"b f(n)=f(n-1)+n-1; #include\u003cbits/stdc++.h\u003eusing namespace std; long long sum; int main(){ int n; int t; cin\u003e\u003et; while(t--){ sum=1; cin\u003e\u003en; if(n==1) sum=0; for(int i=3;i\u003c=n;i++) sum+=i-1; cout\u003c\u003csum\u003c\u003cendl; } return 0; } ","date":"2018-07-27","objectID":"/posts/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B23/:4:0","tags":["Nowcoder","ACM","C++","C"],"title":"牛客练习赛23","uri":"/posts/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B23/"},{"categories":["others"],"content":"在线算法 在线算法是指它可以以序列化的方式一个个的处理输入，也就是说在开始时并不需要已经知道所有的输入。 在计算机科学中，一个在线算法是指它可以以序列化的方式一个个的处理输入，也就是说在开始时并不需要已经知道所有的输入。相对的，对于一个离线算法，在开始时就需要知道问题的所有输入数据，而且在解决一个问题后就要立即输出结果。例如，选择排序在排序前就需要知道所有待排序元素，然而插入排序就不必。 因为在线算法并不知道整个的输入，所以它被迫做出的选择最后可能会被证明不是最优的，对在线算法的研究主要集中在当前环境下怎么做出选择。对相同问题的在线算法和离线算法的对比分析形成了以上观点。如果想从其他角度了解在线算法可以看一下流算法（关注精确呈现过去的输入所使用的内存的量），动态算法（关注维护一个在线输入的结果所需要的时间复杂度）和在线机器学习。 一个很好的展示在线算法概念的例子是 加拿大旅行者问题，这个问题的目标是在一个有权图中以最小的代价到达一个目标节点，但这个有权图中有些边是不可靠的可能已经被剔除。然而一个旅行者只有到某个边的一个端点时才能确定该边是否已经被移除了。最坏情况下，该问题会变得简单了，即所有的不确定的边都被移除该问题将会变成通常的最短路径问题。 ","date":"2018-07-26","objectID":"/posts/%E5%9C%A8%E7%BA%BF%E7%A6%BB%E7%BA%BF%E7%AE%97%E6%B3%95/:1:0","tags":["在线离线算法"],"title":"在线离线算法","uri":"/posts/%E5%9C%A8%E7%BA%BF%E7%A6%BB%E7%BA%BF%E7%AE%97%E6%B3%95/"},{"categories":["others"],"content":"离线算法 离线算法( off line algorithms)，是指基于在执行算法前输入数据已知的基本假设，也就是说，对于一个离线算法，在开始时就需要知道问题的所有输入数据，而且在解决一个问题后就要立即输出结果。 设计策略 在执行算法前输入已知的基本假设 前提 具有问题完全信息 算法设计策略都是基于在执行算法前输入数据已知的基本假设，也就是说，对于一个离线算法，在开始时就需要知道问题的所有输入数据，而且在解决一个问题后就要立即输出结果，通常将这类具有问题完全信息前提下设计出的算法称为离线算法( off line algorithms) ","date":"2018-07-26","objectID":"/posts/%E5%9C%A8%E7%BA%BF%E7%A6%BB%E7%BA%BF%E7%AE%97%E6%B3%95/:2:0","tags":["在线离线算法"],"title":"在线离线算法","uri":"/posts/%E5%9C%A8%E7%BA%BF%E7%A6%BB%E7%BA%BF%E7%AE%97%E6%B3%95/"},{"categories":["ACM"],"content":"非常可乐 大家一定觉的运动以后喝可乐是一件很惬意的事情，但是seeyou却不这么认为。因为每次当seeyou买了可乐以后，阿牛就要求和seeyou一起分享这一瓶可乐，而且一定要喝的和seeyou一样多。但seeyou的手中只有两个杯子，它们的容量分别是N 毫升和M 毫升 可乐的体积为S （S\u003c101）毫升　(正好装满一瓶) ，它们三个之间可以相互倒可乐 (都是没有刻度的，且 S==N+M，101＞S＞0，N＞0，M＞0) 。聪明的ACMER你们说他们能平分吗？如果能请输出倒可乐的最少的次数，如果不能输出\"NO\"。 ","date":"2018-07-24","objectID":"/posts/hdu-1495-%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90-bfs%E6%A8%A1%E6%8B%9F%E5%80%92%E6%B0%B4-or-%E6%95%B0%E8%AE%BA/:0:0","tags":["ACM","HDU","搜索","C++"],"title":"HDU-1495-非常可乐（bfs模拟倒水or数论）","uri":"/posts/hdu-1495-%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90-bfs%E6%A8%A1%E6%8B%9F%E5%80%92%E6%B0%B4-or-%E6%95%B0%E8%AE%BA/"},{"categories":["ACM"],"content":"Input 三个整数 : S 可乐的体积 , N 和 M是两个杯子的容量，以\"0 0 0\"结束。 ","date":"2018-07-24","objectID":"/posts/hdu-1495-%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90-bfs%E6%A8%A1%E6%8B%9F%E5%80%92%E6%B0%B4-or-%E6%95%B0%E8%AE%BA/:0:1","tags":["ACM","HDU","搜索","C++"],"title":"HDU-1495-非常可乐（bfs模拟倒水or数论）","uri":"/posts/hdu-1495-%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90-bfs%E6%A8%A1%E6%8B%9F%E5%80%92%E6%B0%B4-or-%E6%95%B0%E8%AE%BA/"},{"categories":["ACM"],"content":"Output 如果能平分的话请输出最少要倒的次数，否则输出\"NO\"。 ","date":"2018-07-24","objectID":"/posts/hdu-1495-%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90-bfs%E6%A8%A1%E6%8B%9F%E5%80%92%E6%B0%B4-or-%E6%95%B0%E8%AE%BA/:0:2","tags":["ACM","HDU","搜索","C++"],"title":"HDU-1495-非常可乐（bfs模拟倒水or数论）","uri":"/posts/hdu-1495-%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90-bfs%E6%A8%A1%E6%8B%9F%E5%80%92%E6%B0%B4-or-%E6%95%B0%E8%AE%BA/"},{"categories":["ACM"],"content":"Sample Input 7 4 3 4 1 3 0 0 0 ","date":"2018-07-24","objectID":"/posts/hdu-1495-%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90-bfs%E6%A8%A1%E6%8B%9F%E5%80%92%E6%B0%B4-or-%E6%95%B0%E8%AE%BA/:0:3","tags":["ACM","HDU","搜索","C++"],"title":"HDU-1495-非常可乐（bfs模拟倒水or数论）","uri":"/posts/hdu-1495-%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90-bfs%E6%A8%A1%E6%8B%9F%E5%80%92%E6%B0%B4-or-%E6%95%B0%E8%AE%BA/"},{"categories":["ACM"],"content":"Sample Output NO 3 模拟一下倒水的过程，一共有三种倒法，a向bc，b向ac，c向ab。(相当于一共六个方向)搜索并记录搜索过的过程就好了。 #include\u003cbits/stdc++.h\u003eusing namespace std; int a,b,c; int used[111][111][111]; struct node { int x,y,z; int step; }m,n; int bfs() { queue\u003cnode\u003eq; m.x = a; m.y = 0; m.z = 0; m.step = 0; used[a][0][0] = 1; q.push(m); while (!q.empty()) { int trans; //倒水量 m = q.front(); q.pop(); //成功分好的三种情况 if ((m.x == 0 \u0026\u0026 m.y == m.z) || (m.y == 0 \u0026\u0026 m.x == m.z) || (m.z == 0 \u0026\u0026 m.x == m.y)) return m.step; //下面开始6个搜索（由一个杯子向另外两个倒水） if (m.x) { //第一 trans = min(m.x , b - m.y);//自己模拟一下倒水过程就知道了 n.x = m.x - trans; n.y = m.y + trans; n.z = m.z; n.step = m.step + 1; if (!used[n.x][n.y][n.z]) { q.push(n); used[n.x][n.y][n.z] = 1; } //第二 trans = min(m.x , c - m.z); n.x = m.x - trans; n.y = m.y; n.z = m.z + trans; n.step = m.step + 1; if (!used[n.x][n.y][n.z]) { q.push(n); used[n.x][n.y][n.z] = 1; } } if (m.y) { //第三 trans = min(m.y , a - m.x); n.x = m.x + trans; n.y = m.y - trans; n.z = m.z; n.step = m.step + 1; if (!used[n.x][n.y][n.z]) { used[n.x][n.y][n.z] = 1; q.push(n); } //第四 trans = min(m.y , c - m.z); n.x = m.x; n.y = m.y - trans; n.z = m.z + trans; n.step = m.step + 1; if (!used[n.x][n.y][n.z]) { used[n.x][n.y][n.z] = 1; q.push(n); } } if (m.z) { //第五 trans = min(m.z , a - m.x); n.x = m.x + trans; n.y = m.y; n.z = m.z - trans; n.step = m.step + 1; if (!used[n.x][n.y][n.z]) { used[n.x][n.y][n.z] = 1; q.push(n); } //第六 trans = min(m.z , b - m.y); n.x = m.x; n.y = m.y + trans; n.z = m.z - trans; n.step = m.step + 1; if (!used[n.x][n.y][n.z]) { q.push(n); used[n.x][n.y][n.z] = 1; } } } return 0; } int main() { while (~scanf (\"%d %d %d\",\u0026a,\u0026b,\u0026c) \u0026\u0026 (a || b || c)) { if (a\u00261) //先简单的剪枝一下,奇数肯定不能平分 printf (\"NO\\n\"); else { memset (used,0,sizeof (used)); int ans = bfs(); if (ans) printf (\"%d\\n\",ans); else printf (\"NO\\n\"); } } return 0; } 然后杭电上讨论板子上提供一种数论题解，但是数据存在一点问题，只不过有些数据好像不对；比如： 10 6 5的结果应该是1而不是9， 也提示我们多维思考同一个问题！ 数论推导 #include\u003cbits/stdc++.h\u003e using namespace std; int main(){ int s,n,m; while(cin\u003e\u003es\u003e\u003en\u003e\u003em,s+n+m){ s/=__gcd(n,m); if(s\u00261)//奇数 cout\u003c\u003c\"NO\\n\"; else cout\u003c\u003cs-1\u003c\u003cendl; } return 0; } ","date":"2018-07-24","objectID":"/posts/hdu-1495-%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90-bfs%E6%A8%A1%E6%8B%9F%E5%80%92%E6%B0%B4-or-%E6%95%B0%E8%AE%BA/:0:4","tags":["ACM","HDU","搜索","C++"],"title":"HDU-1495-非常可乐（bfs模拟倒水or数论）","uri":"/posts/hdu-1495-%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90-bfs%E6%A8%A1%E6%8B%9F%E5%80%92%E6%B0%B4-or-%E6%95%B0%E8%AE%BA/"},{"categories":["ACM"],"content":"Find a way 圣诞节要到了，坤神和瑞瑞这对基佬想一起去召唤师大峡谷开开车。百度地图一下，发现周围的召唤师大峡谷还不少，这对基佬纠结着，该去哪一个。。。坤神：我要去左边的这个（因为离自己比较近 哈哈~）。。瑞瑞：我要去右边的这个（因为离自己比较近 嘿嘿~） ……..这对基佬闹矛盾了，开车有危险了！ 为了不让他们去召唤师大峡谷坑人，riot决定让他们去X召唤师大峡谷，保证他俩所走的路程和最短。每走一个点需要花费11分钟，输出他们一共花费多少时间（最短时间噢） ","date":"2018-07-23","objectID":"/posts/hdu-2612-find-a-way%E5%8F%8Cbfs/:0:1","tags":["ACM","HDU","搜索","C++"],"title":"hdu-2612-Find a way（双bfs）","uri":"/posts/hdu-2612-find-a-way%E5%8F%8Cbfs/"},{"categories":["ACM"],"content":"Input 多组测试数据 每组数据，开始一行n，m (2\u003c=n,m\u003c=200) 接下来是个n x m的矩阵 ‘Y’ 表示坤神所在的初始位置 ‘M’ 表示瑞瑞所在的初始位置 ‘#’ 该点禁止通行 ‘.’ 该点可通行 ‘@’ 召唤师大峡谷 ","date":"2018-07-23","objectID":"/posts/hdu-2612-find-a-way%E5%8F%8Cbfs/:0:2","tags":["ACM","HDU","搜索","C++"],"title":"hdu-2612-Find a way（双bfs）","uri":"/posts/hdu-2612-find-a-way%E5%8F%8Cbfs/"},{"categories":["ACM"],"content":"Output 每组测试数据，输出坤神和瑞瑞到达同一个召唤师大峡谷所花费的最短时间。 ","date":"2018-07-23","objectID":"/posts/hdu-2612-find-a-way%E5%8F%8Cbfs/:0:3","tags":["ACM","HDU","搜索","C++"],"title":"hdu-2612-Find a way（双bfs）","uri":"/posts/hdu-2612-find-a-way%E5%8F%8Cbfs/"},{"categories":["ACM"],"content":"Sample Input 4 4 Y.#@ .... .#.. @..M 4 4 Y.#@ .... .#.. @#.M 5 5 Y..@. .#... .#... @..M. `#...#` ","date":"2018-07-23","objectID":"/posts/hdu-2612-find-a-way%E5%8F%8Cbfs/:0:4","tags":["ACM","HDU","搜索","C++"],"title":"hdu-2612-Find a way（双bfs）","uri":"/posts/hdu-2612-find-a-way%E5%8F%8Cbfs/"},{"categories":["ACM"],"content":"Sample Output 66 88 66 ","date":"2018-07-23","objectID":"/posts/hdu-2612-find-a-way%E5%8F%8Cbfs/:0:5","tags":["ACM","HDU","搜索","C++"],"title":"hdu-2612-Find a way（双bfs）","uri":"/posts/hdu-2612-find-a-way%E5%8F%8Cbfs/"},{"categories":["ACM"],"content":"Hint 对于第一组样例，坤神和瑞瑞去矩阵（4,1） 这个召唤师大峡谷，耗费的时间为 3 * 11 + 3 * 11 = 66， 去矩阵（1,4）这个召唤师大峡谷，耗费的时间为 5 * 11 + 3 * 11 = 88 。所以，最终答案：66。思路参考 写代码总是好粗心！！ #include \u003cbits/stdc++.h\u003e#define inf 0x3f3f3f3f //acm中“无穷大”的一般定义 using namespace std; const int M=202; char mp[M][M]; //地图 int a[M][M],b[M][M]; bool vis[M][M]; //标记数组 int n,m; int ans; struct node { int x,y,step; }; void init() //初始化函数 { ans=inf; for(int i=0; i\u003cn; i++) for(int j=0; j\u003cm; j++) { a[i][j]=inf; b[i][j]=inf; } } void bfs(int x,int y,bool flag){ int dir[4][2]={-1,0,1,0,0,1,0,-1}; node u,v; queue\u003cnode\u003e q; //初始化队列第一个元素 u.x=x; u.y=y; u.step=0; vis[x][y]=true; q.push(u); while(!q.empty()){ u=q.front(); q.pop(); if(mp[u.x][u.y]=='@'){ if(!flag) a[u.x][u.y]=u.step; else b[u.x][u.y]=u.step; } for(int i=0;i\u003c4;i++){ int tx=u.x+dir[i][0]; int ty=u.y+dir[i][1]; if(tx\u003e=0\u0026\u0026ty\u003e=0\u0026\u0026tx\u003cn\u0026\u0026ty\u003cm\u0026\u0026!vis[tx][ty]\u0026\u0026mp[tx][ty]!='#'){//注意@和M，Y也是可以走的。 v.x=tx; //每次写搜索都忘记vis!!!! v.y=ty; vis[tx][ty]=true; //我总是忘记。。。 v.step=u.step+1; q.push(v); } } } } int main() { while(~scanf(\"%d%d\",\u0026n,\u0026m)) { init(); for(int i=0; i\u003cn; i++) scanf(\"%s\",mp[i]); for(int i=0; i\u003cn; i++) for(int j=0; j\u003cm; j++) { if(mp[i][j]=='Y') { memset(vis,false,sizeof(vis)); bfs(i,j,false); } if(mp[i][j]=='M') { memset(vis,false,sizeof(vis)); //记得再次初始化标记数组 bfs(i,j,true); } } for(int i=0; i\u003cn; i++) for(int j=0; j\u003cm; j++) if(mp[i][j]=='@') ans=min(ans,a[i][j]+b[i][j]); printf(\"%d\\n\",ans*11); } return 0; } ","date":"2018-07-23","objectID":"/posts/hdu-2612-find-a-way%E5%8F%8Cbfs/:0:6","tags":["ACM","HDU","搜索","C++"],"title":"hdu-2612-Find a way（双bfs）","uri":"/posts/hdu-2612-find-a-way%E5%8F%8Cbfs/"},{"categories":["ACM"],"content":"Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting. Walking: FJ can move from any point X to the points X\",“1 or X + 1 in a single minute Teleporting: FJ can move from any point X to the point 2 × X in a single minute. If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it? ","date":"2018-07-22","objectID":"/posts/poj-3278-catch-that-cow-bfs/:0:0","tags":["BFS","ACM","搜索","POJ","C++"],"title":"POJ-3278-Catch That Cow(bfs)","uri":"/posts/poj-3278-catch-that-cow-bfs/"},{"categories":["ACM"],"content":"Input Line 1: Two space-separated integers: N and K ","date":"2018-07-22","objectID":"/posts/poj-3278-catch-that-cow-bfs/:0:1","tags":["BFS","ACM","搜索","POJ","C++"],"title":"POJ-3278-Catch That Cow(bfs)","uri":"/posts/poj-3278-catch-that-cow-bfs/"},{"categories":["ACM"],"content":"Output Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow. ","date":"2018-07-22","objectID":"/posts/poj-3278-catch-that-cow-bfs/:0:2","tags":["BFS","ACM","搜索","POJ","C++"],"title":"POJ-3278-Catch That Cow(bfs)","uri":"/posts/poj-3278-catch-that-cow-bfs/"},{"categories":["ACM"],"content":"Sample Input 5 17 ","date":"2018-07-22","objectID":"/posts/poj-3278-catch-that-cow-bfs/:0:3","tags":["BFS","ACM","搜索","POJ","C++"],"title":"POJ-3278-Catch That Cow(bfs)","uri":"/posts/poj-3278-catch-that-cow-bfs/"},{"categories":["ACM"],"content":"Sample Output 4 ","date":"2018-07-22","objectID":"/posts/poj-3278-catch-that-cow-bfs/:0:4","tags":["BFS","ACM","搜索","POJ","C++"],"title":"POJ-3278-Catch That Cow(bfs)","uri":"/posts/poj-3278-catch-that-cow-bfs/"},{"categories":["ACM"],"content":"Hint The fastest way for Farmer John to reach the fugitive cow is to move along the following path: 5-10-9-18-17, which takes 4 minutes. ","date":"2018-07-22","objectID":"/posts/poj-3278-catch-that-cow-bfs/:0:5","tags":["BFS","ACM","搜索","POJ","C++"],"title":"POJ-3278-Catch That Cow(bfs)","uri":"/posts/poj-3278-catch-that-cow-bfs/"},{"categories":["ACM"],"content":"题意： 农场主的牛不见了，主人和牛在一条直线上，且牛没有新的目标，它不会走动，主人的位置是你n，牛的位置是k，主人可以有三种走路的方法，右左（距离+-1），闪现（距离+x,x为当前位置），每走一步，一分钟，问几分钟主人能找到牛。bfs搜索方向即为三个“方向”。搜索所有走法； #include\"iostream\"#include\u003cqueue\u003e#include\"string.h\"using namespace std; int n,k; bool sign[200007]; struct node{ int x,step; }; bool check(int a) { if(!sign[a]\u0026\u0026a\u003e=0\u0026\u0026a\u003c110000) return true; return false; } void bfs() { node u,v; queue\u003cnode\u003e q; v.x=n;//初始化起点 v.step=0; q.push(v); sign[v.x]=true; while(!q.empty()){ u=q.front(); q.pop(); if(u.x==k){ cout\u003c\u003cu.step\u003c\u003cendl; return ; } //三种前进方向，左右和闪现 v=u; v.x++; v.step++; if(check(v.x)){ sign[v.x]=true; q.push(v); } v=u; v.x--; v.step++; if(check(v.x)){ sign[v.x]=true; q.push(v); } v=u; v.x=2*v.x; v.step++; if(check(v.x)){ sign[v.x]=true; q.push(v); } } } int main() { cin\u003e\u003en\u003e\u003ek; memset(sign,0,sizeof(sign)); bfs(); return 0; } ","date":"2018-07-22","objectID":"/posts/poj-3278-catch-that-cow-bfs/:0:6","tags":["BFS","ACM","搜索","POJ","C++"],"title":"POJ-3278-Catch That Cow(bfs)","uri":"/posts/poj-3278-catch-that-cow-bfs/"},{"categories":["ACM"],"content":"英文原题链接 ","date":"2018-07-22","objectID":"/posts/poj-2251-dungeon-master%E4%B8%89%E7%BB%B4bfs%E6%9C%80%E7%9F%AD%E8%B7%AF/:0:0","tags":["BFS","ACM","搜索","POJ","C++","C"],"title":"poj-2251-Dungeon Master（三维bfs最短路）","uri":"/posts/poj-2251-dungeon-master%E4%B8%89%E7%BB%B4bfs%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"categories":["ACM"],"content":"Description - 题目描述 你被困在一个三维的空间中,现在要寻找最短路径逃生！ 空间由立方体单位构成 你每次向上下前后左右移动一个单位需要一分钟 你不能对角线移动并且四周封闭 是否存在逃出生天的可能性？如果存在，则需要多少时间？ ","date":"2018-07-22","objectID":"/posts/poj-2251-dungeon-master%E4%B8%89%E7%BB%B4bfs%E6%9C%80%E7%9F%AD%E8%B7%AF/:0:1","tags":["BFS","ACM","搜索","POJ","C++","C"],"title":"poj-2251-Dungeon Master（三维bfs最短路）","uri":"/posts/poj-2251-dungeon-master%E4%B8%89%E7%BB%B4bfs%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"categories":["ACM"],"content":"Input - 输入 输入第一行是一个数表示空间的数量。 每个空间的描述的第一行为L，R和C（皆不超过30）。 L表示空间的高度。R和C分别表示每层空间的行与列的大小。 随后L层地牢，每层R行，每行C个字符。 每个字符表示空间的一个单元。'#‘表示不可通过单元，’.‘表示空白单元。你的起始位置在’S’，出口为’E'。 每层空间后都有一个空行。L，R和C均为0时输入结束。 ","date":"2018-07-22","objectID":"/posts/poj-2251-dungeon-master%E4%B8%89%E7%BB%B4bfs%E6%9C%80%E7%9F%AD%E8%B7%AF/:0:2","tags":["BFS","ACM","搜索","POJ","C++","C"],"title":"poj-2251-Dungeon Master（三维bfs最短路）","uri":"/posts/poj-2251-dungeon-master%E4%B8%89%E7%BB%B4bfs%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"categories":["ACM"],"content":"Output - 输出 每个空间对应一行输出。 如果可以逃生，则输出如下 Escaped in x minute(s). 　x为最短脱离时间。 如果无法逃生，则输出如下 Trapped! ","date":"2018-07-22","objectID":"/posts/poj-2251-dungeon-master%E4%B8%89%E7%BB%B4bfs%E6%9C%80%E7%9F%AD%E8%B7%AF/:0:3","tags":["BFS","ACM","搜索","POJ","C++","C"],"title":"poj-2251-Dungeon Master（三维bfs最短路）","uri":"/posts/poj-2251-dungeon-master%E4%B8%89%E7%BB%B4bfs%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"categories":["ACM"],"content":"Sample Input - 输入样例 3 4 5 S.... .###. .##.. ###.# ##### ##### ##.## ##... ##### ##### #.### ####E 1 3 3 S## #E# ### 0 0 0 ","date":"2018-07-22","objectID":"/posts/poj-2251-dungeon-master%E4%B8%89%E7%BB%B4bfs%E6%9C%80%E7%9F%AD%E8%B7%AF/:0:4","tags":["BFS","ACM","搜索","POJ","C++","C"],"title":"poj-2251-Dungeon Master（三维bfs最短路）","uri":"/posts/poj-2251-dungeon-master%E4%B8%89%E7%BB%B4bfs%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"categories":["ACM"],"content":"Sample Output - 输出样例 Escaped in 11 minute(s). Trapped! 类似二维四个方向的bfs最短路，改成上下东西南北就行了，三维bfs最短路 #include \u003ciostream\u003e#include \u003cstdio.h\u003e#include \u003cstring.h\u003e#include \u003cqueue\u003e#include \u003calgorithm\u003eusing namespace std; char map[35][35][35]; int vis[35][35][35]; int k,n,m,sx,sy,sz,ex,ey,ez; int to[6][3] = {{0,0,1},{0,0,-1},{0,1,0},{0,-1,0},{1,0,0},{-1,0,0}};//上下东西南北 struct node { int x,y,z,step; }; int check(int x,int y,int z)//检查是否可走 { if(x\u003c0 || y\u003c0 || z\u003c0 || x\u003e=k || y\u003e=n || z\u003e=m)//越界判断 return 1; else if(map[x][y][z] == '#') return 1; else if(vis[x][y][z]) return 1; return 0; } int bfs() { int i; node a,next; queue\u003cnode\u003e Q; a.x = sx,a.y = sy,a.z = sz; a.step = 0; vis[sx][sy][sz] = 1; Q.push(a); while(!Q.empty()) { a = Q.front(); Q.pop(); if(a.x == ex \u0026\u0026 a.y == ey \u0026\u0026 a.z == ez) return a.step; for(i = 0; i\u003c6; i++) { next = a; next.x = a.x+to[i][0]; next.y = a.y+to[i][1]; next.z = a.z+to[i][2]; if(check(next.x,next.y,next.z)) continue; vis[next.x][next.y][next.z] = 1; next.step = a.step+1; Q.push(next); } } return 0; } int main() { int i,j,r; while(scanf(\"%d%d%d\",\u0026k,\u0026n,\u0026m),n+m+k) { for(i = 0; i\u003ck; i++) { for(j = 0; j\u003cn; j++) { scanf(\"%s\",map[i][j]); for(r = 0; r\u003cm; r++) { if(map[i][j][r] == 'S') { sx = i,sy = j,sz = r; } else if(map[i][j][r] == 'E') { ex = i,ey = j,ez = r; } } } } memset(vis,0,sizeof(vis)); int ans; ans = bfs(); if(ans) printf(\"Escaped in %d minute(s).\\n\",ans); else printf(\"Trapped!\\n\"); } return 0; } ","date":"2018-07-22","objectID":"/posts/poj-2251-dungeon-master%E4%B8%89%E7%BB%B4bfs%E6%9C%80%E7%9F%AD%E8%B7%AF/:0:5","tags":["BFS","ACM","搜索","POJ","C++","C"],"title":"poj-2251-Dungeon Master（三维bfs最短路）","uri":"/posts/poj-2251-dungeon-master%E4%B8%89%E7%BB%B4bfs%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"categories":["ACM"],"content":"Time Limit: 1000MS Memory Limit: 10000K Total Submissions: 63659 Accepted: 30423 ","date":"2018-07-22","objectID":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/:0:0","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1321 棋盘问题（dfs）","uri":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/"},{"categories":["ACM"],"content":"Description 在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。 ","date":"2018-07-22","objectID":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/:0:1","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1321 棋盘问题（dfs）","uri":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/"},{"categories":["ACM"],"content":"Input 输入含有多组测试数据。 每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n * n的矩阵内描述棋盘，以及摆放棋子的数目。 n \u003c= 8 , k \u003c= n 当为-1 -1时表示输入结束。 随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。 ","date":"2018-07-22","objectID":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/:0:2","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1321 棋盘问题（dfs）","uri":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/"},{"categories":["ACM"],"content":"Output 对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C\u003c2^31）。 ","date":"2018-07-22","objectID":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/:0:3","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1321 棋盘问题（dfs）","uri":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/"},{"categories":["ACM"],"content":"Sample Input 2 1 #. .# 4 4 ...# ..#. .#.. #... -1 -1 ","date":"2018-07-22","objectID":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/:0:4","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1321 棋盘问题（dfs）","uri":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/"},{"categories":["ACM"],"content":"Sample Output 2 1 ","date":"2018-07-22","objectID":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/:0:5","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1321 棋盘问题（dfs）","uri":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/"},{"categories":["ACM"],"content":"Source 蔡错@pku ","date":"2018-07-22","objectID":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/:0:6","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1321 棋盘问题（dfs）","uri":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/"},{"categories":["ACM"],"content":"思路 下子方案数就相当于遍历图的不同遍历数，用dfs变形。 理解以下数据还有样例应该差不多了 3 2 #.. .#. ..# 3 3 2 #.. .## ..# 4 ","date":"2018-07-22","objectID":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/:0:7","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1321 棋盘问题（dfs）","uri":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/"},{"categories":["ACM"],"content":"AC代码 #include\u003ciostream\u003e#include\u003ccstdio\u003e#include\u003ccstring\u003e#include\u003calgorithm\u003eusing namespace std; char mp[8][8]; int v[8]; int n,k,w,r;//状态计数器r void dfs(int x)//逐行深搜，x为当前搜索行 { if(w==k)//下子数w { r++;return; } if(x==n)return; for(int i=0;i\u003cn;i++) { if(v[i]!=1\u0026\u0026mp[x][i]=='#') { v[i]=1; w++; dfs(x+1); w--; v[i]=0; } } dfs(x+1);//搜索下一行 } int main() { while(cin\u003e\u003en\u003e\u003ek) { if(n==-1\u0026\u0026k==-1) return 0; memset(mp,0,sizeof(mp)); memset(v,0,sizeof(v)); for(int i=0;i\u003cn;i++) cin\u003e\u003emp[i]; w=0;r=0; dfs(0); cout\u003c\u003cr\u003c\u003cendl; } } 传送门 ","date":"2018-07-22","objectID":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/:0:8","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1321 棋盘问题（dfs）","uri":"/posts/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98dfs/"},{"categories":["ACM"],"content":"Find The Multiple Time Limit: 1000MS Memory Limit: 10000K Total Submissions: 40713 Accepted: 17088 Special Judge ","date":"2018-07-22","objectID":"/posts/poj-1426-find-the-multipledfs/:1:0","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1426-Find The Multiple(dfs)","uri":"/posts/poj-1426-find-the-multipledfs/"},{"categories":["ACM"],"content":"Description Given a positive integer n, write a program to find out a nonzero multiple m of n whose decimal representation contains only the digits 0 and 1. You may assume that n is not greater than 200 and there is a corresponding m containing no more than 100 decimal digits. ","date":"2018-07-22","objectID":"/posts/poj-1426-find-the-multipledfs/:1:1","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1426-Find The Multiple(dfs)","uri":"/posts/poj-1426-find-the-multipledfs/"},{"categories":["ACM"],"content":"Input The input file may contain multiple test cases. Each line contains a value of n (1 \u003c= n \u003c= 200). A line containing a zero terminates the input. ","date":"2018-07-22","objectID":"/posts/poj-1426-find-the-multipledfs/:1:2","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1426-Find The Multiple(dfs)","uri":"/posts/poj-1426-find-the-multipledfs/"},{"categories":["ACM"],"content":"Output For each value of n in the input print a line containing the corresponding value of m. The decimal representation of m must not contain more than 100 digits. If there are multiple solutions for a given value of n, any one of them is acceptable. ","date":"2018-07-22","objectID":"/posts/poj-1426-find-the-multipledfs/:1:3","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1426-Find The Multiple(dfs)","uri":"/posts/poj-1426-find-the-multipledfs/"},{"categories":["ACM"],"content":"Sample Input 2 6 19 0 ","date":"2018-07-22","objectID":"/posts/poj-1426-find-the-multipledfs/:1:4","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1426-Find The Multiple(dfs)","uri":"/posts/poj-1426-find-the-multipledfs/"},{"categories":["ACM"],"content":"Sample Output 10 100100100100100100 111111111111111111 给定一个正整数n，请编写一个程序来寻找n的一个非零的倍数m，这个m应当在十进制表示时每一位上只包含0或者1。你可以假定n不大于200且m不多于100位。 提示：本题采用Special Judge，你无需输出所有符合条件的m，你只需要输出任一符合条件的m即可。 #include\"iostream\"using namespace std; typedef unsigned long long ll; int n; bool sign; void dfs(ll x,int count) { if(sign) return ; if(x%n==0){ sign=true; cout\u003c\u003cx\u003c\u003cendl; return ; } if(count==19)//m最多200位 return ; dfs(x*10,count+1); dfs(x*10+1,count+1); //每两位数后两位有两种情况，10或11，深搜所有情况，找到一种就返回，找不到找另外一颗子树 } int main() { while(cin\u003e\u003en\u0026\u0026n) { sign=false; dfs(1,0); } return 0; } ","date":"2018-07-22","objectID":"/posts/poj-1426-find-the-multipledfs/:1:5","tags":["DFS","ACM","搜索","POJ","C++"],"title":"poj-1426-Find The Multiple(dfs)","uri":"/posts/poj-1426-find-the-multipledfs/"},{"categories":["ACM"],"content":"Codeforces Round 498 (Div. 3) A. Adjacent Replacements（水）","date":"2018-07-22","objectID":"/posts/adjacent-replacements/","tags":["Codeforces","ACM","C++"],"title":"Adjacent Replacements","uri":"/posts/adjacent-replacements/"},{"categories":["ACM"],"content":"A. Adjacent Replacements 第一次打cf就做出一道这样的找规律的题，打到自闭。 #include\u003cbits/stdc++.h\u003eusing namespace std; int main(){ int n,a[1001]; cin\u003e\u003en; int i; int flag=0; for(i=0;i\u003cn;i++){ cin\u003e\u003ea[i]; if(!(a[i]\u00261)) a[i]--; if(!flag) {cout\u003c\u003ca[i];flag=1;} else cout\u003c\u003c\" \"\u003c\u003ca[i]; } return 0; } ","date":"2018-07-22","objectID":"/posts/adjacent-replacements/:0:0","tags":["Codeforces","ACM","C++"],"title":"Adjacent Replacements","uri":"/posts/adjacent-replacements/"},{"categories":["ACM"],"content":"迷宫问题 Time Limit: 1000MS Memory Limit: 65536K Total Submissions: 32323 Accepted: 18471 ","date":"2018-07-22","objectID":"/posts/poj-3984-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98bfs%E8%B7%AF%E5%BE%84/:0:1","tags":["BFS","ACM","POJ","C++","C"],"title":"poj-3984-迷宫问题(bfs路径)","uri":"/posts/poj-3984-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98bfs%E8%B7%AF%E5%BE%84/"},{"categories":["ACM"],"content":"Description 定义一个二维数组： int maze[5][5] = { 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, }; 它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。 ","date":"2018-07-22","objectID":"/posts/poj-3984-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98bfs%E8%B7%AF%E5%BE%84/:0:2","tags":["BFS","ACM","POJ","C++","C"],"title":"poj-3984-迷宫问题(bfs路径)","uri":"/posts/poj-3984-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98bfs%E8%B7%AF%E5%BE%84/"},{"categories":["ACM"],"content":"Input 一个5 × 5的二维数组，表示一个迷宫。数据保证有唯一解。 ","date":"2018-07-22","objectID":"/posts/poj-3984-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98bfs%E8%B7%AF%E5%BE%84/:0:3","tags":["BFS","ACM","POJ","C++","C"],"title":"poj-3984-迷宫问题(bfs路径)","uri":"/posts/poj-3984-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98bfs%E8%B7%AF%E5%BE%84/"},{"categories":["ACM"],"content":"Output 左上角到右下角的最短路径，格式如样例所示。 ","date":"2018-07-22","objectID":"/posts/poj-3984-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98bfs%E8%B7%AF%E5%BE%84/:0:4","tags":["BFS","ACM","POJ","C++","C"],"title":"poj-3984-迷宫问题(bfs路径)","uri":"/posts/poj-3984-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98bfs%E8%B7%AF%E5%BE%84/"},{"categories":["ACM"],"content":"Sample Input 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 ","date":"2018-07-22","objectID":"/posts/poj-3984-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98bfs%E8%B7%AF%E5%BE%84/:0:5","tags":["BFS","ACM","POJ","C++","C"],"title":"poj-3984-迷宫问题(bfs路径)","uri":"/posts/poj-3984-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98bfs%E8%B7%AF%E5%BE%84/"},{"categories":["ACM"],"content":"Sample Output (0, 0) (1, 0) (2, 0) (2, 1) (2, 2) (2, 3) (2, 4) (3, 4) (4, 4) 对于新手来说，主要是bfs路径的问题有点难度，搞得晕晕的。 #include\u003ciostream\u003e#include\u003ccstring\u003eusing namespace std; int map[5][5]; int visited[5][5]; int dx[4]={0, 1, 0, -1}; int dy[4]={ 1, 0,-1, 0}; int head,tail; struct node{ int xx,yy; int fa;//父节点 }pre[25],way[25]; void BFS(int x,int y) { int x1,y1; head=0,tail=1; visited[x][y]=1; pre[0].xx=x,pre[0].yy=y; while(tail\u003ehead)//栈空 { x=pre[head].xx; y=pre[head].yy; if(x==4\u0026\u0026y==4)//结束标志 return ; for(int i=0;i\u003c4;i++) { x1=x+dx[i];y1=y+dy[i]; if(x1\u003e=0\u0026\u0026x1\u003c=4\u0026\u0026y1\u003e=0\u0026\u0026y1\u003c=4) if(map[x1][y1]==0\u0026\u0026!visited[x1][y1]) { pre[tail].xx=x1; pre[tail].yy=y1; pre[tail].fa=head; visited[x1][y1]=1; tail+=1;//入栈 } } head++;//相当于出栈 } } int main() { int i,j; ios::sync_with_stdio(false); memset(map,0,sizeof(map)); memset(visited,0,sizeof(visited)); for(i=0;i\u003c5;i++) for(j=0;j\u003c5;j++) cin\u003e\u003emap[i][j]; BFS(0,0); i=0; while(head)//逆序进行赋值输出就是通路 { way[i].xx=pre[head].xx; way[i].yy=pre[head].yy; head=pre[head].fa; i++; } //画一下队列 way[i].xx=0;way[i].yy=0; while(i!=-1) { cout\u003c\u003c\"(\"\u003c\u003cway[i].xx\u003c\u003c\", \"\u003c\u003cway[i].yy\u003c\u003c\")\"\u003c\u003cendl; i--; } return 0; } ","date":"2018-07-22","objectID":"/posts/poj-3984-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98bfs%E8%B7%AF%E5%BE%84/:0:6","tags":["BFS","ACM","POJ","C++","C"],"title":"poj-3984-迷宫问题(bfs路径)","uri":"/posts/poj-3984-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98bfs%E8%B7%AF%E5%BE%84/"},{"categories":["ACM"],"content":"链接:https://www.nowcoder.com/acm/contest/133/A 来源:牛客网 ","date":"2018-07-22","objectID":"/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B20-%E6%9F%93%E8%89%B2/:0:0","tags":["ACM","Nowcoder","C++","C"],"title":"Wannafly挑战赛20-染色","uri":"/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B20-%E6%9F%93%E8%89%B2/"},{"categories":["ACM"],"content":"题目描述 现在有一棵被Samsara-Karma染了k种颜色的树，每种颜色有着不同的价值,Applese觉得Samsara-Karma染的太难看了，于是打算把整棵树重新染成同一种颜色，但是，由于一些奥妙重重的原因，每一次染色Applese可以选择两个有边相连的点，将其中一个染成另一个的颜色。而进行一次这样的操作需要付出两种颜色价值和的代价， 现在，Applese的钱要用来买书(game)，所以他想要最小化代价 ","date":"2018-07-22","objectID":"/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B20-%E6%9F%93%E8%89%B2/:0:1","tags":["ACM","Nowcoder","C++","C"],"title":"Wannafly挑战赛20-染色","uri":"/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B20-%E6%9F%93%E8%89%B2/"},{"categories":["ACM"],"content":"输入描述: 输入包括若干行第一行包括一个数n，表示这棵树有n个节点第二行包括n个数，第i个数表示第i个节点的颜色coli 注意：一个颜色的标号即价值接下来的n - 1行，每行包括两个数u, v，表示u节点与v节点之间有一条无向边n ≤ 100000, 1 ≤ coli ≤ 1e9，数据保证是一棵树 ","date":"2018-07-22","objectID":"/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B20-%E6%9F%93%E8%89%B2/:0:2","tags":["ACM","Nowcoder","C++","C"],"title":"Wannafly挑战赛20-染色","uri":"/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B20-%E6%9F%93%E8%89%B2/"},{"categories":["ACM"],"content":"输出描述: 输出包括一行第一行包括一个数，表示最小代价 ","date":"2018-07-22","objectID":"/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B20-%E6%9F%93%E8%89%B2/:0:3","tags":["ACM","Nowcoder","C++","C"],"title":"Wannafly挑战赛20-染色","uri":"/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B20-%E6%9F%93%E8%89%B2/"},{"categories":["ACM"],"content":"示例1 输入 4 2 3 4 3 1 2 2 3 3 4 输出 12 蒟蒻暴力枚举-_-! #include \u003cbits/stdc++.h\u003e using namespace std; const int MAXN=1e5+10; int a[MAXN]; map\u003cint, int \u003ema; set\u003cint\u003ese; int x[MAXN],y[MAXN]; int main() { int n; scanf(\"%d\",\u0026n); for (int i = 1; i \u003c=n ; ++i) { scanf(\"%d\",\u0026a[i]); se.insert(a[i]); } for (int i = 1; i \u003cn ; ++i) { scanf(\"%d%d\",\u0026x[i],\u0026y[i]); } long long ans=1e14,sum=0; set\u003cint\u003e::iterator it; for (it=se.begin(); it !=se.end() ; ++it) { sum=0; for (int j = 1; j \u003c=n ; ++j) { if((*it)!=a[j]) sum+=((*it)+a[j]); } ans=min(sum,ans); } printf(\"%lld\\n\",ans); return 0; } 最后想说这都过了什么鬼，不会数据这么弱吧？？！?我只枚举了最小的价值颜色的情况，唉，不管了不管了。 #include\u003cbits/stdc++.h\u003eusing namespace std; int a[1000000],n,m,k=1,t,ans=0; int main() { scanf(\"%d\",\u0026n); for(int i=1;i\u003c=n;++i) scanf(\"%d\",\u0026a[i]); sort(a+1,a+n+1); for(int i=2;i\u003c=n;++i) if(a[i]!=a[1]) ans+=a[i]+a[1]; printf(\"%d\",ans); return 0; } ","date":"2018-07-22","objectID":"/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B20-%E6%9F%93%E8%89%B2/:0:4","tags":["ACM","Nowcoder","C++","C"],"title":"Wannafly挑战赛20-染色","uri":"/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B20-%E6%9F%93%E8%89%B2/"},{"categories":["ACM"],"content":"Oil Deposits 翻译 Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 41406 Accepted Submission(s): 23977 Problem Description The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits. GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that divides the land into numerous square plots. It then analyzes each plot separately, using sensing equipment to determine whether or not the plot contains oil. A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of the same oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is to determine how many different oil deposits are contained in a grid. Input The input file contains one or more grids. Each grid begins with a line containing m and n, the number of rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input; otherwise 1 \u003c= m \u003c= 100 and 1 \u003c= n \u003c= 100. Following this are m lines of n characters each (not counting the end-of-line characters). Each character corresponds to one plot, and is either ' * ‘, representing the absence of oil, or ‘@’, representing an oil pocket. Output For each grid, output the number of distinct oil deposits. Two different pockets are part of the same oil deposit if they are adjacent horizontally, vertically, or diagonally. An oil deposit will not contain more than 100 pockets. Sample Input 1 1 * 3 5 *@*@* **@** *@*@* 1 8 @@****@* 5 5 ****@ *@@*@ *@**@ @@@*@ @@**@ 0 0 Sample Output 0 1 2 2 Source Mid-Central USA 1997 Recommend Eddy | We have carefully selected several similar problems for you: 1016 1010 1312 1242 1240 思路 dfs模板题吧，八个方向搜索；（像i，j这样的计数器还是写在局部比较好，我尽然被定义域的问题搞了一晚上醉了醉了。。。） #include\u003cbits/stdc++.h\u003eusing namespace std; int n,m,s; char maze[107][107]; int vx[8]={-1,1,0,0,-1,-1,1,1}; int vy[8]={0,0,-1,1,-1,1,1,-1}; void dfs(int x,int y){ maze[x][y]='*'; for(int i=0;i\u003c8;i++){ int tx=x+vx[i]; int ty=y+vy[i]; if(tx\u003e=0\u0026\u0026tx\u003cm\u0026\u0026ty\u003e=0\u0026\u0026ty\u003cn\u0026\u0026maze[tx][ty]=='@') dfs(tx,ty); } } int main(){ int i,j; while(cin\u003e\u003em\u003e\u003en\u0026\u0026m){ s=0; for(i=0;i\u003cm;i++) cin\u003e\u003emaze[i]; for(i=0;i\u003cm;i++){//相当于不连通的情况 for(j=0;j\u003cn;j++){ if(maze[i][j]=='@'){ dfs(i,j); s++; } } } cout\u003c\u003cs\u003c\u003cendl; } return 0; } ","date":"2018-07-22","objectID":"/posts/hud-1241-oil-deposits-dfs/:1:0","tags":["DFS","搜索","HDU","ACM","C++"],"title":"hud-1241-Oil Deposits (dfs)","uri":"/posts/hud-1241-oil-deposits-dfs/"},{"categories":["ACM"],"content":"假设有一个n行m列的迷宫，每个单位要么是空地(用1表示)要么是障碍物(用0表示). 如和找到从起点到终点的最短路径？利用BFS搜索，逐步计算出每个节点到起点的最短距离， 以及最短路径每个节点的前一个节点。最终将生成一颗以起点为根的BFS树。此时BFS可以求出任意一点到起点的距离。 ","date":"2018-07-22","objectID":"/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/:0:0","tags":["BFS","搜索","C++"],"title":"BFS求最短路","uri":"/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"categories":["ACM"],"content":"图 1 3 0 21 23 2 0 17 20 22 4 0 14 0 0 5 0 12 15 18 6 8 10 0 19 7 9 11 13 16 ","date":"2018-07-22","objectID":"/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/:1:0","tags":["BFS","搜索","C++"],"title":"BFS求最短路","uri":"/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"categories":["ACM"],"content":"输入 6 5 1 1 0 1 1 1 0 1 1 1 1 0 1 0 0 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 ","date":"2018-07-22","objectID":"/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/:2:0","tags":["BFS","搜索","C++"],"title":"BFS求最短路","uri":"/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"categories":["ACM"],"content":"输出 1 2 4 5 6 8 10 12 14 17 20 21 23 12//最短距离 ","date":"2018-07-22","objectID":"/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/:3:0","tags":["BFS","搜索","C++"],"title":"BFS求最短路","uri":"/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"categories":["ACM"],"content":"代码 #include\u003ciostream\u003e#include\u003cqueue\u003e#include\u003ccstdio\u003e#include\u003ccstring\u003e#include\u003cvector\u003eusing namespace std; const int maxn=100+5; int G[maxn][maxn]; //存图的d=id int path[maxn]; //存每个节点的父节点，即路径 int n,m; //n行 m列 int k=1;//记录编号 int end_num; int vx[5] = {-1,1,0,0}; //vx vy用来计算一个节点周围上下左右4个节点 int vy[5] = {0,0,-1,1}; bool vis[maxn][maxn]; //判断某节点是否已经被访问过 struct node { int x; int y; int id; int parent=0; node(int a,int b,int c) { x=a; y=b; id=c; } }; int main() { //freopen(\"in.txt\",\"r\",stdin); memset(G,0,sizeof(G)); memset(vis,0,sizeof(vis)); memset(path,0,sizeof(path)); cin\u003e\u003en\u003e\u003em; for(int i=1; i\u003c=n; i++) for(int j=1; j\u003c=m; j++) { cin\u003e\u003eG[i][j]; } queue\u003cnode\u003e q; node v=node(1,1,1); q.push(v); vis[1][1]=1; while(!q.empty()) { node u=q.front(); q.pop(); path[u.id]=u.parent;//记录每个点的父节点 for(int i=0; i\u003c4; i++) { int tx=u.x+vx[i]; int ty=u.y+vy[i]; if(G[tx][ty]\u0026\u0026!vis[tx][ty])//有路可走且未访问 { vis[tx][ty]=1; //cout\u003c\u003ctx\u003c\u003cty\u003c\u003cendl; node v=node(tx,ty,++k); end_num=k; v.parent=u.id; q.push(v); } } } vector\u003cint\u003e ans; //cout\u003c\u003cend_num\u003c\u003cendl; while(end_num)//从后面开始找父亲节点 { ans.push_back(end_num); end_num=path[end_num]; } int s=0; while(!ans.empty()) { s++; cout\u003c\u003c*(ans.end()-1)\u003c\u003c' ';//ans最后一个元素是0 ans.pop_back(); } cout\u003c\u003cendl\u003c\u003cs-1; return 0; } ","date":"2018-07-22","objectID":"/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/:4:0","tags":["BFS","搜索","C++"],"title":"BFS求最短路","uri":"/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"categories":["ACM"],"content":"那天晚上报名了没打，第二天早上打的，也只出了两题。 ","date":"2018-07-22","objectID":"/posts/educational-codeforces-round-47-rated-for-div.-2/:0:0","tags":["Codeforces","ACM","C++","C"],"title":"Educational Codeforces Round 47 (Rated for Div. 2)","uri":"/posts/educational-codeforces-round-47-rated-for-div.-2/"},{"categories":["ACM"],"content":"A. Game Shopping #include\u003ciostream\u003eusing namespace std; int main(){ int n,m,s=0; cin\u003e\u003en\u003e\u003em; int i,j; int c[1000],a[1000]; for(i=0;i\u003cn;i++) cin\u003e\u003ec[i]; for(i=0;i\u003cm;i++) cin\u003e\u003ea[i]; for(i=0,j=0;i\u003cn;){ if(j==m) break; if(c[i]\u003c=a[j]){ s++; j++; i++; } else i++; } if(i==n\u0026\u0026s==0) cout\u003c\u003c\"0\\n\"; else cout\u003c\u003cs\u003c\u003cendl; return 0; } ","date":"2018-07-22","objectID":"/posts/educational-codeforces-round-47-rated-for-div.-2/:1:0","tags":["Codeforces","ACM","C++","C"],"title":"Educational Codeforces Round 47 (Rated for Div. 2)","uri":"/posts/educational-codeforces-round-47-rated-for-div.-2/"},{"categories":["ACM"],"content":"B. Minimum Ternary String #include \u003cbits/stdc++.h\u003eusing namespace std; string s, ans; int main(){ cin \u003e\u003e s; int one = 0; for (int i = 0; i \u003c s.size(); i++){ if (s[i] == '0') ans += \"0\"; if (s[i] == '1') one++; if (s[i] == '2') ans += \"2\"; } bool flag = false; for (int i = 0; i \u003c ans.size(); i++){ if (ans[i] == '2' \u0026\u0026 !flag) flag = true, cout \u003c\u003c string(one, '1'); cout \u003c\u003c ans[i]; } if (!flag) cout \u003c\u003c string(one, '1'); return 0; } /* 100210 11222121 20 2001 020201 2012101 111 000 */ ","date":"2018-07-22","objectID":"/posts/educational-codeforces-round-47-rated-for-div.-2/:2:0","tags":["Codeforces","ACM","C++","C"],"title":"Educational Codeforces Round 47 (Rated for Div. 2)","uri":"/posts/educational-codeforces-round-47-rated-for-div.-2/"},{"categories":["ACM"],"content":"百度知道 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 1 6 15 20 15 6 1 1、每行数字左右对称，由1开始逐渐变大，然后变小，回到1。 2、第n行的数字个数为n个。 3、第n行数字和为2^(n－1)。 4、每个数字等于上一行的左右两个数字之和。可用此性质写出整个帕斯卡三角形。 5、将第2n+1行第1个数，跟第2n+2行第3个数、第2n+3行第5个数……连成一线，这些数的和是第2n个斐波那契数。将第2n行第2个数，跟第2n+1行第4个数、第2n+2行第6个数……这些数之和是第2n-1个斐波那契数。 6、第n行的第1个数为1，第二个数为1×(n-1)，第三个数为1×(n-1)×（n-2）/2，第四个数为1×(n-1)×（n-2）/2×（n-3）/3…依此类推。 此数列中各行中的数字正好是二项式a+b乘方后，展开始终各项的系数。如： (a+b)^1=a^1+b^1 (a+b)^2=a^2+2ab+b^2 (a+b)^3=a^3+3a^2b+3ab^2+b^3 …… (a+b)^6=a^6+6a^5b+15a^4b^2+20a^3b^3+15a^2b^4+6ab^5+b^6（注意发现规律） …… 二项式展开式：","date":"2018-07-22","objectID":"/posts/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/:0:0","tags":["数学","杨辉三角"],"title":"杨辉三角","uri":"/posts/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"},{"categories":["ACM"],"content":"广度优先搜索（BFS） 广度优先搜索在进一步遍历图中顶点之前，先访问当前顶点的所有邻接结点。访问了就入队。 ","date":"2018-07-22","objectID":"/posts/dfs_bfs/:0:1","tags":["ACM","BFS","DFS","搜索","C","C++"],"title":"深搜广搜","uri":"/posts/dfs_bfs/"},{"categories":["ACM"],"content":"深度优先搜索（DFS） 深度优先搜索在搜索过程中访问某个顶点后，需要递归地访问此顶点的所有未访问过的相邻顶点。 #include \u003cbits/stdc++.h\u003e#define N 5 using namespace std; int maze[N][N] = {//无权有向图邻接矩阵 { 0, 1, 0, 1, 0 }, { 0, 0, 1, 0, 0 }, { 0, 0, 0, 0, 1 }, { 0, 0, 1, 0, 0 }, { 0, 0, 0, 0, 0 } }; int visited[N]; void DFS(int start) { cout \u003c\u003c start\u003c\u003c \" \"; visited[start] = 1; for (int i = 0; i \u003c N; i++) { if (!visited[i] \u0026\u0026 maze[start][i] == 1)//没访问过且为邻居节点 DFS(i); } } void BFS(int start){ queue\u003cint\u003e Q;//队列 Q.push(start); visited[start] = 1; while (!Q.empty()) { int front = Q.front();//头 cout \u003c\u003c front \u003c\u003c \" \"; Q.pop(); for (int i = 0; i \u003cN; i++) { if (!visited[i] \u0026\u0026 maze[front][i] == 1) { visited[i] = 1; Q.push(i); } } } } int main() { memset(visited,0,sizeof(visited)); for (int i = 0; i \u003c N; i++)//不连通的情况 { if (visited[i] == 1)//访问过 continue; DFS(i); } cout\u003c\u003cendl; memset(visited,0,sizeof(visited)); for (int i = 0; i \u003c N; i++)//不连通的情况 { if (visited[i] == 1)//访问过 continue; BFS(i); } return 0; } 传送门 ","date":"2018-07-22","objectID":"/posts/dfs_bfs/:0:2","tags":["ACM","BFS","DFS","搜索","C","C++"],"title":"深搜广搜","uri":"/posts/dfs_bfs/"},{"categories":["ACM"],"content":"时间限制：C/C++ 1秒，其他语言2秒 空间限制：C/C++ 262144K，其他语言524288K 64bit IO Format: %lld 题目描述 有一个长度为n的序列a，已知a[1]=a[n]=1，且对于2 \u003c= x \u003c= n，a[x] / a[x-1]是以下三个数字之一 [ 1，-2，0.5 ],问有多少种不同的序列满足题意。 两个序列不同当且仅当它们有至少一个位置上的数字不同，序列a可以为任何实数。 输入描述: 一个整数 表示n (1\u003c= n \u003c= 1e3) 输出描述: 一个整数 表示答案模109+7 示例1 输入 5 输出 7 解题思路： 整体来看，a[x] = a[x-1] * [1, -2, 0.5]，那么等于从n-1个[1,-2,0.5]中选出n-1个数值相乘（a[x-1]=a[x-2] * [1,-2,0.5]同理化简式子）， 最后答案要是1，所以-2就必须有偶数个，同理0.5的个数要等于-2.顺序无关. 那所有的转换中，就只要保证有若干组(-2,-2,0.5,0.5)存在 表示偶数个2的个数与偶数个0.5的个数组合；组合数用二项式系数，杨辉三角来求。 #include \u003cbits/stdc++.h\u003eusing namespace std; const int maxn = 1e3 + 5; const int mod = 1e9 + 7; long long c[maxn][maxn]; int main(){ for(int i = 0; i \u003c maxn; i++){//杨辉三角 c[i][0] = 1; c[i][i] = 1; for(int j = 1; j \u003c i; j++) c[i][j] = (c[i-1][j] + c[i-1][j-1]) % mod; } int n; while(~scanf(\"%d\", \u0026n)){ n--; long long ans = 0; for(int i = 0; i*2 \u003c= n; i += 2){ ans = (ans%mod + (c[n][i]*c[n-i][i])%mod)%mod; } printf(\"%lld\\n\", ans); } return 0; } ","date":"2018-07-18","objectID":"/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B18-%E5%BA%8F%E5%88%97/:0:0","tags":["组合数学","ACM","Nowcoder","C++","C"],"title":"Wannafly挑战赛18-序列","uri":"/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B18-%E5%BA%8F%E5%88%97/"},{"categories":["ACM"],"content":"弱鸡还是弱鸡啊最简单的背包问题——。——！ ","date":"2018-06-16","objectID":"/posts/%E7%AE%80%E5%8D%95%E8%83%8C%E5%8C%85/:0:0","tags":["背包问题","C"],"title":"简单背包","uri":"/posts/%E7%AE%80%E5%8D%95%E8%83%8C%E5%8C%85/"},{"categories":["ACM"],"content":"1) 问题描述: 假设有一个能装入总体积为T的背包和n件体积分别为W1，W2，···，Wn的物品，能否从n件物品中挑选若干件恰好装满背包，即使W1+W2+···+Wn=T，要求找出所有满足上述条件的解。例如：当T=10，共6件物品，物品的体积为{1，2，3，4，5，8}，那么可找到下列4组解：（1，2，3，4）、（1，4，5）、（2，3，5）、（2、8）。 ","date":"2018-06-16","objectID":"/posts/%E7%AE%80%E5%8D%95%E8%83%8C%E5%8C%85/:1:0","tags":["背包问题","C"],"title":"简单背包","uri":"/posts/%E7%AE%80%E5%8D%95%E8%83%8C%E5%8C%85/"},{"categories":["ACM"],"content":"2) 实现提示： 可利用回溯法的设计思想来解决背包问题。首先，将物品排成一列，然后顺序选取物品装入背包，假设已选取了前i件物品之后背包还没有装满，则继续选取第i+1件物品，若该件物品“太大”不能装入，则丢弃而继续选取下一件，直至背包装满为止。但如果在剩余的物品中找不到合适的物品以填满背包，则说明“刚刚”装入背包的那件物品“不合适”，应将它取出“丢弃一边”，继续再从“它之后”的物品中选取，如此重复，直至求得满足条件的解，或者无解。由于回溯求解的规则是“后进先出”，因此要用到栈。 使用栈作为该程序的数据结构，利用栈进行语法检查，以深度优先的搜索方式解空间，实现递归过程和函数的调用，在设计时还使用C语言的数组及其循环语言来实现程序。 运用回溯法解题，在搜索解空间树时，只要其左儿子节点是一个可行结点，搜索就进入左子树，在右子树中有可能包含最优解是才进入右子树搜索。否则将右子树剪去。 #include \u003cstdio.h\u003e#include \u003cwindows.h\u003e#define size 50 struct stacks { int data[size]; int top; } stack; void backpack(int number,int V,int w[]){ int i,j=1,k=0; int flag=0; do { while (V \u003e 0 \u0026\u0026 k \u003c= number) { if (V \u003e= w[k]) { stack.data[stack.top] = k;//第k个物品的体积下标 stack.top++; V -= w[k]; } k++; } if (V == 0) { flag=1; printf(\"第%d个符合条件的解：\", j); for (i = 0; i \u003c stack.top; i++) { printf(\"%d \", w[stack.data[i]]); } j++; printf(\"\\n\"); } //k满时回溯 k = stack.data[--stack.top]; stack.data[stack.top] = 0; V += w[k]; k++; } while (!(stack.top == 0 \u0026\u0026 k == number)); if(!flag){ printf(\"背包无解！\\n\"); } } void judge(int number,int V,int w[]){ int i,s = 0; for (i = 0; i \u003c number; i++) s = s + w[i]; if(V \u003e s){ printf(\"背包无解！\\n\"); exit(0); } if(V==s){ printf(\"只有一个符合条件的解：%d\\n\", V); exit(0); } } int main() { int w[size]; int V; int i = 0; int j = 0; int number; printf(\"\\t**简单背包问题**\\n\\n\"); printf(\"\\n请输入可供选择装入物品的个数：\\n\"); scanf(\"%d\", \u0026number); printf(\"\\n请输入各件物品的体积：\\n\"); for (i = 0; i \u003c number; i++) scanf(\"%d\", \u0026w[i]); //排序 for(i=0;i\u003cnumber;i++) for(j=i+1;j\u003cnumber;j++) if(w[i]\u003ew[j]){ w[i]=w[i]^w[j]; w[j]=w[i]^w[j]; w[i]=w[i]^w[j]; } printf(\"\\n请输入背包的总体积：\\n\"); scanf(\"%d\", \u0026V); while(V \u003c 0){ printf(\"输入背包体积错误！重新输入！\\n\"); scanf(\"%d\",\u0026V); } judge(number,V,w); //初始化栈 for (i = 0; i \u003c number; i++) stack.data[i] = 0; stack.top = 0; backpack(number,V,w); return 0; } --这么简单的问题我都费力，太辣鸡了 ","date":"2018-06-16","objectID":"/posts/%E7%AE%80%E5%8D%95%E8%83%8C%E5%8C%85/:2:0","tags":["背包问题","C"],"title":"简单背包","uri":"/posts/%E7%AE%80%E5%8D%95%E8%83%8C%E5%8C%85/"},{"categories":["生活随笔"],"content":"呃呃呃呃呃，今天四六级考试我昨天才知道，而就在昨天做计算机组成原理的课设接线的时候，我买了一个域名lruihao.cn 做完后实验后开开心心回到宿舍解析域名，实名认证什么，coding和github双部署什么的，在一切都完成后本打算享受地躺在床上欣赏一下自己的“杰作”的， 可是最后部署失败，作为小白的我，当然看不懂，然后又各种百度谷歌，翻博客，还是没有解决，于是乎我刚刚搞好的www.lruihao.cn 强势的显示出404错误， 额，因为我不知道原因的情况下一激动把coding托管的代码删除了，还好github上还有个备份，被自己的操作蠢哭。 搞到晚上11多还是没有解决，介于第二天四级考试，不舍地睡着了，当然也睡得很快hhhhh，确实有点累，中午没午休。。。今天7:30醒来准备好考试相关工具后，又搞了一下，还是无果，考试完，和女朋友吃了个饭，送到亲民后，我很快回到寝室继续研究，实在不懂，我做出一个大胆的决定，我打算重新搭hexo，然后我git，node，hexo 所有的东西都删了，简单暴力，重新来了一遍。。。 最后，写这篇流水账不是想说我有多牛逼，多无聊（不过好像是有点。。。），我只是想试试重装后能不能部署，这篇博客能不能发出去。。。。唉ε=(´ο｀* ))) ","date":"2018-06-16","objectID":"/posts/%E5%9B%9B%E5%85%AD%E7%BA%A7%E8%80%83%E8%AF%95/:0:0","tags":["生活随笔"],"title":"四六级考试","uri":"/posts/%E5%9B%9B%E5%85%AD%E7%BA%A7%E8%80%83%E8%AF%95/"},{"categories":["ACM"],"content":" 来自一位大佬的演讲 尊敬的领导、教练，亲爱的参赛选手们： 大家好，我是来自广东工业大学的tmk。今天很荣幸能够站在这里代表全体参赛选手发言，与大家分享我的经历和感受。 刚开始来到大学的时候，我一心向学，本着“好好学习，天天向上，为校争光，不搞对象”的信念，想在大学一展宏图。因为高中OI的挫败，我在刚上大学的时候就选择了ACM这条“不归路”。一开始是因为高中的遗憾，到后来就完全是因为信念和兴趣慢慢一直搞到现在。当时的我还不知道踏上ACM这条路的苦，而如今的我却也尝到了ACM带给我的乐。 在这三年里，有数不清的夜晚，我的舍友们在寝室里开黑，而我和我的队友在机房里开黑；在这三年里，有数不清的周末，我的舍友们在校园里驰骋，而我和我的队友在题库里驰骋；在这三年里，有数不清的假期，我的舍友们在召唤师峡谷里征战，而我和我的队友在中国各省市征战。三年过去了，我的舍友们成为了offer收割机，而我和我的队友成为了气球收割机。 为了变强是一个痛苦且漫长的过程，只有耐得住寂寞，才能守得住繁华。我的一位队友为了变强甚至牺牲了自己的头发，仅仅是因为他担心他的头发阻碍了他思维的发散。他变秃了也变强了。 三年的 ACM 让我成长很多，收获很多。我也从一个“好好学习天天向上为校争光不搞对象”的无知青年变成了一个写的了工程查得出异常的准程序员。我觉得三年献身于ACM的日子是值得的，和一大堆萌萌的男孩子们在屋子里面一个又一个通宵奋斗的酣畅淋漓的日子是值得的，看着谈恋爱的大家一会儿哀伤一会儿忧愁而我与代码自得其乐矢志不渝的日子是值得的。此外他还给我带来两个最好的小伙伴，是他们的一路陪伴，让我有勇气一直走下去。我和他们走过的地方，比我和女朋友去过的地方还要多。噢，对了，我好像没有女朋友。总而言之，请珍惜你们的队友，他们是你们在大学里为数不多一起奋斗的小伙伴。希望大家像我一样，也爱着ACM，为自己心爱的努力。 最后预祝各位参赛选手们取得理想的成绩，也预祝本次大赛圆满成功。谢谢大家。 ","date":"2018-06-15","objectID":"/posts/18%E6%B9%98%E6%BD%AD%E9%82%80%E8%AF%B7%E8%B5%9B%E9%98%9F%E5%91%98%E4%BB%A3%E8%A1%A8%E5%8F%91%E8%A8%80/:0:0","tags":["ACM","2018湘潭邀请赛"],"title":"18湘潭邀请赛参赛队员代表发言","uri":"/posts/18%E6%B9%98%E6%BD%AD%E9%82%80%E8%AF%B7%E8%B5%9B%E9%98%9F%E5%91%98%E4%BB%A3%E8%A1%A8%E5%8F%91%E8%A8%80/"},{"categories":["ACM"],"content":"题目链接（hdu复赛） 2018年湘潭邀请赛，在湘大举行，当时一起打的过去的，因为没出市就方便点。第一次参加现场赛，首先反省一下自己，比赛前算法先不说(没有好好搞过)，就连普通的题，数学性质的题都很少刷，什么都不会，然后英语不说四六级的东西，很多专业英语词汇都没有好好了解过，主要的原因还是刷题刷少了，英文题刷少了。理所当然，成功拿下一铁，湘潭赛打铁告终。 比赛开始，这次是三个人没人一份纸质题目，拿到题目，看最后一题，k.2018发现可以做，(事实证明确实是一道水题)，我就在做这题，他们看了a题，好像是k题一顿操作后提交，错了，一直到比赛结束都没做出来，后来回去看别人的题解，发现自己情况没有分析全面，其实是完全可以解出来的，真的做的太少太少了。a题最后也是没过，还有一个f题，sort，我最初的想法是用stl里的那个sort排序，只要对sort的compare函数做处理应该可以完成排序，比赛之前我看过，但是不熟悉，zxm她也看了我就交给她了，最后好像因为爆long double的问题也没做出来。 哎，菜还是菜，很多算法都不懂，数据结构也没学好，很有一段时间我都特别头疼算法，不想学，费劲，觉得自己不适合学计算机，更不适合ACM。有时候又想，不适合好像总是loser的借口！总是在后悔和偷懒的矛盾中！ 最后，放上，“参赛奖\"羞辱自己，也是鞭策！ ","date":"2018-06-14","objectID":"/posts/18%E6%B9%98%E6%BD%AD%E9%82%80%E8%AF%B7%E8%B5%9B%E6%80%BB%E7%BB%93/:0:0","tags":["ACM","2018湘潭邀请赛","总结"],"title":"18湘潭邀请赛总结","uri":"/posts/18%E6%B9%98%E6%BD%AD%E9%82%80%E8%AF%B7%E8%B5%9B%E6%80%BB%E7%BB%93/"},{"categories":["ACM"],"content":"Sample Input 2 1 1 1 1 1 2 2 1 1 2 1 1 1 3 1 3 1 2 2 1 3 1 1 ","date":"2018-06-14","objectID":"/posts/f-sorting/:1:0","tags":["2018湘潭邀请赛","ACM"],"title":"F.sorting","uri":"/posts/f-sorting/"},{"categories":["ACM"],"content":"Sample Output 2 1 1 2 1 2 3 题意：给定n个元组(a1,b1,c1),(a2,b2,c2),…,(an,bn,cn)，将其按(ai+bi)/(ai+bi+ci)的值从小到大排序，输出排序后的n个元组的原序号； 思路：编写sort里的cmp函数(形参为元组结构体元素，设为Tuple x,Tuple y)，若直接算出(x.a+x.b)(y.a+y.b+y.c)和(y.a+y.b)(x.a+x.b+x.c)再比较大小，这两个结果会爆unsigned long long； 可以把因式乘积展开成多项式的和，约去两式中相同的项，得到x.ay.c+x.by.c和y.ax.c+y.bx.c，因此只需计算它俩再比较即可，结果不会爆unsigned long long 后AC代码 #include \"bits/stdc++.h\"using namespace std; struct node{ long double a,b,c; int numb; }ss[1005]; bool cmp(const node \u0026a,const node \u0026b){ long double suma,sumb; //suma=a.a*b.c+a.b*b.c; //sumb=b.a*a.c+b.b*a.c; suma=(a.a+a.b)/(a.a+a.b+a.c); sumb=(b.a+b.b)/(b.a+b.b+b.c); if(suma!=sumb)return suma\u003csumb; return a.numb\u003cb.numb; } int main(){ int n; while(cin\u003e\u003en){ for(int i=0;i\u003cn;i++){ cin\u003e\u003ess[i].a\u003e\u003ess[i].b\u003e\u003ess[i].c; ss[i].numb=i+1; } stable_sort(ss,ss+n,cmp); int i; for(i=0;i\u003cn-1;i++) cout\u003c\u003css[i].numb\u003c\u003c\" \"; cout\u003c\u003css[i].numb\u003c\u003cendl; } return 0; } ","date":"2018-06-14","objectID":"/posts/f-sorting/:2:0","tags":["2018湘潭邀请赛","ACM"],"title":"F.sorting","uri":"/posts/f-sorting/"},{"categories":["ACM"],"content":"B. Higher h-index The h-index of an author is the largest h where he has at least h papers with citations not less than h. Bobo has no papers and he is going to publish some subsequently. If he works on a paper for x hours, the paper will get (a·x) citations, where a is a known constant. It’s clear that x should be a positive integer. There is also a trick – one can cite his own papers published earlier. Given Bobo has n working hours, ﬁnd the maximum h-index of him. ","date":"2018-06-14","objectID":"/posts/b-higher/:1:0","tags":["ACM","2018湘潭邀请赛","C++","C"],"title":"B.Higher h-index","uri":"/posts/b-higher/"},{"categories":["ACM"],"content":"Input The input consists of several test cases and is terminated by end-of-ﬁle. Each test case contains two integers n and a. ","date":"2018-06-14","objectID":"/posts/b-higher/:1:1","tags":["ACM","2018湘潭邀请赛","C++","C"],"title":"B.Higher h-index","uri":"/posts/b-higher/"},{"categories":["ACM"],"content":"Output For each test case, print an integer which denotes the maximum h-index. ","date":"2018-06-14","objectID":"/posts/b-higher/:1:2","tags":["ACM","2018湘潭邀请赛","C++","C"],"title":"B.Higher h-index","uri":"/posts/b-higher/"},{"categories":["ACM"],"content":"Constraint • 1≤ n ≤109 • 0≤ a ≤ n • The number of test cases does not exceed 104. ","date":"2018-06-14","objectID":"/posts/b-higher/:1:3","tags":["ACM","2018湘潭邀请赛","C++","C"],"title":"B.Higher h-index","uri":"/posts/b-higher/"},{"categories":["ACM"],"content":"Sample Input 3 0 3 1 1000000000 1000000000 ","date":"2018-06-14","objectID":"/posts/b-higher/:1:4","tags":["ACM","2018湘潭邀请赛","C++","C"],"title":"B.Higher h-index","uri":"/posts/b-higher/"},{"categories":["ACM"],"content":"Sample Output 1 2 1000000000 ","date":"2018-06-14","objectID":"/posts/b-higher/:1:5","tags":["ACM","2018湘潭邀请赛","C++","C"],"title":"B.Higher h-index","uri":"/posts/b-higher/"},{"categories":["ACM"],"content":"Note For the ﬁrst sample, Bobo can work 3 papers for 1 hour each. With the trick mentioned, he will get papers with citations 2,1,0. Thus, his h-index is 1. For the second sample, Bobo can work 2 papers for 1 and 2 hours respectively. He will get papers with citations 1+1,2+0. Thus, his h-index is 2. 题意：给定n个小时，可以用其中x(1\u003c=x\u003c=n)个小时写一篇论文，那么这篇论文的\"既定\"引用数将会是x*a(a为给定正整数)；此外，已经写好的论文将会被其后写成的论文所引用，也就是说，这篇论文的总引用数将会是\"既定\"引用数+其后论文篇数；问在所有的写论文方案中(例如一种方案就是用n个小时写n篇论文，每篇论文各花1小时(可以得到这n篇论文的引用数))，h最大为多少(h的含义同上题)(每一种方案都对应着一个h，求这些h中的最大者) 思路：最优方案(即对应h值最大的方案)是平摊n小时写成n篇论文(证明未知)；此时n篇论文的引用数为a,a+1,a+2,…,a+n-1，引用数为a+i时，引用数大于等于它的论文有n-i篇，令a+i=n-i得i=(n-a)/2,所以h=a+(n-a)/2; 后AC代码 #include\u003ccstdio\u003e int main(){ int n,a; while(scanf(\"%d%d\",\u0026n,\u0026a)!=EOF){ printf(\"%d\\n\",a+(n-a)/2); } return 0; } ","date":"2018-06-14","objectID":"/posts/b-higher/:1:6","tags":["ACM","2018湘潭邀请赛","C++","C"],"title":"B.Higher h-index","uri":"/posts/b-higher/"},{"categories":["ACM"],"content":"A. Easy h-index The h-index of an author is the largest h where he has at least h papers with citations not less than h. Bobo has published many papers. Given a0,a1,a2,…,an which means Bobo has published ai papers with itations exactly i, ﬁnd the h-index of Bobo. ","date":"2018-06-14","objectID":"/posts/a-easy/:1:0","tags":["2018湘潭邀请赛","ACM","C++"],"title":"A.Easy h-index","uri":"/posts/a-easy/"},{"categories":["ACM"],"content":"Input The input consists of several test cases and is terminated by end-of-ﬁle. The ﬁrst line of each test case contains an integer n. The second line contains (n+1) integers a0,a1,…,an. ","date":"2018-06-14","objectID":"/posts/a-easy/:1:1","tags":["2018湘潭邀请赛","ACM","C++"],"title":"A.Easy h-index","uri":"/posts/a-easy/"},{"categories":["ACM"],"content":"Output For each test case, print an integer which denotes the result. ","date":"2018-06-14","objectID":"/posts/a-easy/:1:2","tags":["2018湘潭邀请赛","ACM","C++"],"title":"A.Easy h-index","uri":"/posts/a-easy/"},{"categories":["ACM"],"content":"Constraint • 1≤ n ≤2·105 • 0≤ ai ≤109 • The sum of n does not exceed 250,000. ","date":"2018-06-14","objectID":"/posts/a-easy/:1:3","tags":["2018湘潭邀请赛","ACM","C++"],"title":"A.Easy h-index","uri":"/posts/a-easy/"},{"categories":["ACM"],"content":"Sample Input 1 1 2 2 1 2 3 3 0 0 0 0 ","date":"2018-06-14","objectID":"/posts/a-easy/:1:4","tags":["2018湘潭邀请赛","ACM","C++"],"title":"A.Easy h-index","uri":"/posts/a-easy/"},{"categories":["ACM"],"content":"Sample Output 1 2 0 题意：给定被引用次数为0~n的论文分别有几张，找到最大的h，满足被引用次数大于等于h的论文至少有h张 思路：在区间[0,n]内二分答案；或直接从n~0遍历找到第一个满足条件的h 后AC代码 #include \"bits/stdc++.h\"using namespace std; int main(){ int a[200005]; int n; int i; while(cin\u003e\u003en){ for(i=0;i\u003c=n;i++) cin\u003e\u003ea[i]; int sum=a[n]; for(i=n;i\u003e=0;){ if(sum\u003e=i){ cout\u003c\u003ci\u003c\u003cendl; break; } else sum+=a[--i]; } if(i\u003c0) cout\u003c\u003c\"0\"\u003c\u003cendl; } return 0; } ","date":"2018-06-14","objectID":"/posts/a-easy/:1:5","tags":["2018湘潭邀请赛","ACM","C++"],"title":"A.Easy h-index","uri":"/posts/a-easy/"},{"categories":["ACM"],"content":"sort使用#include\u003calgorithm\u003e头文件， sort(开始地址，结束地址，排序方式)，其中第三参数可以没有，则默认为升序排序。 或者简单的用 less\u003c参数类型\u003e()表示升序 greater\u003c参数类型\u003e()表示降序 也可以用一个bool型函数，比如： bool cmp(int a,int b){ return a\u003eb;//表从大到小，即降序 } 假设自己定义了一个结构体node typedef struct node { int a; int b; double c; }note; 有一个node类型的数组node arr[100]，想对它进行排序：先按a值升序排列，如果a值相同，再按b值降序排列，如果b还相同，就按c降序排列。就可以写这样一个比较函数： 以下是代码片段： bool cmp(node x,node y) { if(x.a!=y.a) return x.a\u003cy.a; if(x.b!=y.b) return x.b\u003ey.b; return x.c\u003ey.c; } sort()函数是完全通用的，你可以用它来操作几乎任何数据集合，包括链表，容器和数组，数组类型可以是int,char等。 实例:先降序再升序 #include\u003ciostream\u003e #include\u003calgorithm\u003e using namespace std; typedef struct data{ int a; double b; }date; bool cmp(date a,date b){ if(a.b!=b.b) return a.b\u003eb.b; return a.a\u003cb.a; } int main(){ date a[3]={{5,56.5},{4,56.5},{8,85}}; sort(a,a+3,cmp); for(int i=0;i\u003c3;i++) cout\u003c\u003ca[i].a\u003c\u003c\"-\"\u003c\u003ca[i].b\u003c\u003cendl; cout\u003c\u003cendl; return 0; } 传送门 ","date":"2018-06-14","objectID":"/posts/sort%E6%8E%92%E5%BA%8F/:0:0","tags":["C++","sort","STL","ACM"],"title":"sort排序","uri":"/posts/sort%E6%8E%92%E5%BA%8F/"},{"categories":["ACM"],"content":"1.swap（交换两元素值，在algorithm下，用法：swap(a,b);） 交换两元素的值在C语言课上作为指针讲解的典例。 int a=1,b=2; swap(a,b); //此时a=2,b=1 (可以是其他类型) ","date":"2018-06-14","objectID":"/posts/c-with-stl/:1:0","tags":["ACM","STL","C++"],"title":"C++ with STL","uri":"/posts/c-with-stl/"},{"categories":["ACM"],"content":"2.sort(,,) sort排序是不稳定的，stl中的stable_sort才是稳定的 inta[10]={1,6,2,3,5,4,3,8,9,7}; stable_sort(a,a+10,greater\u003cint\u003e()); for(int i=0;i\u003c10;i++) cout\u003c\u003ca[i]\u003c\u003c\" \"; ","date":"2018-06-14","objectID":"/posts/c-with-stl/:2:0","tags":["ACM","STL","C++"],"title":"C++ with STL","uri":"/posts/c-with-stl/"},{"categories":["ACM"],"content":"3.reverse（翻转序列，在algorithm下） //常用在字符串上 int a[5]={1,2,3,4,5}; reverse(a,a+5); //序列现在是 5 4 3 2 1 char s[]=“ericxie”; reverse(s,s+strlen(s)); //序列现在是 “eixcire” //同样适用于string string s=“qwer”; reverse(s.begin(),s.end()); ","date":"2018-06-14","objectID":"/posts/c-with-stl/:3:0","tags":["ACM","STL","C++"],"title":"C++ with STL","uri":"/posts/c-with-stl/"},{"categories":["ACM"],"content":"4.min，max（取大，取小） int a=1,b=2,c; c=min(a,b); //此时c等于1 c=max(a,b); //此时c等于2 string s=“qwer”,d=“asjk”,c; c=min(s,d); //c=“asjk” ","date":"2018-06-14","objectID":"/posts/c-with-stl/:4:0","tags":["ACM","STL","C++"],"title":"C++ with STL","uri":"/posts/c-with-stl/"},{"categories":["ACM"],"content":"5.__gcd（最大公约数） 手写gcd函数也行，辗转相除，辗转相减； int gcd(int a,int b){ return a%b ? b : gcd(b,a%b); } //直接用 int a=4,b=6; int c=__gcd(a,b); //注意下划线，此时c等于2 ","date":"2018-06-14","objectID":"/posts/c-with-stl/:5:0","tags":["ACM","STL","C++"],"title":"C++ with STL","uri":"/posts/c-with-stl/"},{"categories":["ACM"],"content":"6.lower_bound和upper_bound（二分查找） lower_bound意思就是：找到第一个位置，使得：如果在这个位置插入value后，原有序序列依旧有序。 upper_bound是找到最后一个符合数位置后一个位置，使得：如果在这个位置插入value后，原有序序列依旧有序。 //数组 int a[8]={1,2,4,4,9,12,12,15}; int pos1 = lower_bound(a,a+8,4)-a; int pos2 = upper_bound(a,a+8,4)-a-1; //在这个样例下pos1!=pos2;pos1=2;pos2=3; 根据我的理解lower_bound(a,a+8,value) 得到的是一个地址，拿这个地址减去数组首地址a[0]，那么刚好就是value应该放入的位置。 //vector vector\u003cint\u003e a; 若a中目前的元素也是{1,2,4,4,9,12,12,15}; 那么这里用lower_bound得到的应该也是一个类似于指针的东西，为什么不叫它指针呢？因为他有了一个名字，叫做迭代器。 vector\u003cint\u003e::iterator it; it = lower_bound(a.begin(),a.end(),4); //这里的it就是迭代器，那么* it就是该下标对应的value了。 //set集合 set\u003cint\u003e a; set\u003cint\u003e::iterator it; it = a.lower_bound(value); ","date":"2018-06-14","objectID":"/posts/c-with-stl/:6:0","tags":["ACM","STL","C++"],"title":"C++ with STL","uri":"/posts/c-with-stl/"},{"categories":["ACM"],"content":"7.next_permutation （排列） bool next_permutation( iterator start, iterator end );通常用于生成序列的全排列。用之前先保证有序； int a[]={1,2,3}; do{ for(int i=0;i\u003c3;i++) cout\u003c\u003ca[i]\u003c\u003c\" \"; cout\u003c\u003cendl; }while(next_permutation(a,a+3)); 结果为： 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 string str=\"STL\"; sort(str.begin(), str.end()); do{ cout \u003c\u003c str \u003c\u003c endl; }while (next_permutation(str.begin(),str.end()))； 结果： LST LTS SLT STL TLS TSL 大数据c比c++效率高 int length; char str[MAX]; gets(str); length = strlen(str); sort(str, str + length); do{ puts(str); }while(next_permutation(str, str+length))； ","date":"2018-06-14","objectID":"/posts/c-with-stl/:7:0","tags":["ACM","STL","C++"],"title":"C++ with STL","uri":"/posts/c-with-stl/"},{"categories":["ACM"],"content":"8.unique （去重） 如何把序列 a 中的重复元素去除呢？首先需要对原序列 a 进行排序，保证有序后，调用unique(a.head , a.tail )就可以了。unique会返回一个类似指针的东西（和lower_bound有点像），-a后表示去重之后序列的长度。 下面是实例。 int a[]={1,3,5,7,9,2,2,2,1,1,1}; sort(a,a+11); int len = unique(a,a+11)-a; for(int i=0;i\u003clen;i++) cout\u003c\u003ca[i]\u003c\u003c\" \"; 输出结果为：1 2 3 5 7 9 传送门 ","date":"2018-06-14","objectID":"/posts/c-with-stl/:8:0","tags":["ACM","STL","C++"],"title":"C++ with STL","uri":"/posts/c-with-stl/"},{"categories":["others"],"content":"1. \u0026运算 \u0026运算通常用于二进制取位操作，例如一个数 \u0026 1的结果就是取二进制的最末位。这可以用来判断一个整数的奇偶，二进制的最末位为0表示该数为偶数，最末位为1表示该数为奇数. ","date":"2018-06-14","objectID":"/posts/%E4%BD%8D%E8%BF%90%E7%AE%97/:1:0","tags":["位运算"],"title":"位运算","uri":"/posts/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"categories":["others"],"content":"2. |运算 |运算通常用于二进制特定位上的无条件赋值，例如一个数or 1的结果就是把二进制最末位强行变成1。如果需要把二进制最末位变成0，对这个数| 1之后再减一就可以了，其实际意义就是把这个数强行变成最接近的偶数。 ","date":"2018-06-14","objectID":"/posts/%E4%BD%8D%E8%BF%90%E7%AE%97/:2:0","tags":["位运算"],"title":"位运算","uri":"/posts/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"categories":["others"],"content":"3. ^运算 ^运算通常用于对二进制的特定一位进行取反操作，因为异或可以这样定义：异或0都不变，异或1则取反。 ^运算的逆运算是它本身，也就是说两次异或同一个数最后结果不变，即a ^ b ^ b = a。^运算可以用于简单的加密，比如你想对你MM说1314520，但怕别人知道，于是双方约定拿你的生日19880516作为密钥。1314520^19880516 = 20665500，你就把20665500告诉MM。MM再次计算20665500 ^ 19880516的值，得到1314520，于是她就明白了你的企图。 还可以用异或来进行快速地交换数据， a=2;b=3;//先转化成二进制 a=a^b; b=a^b; a=a^b; 操作后a=3;b=2; ","date":"2018-06-14","objectID":"/posts/%E4%BD%8D%E8%BF%90%E7%AE%97/:3:0","tags":["位运算"],"title":"位运算","uri":"/posts/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"categories":["others"],"content":"4. ~ 运算 ~运算的定义是把内存中的0和1全部取反。使用~运算时要格外小心，你需要注意整数类型有没有符号。如果~的对象是无符号整数（不能表示负数），那么得到的值就是它与该类型上界的差，因为无符号类型的数是用$0000到$FFFF依次表示的。 ","date":"2018-06-14","objectID":"/posts/%E4%BD%8D%E8%BF%90%E7%AE%97/:4:0","tags":["位运算"],"title":"位运算","uri":"/posts/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"categories":["others"],"content":"5. «运算 a « b就表示把a转为二进制后左移b位（在后面添b个0）。例如100的二进制为1100100，而110010000转成十进制是400，那么100 «2 = 400。可以看出，a « b的值实际上就是a乘以2的b次方，因为在二进制数后添一个0就相当于该数乘以2。 通常认为a « 1比a * 2更快，因为前者是更底层一些的操作。因此程序中乘以2的操作请尽量用左移一位来代替。 定义一些常量可能会用到«运算。你可以方便地用1 «16 – 1来表示65535。很多算法和数据结构要求数据规模必须是2的幂，此时可以用«来定义Max_N等常量。 ","date":"2018-06-14","objectID":"/posts/%E4%BD%8D%E8%BF%90%E7%AE%97/:5:0","tags":["位运算"],"title":"位运算","uri":"/posts/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"categories":["others"],"content":"6. »运算 和«相似，a » b表示二进制右移b位（去掉末b位），相当于a除以2的b次方（取整）。我们也经常用» 1来代替div 2，比如二分查找、堆的插入操作等等。想办法用»代替除法运算可以使程序效率大大提高。最大公约数的二进制算法用除以2操作来代替慢得出奇的mod运算，效率可以提高60% 传送门 原文:http://www.matrix67.com/blog/archives/263 ","date":"2018-06-14","objectID":"/posts/%E4%BD%8D%E8%BF%90%E7%AE%97/:6:0","tags":["位运算"],"title":"位运算","uri":"/posts/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"categories":["others"],"content":" 本文来自kio对Markdown的基础教程 其他推荐参考：https://segmentfault.com/markdown Markdown主张使用最简单的符号来控制格式，兼顾易读易写特性，让你可以专注在文本创作上。 这篇文章旨在让你通过大约三分钟来快速掌握Markdown的基本用法。 ","date":"2018-06-10","objectID":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/:0:0","tags":["Markdown"],"title":"Markdown基础教程","uri":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"},{"categories":["others"],"content":"在开始之前，需要特别注意的点 通常，格式控制符号与文本内容需要保留一个空格 段落之间需要空格一行 ","date":"2018-06-10","objectID":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/:1:0","tags":["Markdown"],"title":"Markdown基础教程","uri":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"},{"categories":["others"],"content":"标题 在书写中，标题是最常用的格式，Markdown中，通过在文本前加上 # 即可，同时，根据#的数量可以可以划分为二级标题、三级标题、四级标题…一共六级。 一级标题 ","date":"2018-06-10","objectID":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/:2:0","tags":["Markdown"],"title":"Markdown基础教程","uri":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"},{"categories":["others"],"content":"二级标题 ","date":"2018-06-10","objectID":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/:3:0","tags":["Markdown"],"title":"Markdown基础教程","uri":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"},{"categories":["others"],"content":"三级标题 四级标题 五级标题 六级标题 ","date":"2018-06-10","objectID":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/:3:1","tags":["Markdown"],"title":"Markdown基础教程","uri":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"},{"categories":["others"],"content":"列表 列表分为无序列表和有序列表，无序列表在文本前面加上 - 即可： 无序列表一 无序列表二 无序列表三 而有序列表仅需要在文本前面加上 1. 即可： 1. 有序列表一 2. 有序列表二 3. 有序列表三 有序列表一 有序列表二 有序列表三 ","date":"2018-06-10","objectID":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/:4:0","tags":["Markdown"],"title":"Markdown基础教程","uri":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"},{"categories":["others"],"content":"引用 文本经常需要引入一些内容，包括他人的话等等。仅需要在文本前面加上 \u003e 即可： Kio•纯粹写字 ","date":"2018-06-10","objectID":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/:5:0","tags":["Markdown"],"title":"Markdown基础教程","uri":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"},{"categories":["others"],"content":"文字修饰 为了表达的抑扬顿挫，需要使用到粗体、斜体、删减体等来表明重点，其中用一个 * 号包围起来的文字为斜体，用 ** 包围起来的文字为粗体，而使用 ~~ 包围起来的文字为删减体： 斜体 粗体 删减体 ","date":"2018-06-10","objectID":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/:6:0","tags":["Markdown"],"title":"Markdown基础教程","uri":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"},{"categories":["others"],"content":"段落分隔符 通过 --- 即可以添加段落分割线： ","date":"2018-06-10","objectID":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/:7:0","tags":["Markdown"],"title":"Markdown基础教程","uri":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"},{"categories":["others"],"content":"链接及图片 另外一篇博文 链接和图片可以为文章润色不少，通过 [描述](地址)既可以添加链接，而在其前面添加一个 ! 号即为添加图片， 具体为: [百度](https://www.baidu.com) ![Kio Logo](http://oss.blurme.idik.net/artemis/image/logo.png) ","date":"2018-06-10","objectID":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/:8:0","tags":["Markdown"],"title":"Markdown基础教程","uri":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"},{"categories":["others"],"content":"表格 |英文|解释|备注| |:-:|:--|--:| |Book|书| | |Hello|你好| | |World|世界|world| 英文 解释 备注 Book 书 Hello 你好 World 世界 world 这样即可自动生成表格，第二行为内容对准格式，第一格表示内容居中，第二格表示居左，第三格表示居右。 ","date":"2018-06-10","objectID":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/:9:0","tags":["Markdown"],"title":"Markdown基础教程","uri":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"},{"categories":["others"],"content":"插入高亮代码 如果你需要插入一些代码，Markdown也可以帮你自动高亮，包括行内高亮和代码块高亮，行内高亮仅需要使用 内容 包围起来即可。 代码块高亮 至此，写作中需要用到的控制符已经介绍完毕了，Kio提供的所见即所得Markdown支持和便捷的输入辅助能帮助你快速掌握这一密术 :] ","date":"2018-06-10","objectID":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/:10:0","tags":["Markdown"],"title":"Markdown基础教程","uri":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"},{"categories":["others"],"content":"移动端写作工具 Kio：密码99o4可以导出PDF，md文件 markdownx：密码a5n4 SM.MS图床：密码ch0v 若链接失效还可以去酷安上下载。 ","date":"2018-06-10","objectID":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/:11:0","tags":["Markdown"],"title":"Markdown基础教程","uri":"/posts/markdown%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"},{"categories":["生活随笔"],"content":"从此故乡只有冬夏，再无春秋。","date":"2018-06-03","objectID":"/posts/%E6%88%8F%E5%AD%90%E6%98%A5%E7%A7%8B/","tags":["生活随笔"],"title":"戏子春秋","uri":"/posts/%E6%88%8F%E5%AD%90%E6%98%A5%E7%A7%8B/"},{"categories":["生活随笔"],"content":" 从此故乡只有冬夏，再无春秋。  时间急促得仿佛还在昨天，还没有清楚地认识到这句话的其中含义时，我早已离开它，远去。 　自此，一江绿水东去，桃花竞开，春洒满园；瑟瑟秋风里，稻谷黄时，落木萧萧；故乡的春秋成为回忆尘封在我的脑海深处。 　三月，这里和故乡一样雨下得缠绵，却尽带着他乡的味道。在不是滋润自己的那方水土上，哪怕是喜雨之人，亦只有料峭的寒意。雨下到这里才懂得，为何古来才子佳人逢阴雨连绵天总是带着一股莫名的惆怅。原是这般由头！我与他们，并无二般，想起故乡来。 　故乡的春是在牛耕上的。太爷说，老牛伏在岸边饮水时节就是春耕了。到那时，耕牛头角披红挂彩，鼻挂铜色大铃，以祈愿今年平安，田地丰收；当耕牛喘着鼻息，缓缓地哞哞叫着走下田，是其在田地里大展身手的机会。故而，二月春耕总是会见到红布条装扮的水牛在田间劳作，彩带飘逸，好生招摇，尤其是农夫哼起那极具故乡气息的耕牛民歌，如高山流水般，伴着清脆的铜铃声隐隐飘去……在春末，三月桃花尽开，漫山望去，粉红红一片，甚是好看。小时看到总以为身处仙山，而后来，陶渊明一篇《桃花源记》就以为自己是那秦时避乱而住在桃花源中的后人。每每与外人谈起家乡的桃花山时，必然是一副神气十足的傲气样子。我想，这也是自己不知不觉中受家人影响，又倾心桃花的缘故吧。 　印象中，家里人都爱这漫山遍野的桃花。太爷爱赏花，山上桃花开得极好的时候，便移栽了数株桃花留在了院子里，天好天坏，都能观赏上好一会儿。太婆还在的时候，桃花次第开，她就会拾掇许多桃花下来做成桃花糕，那桃花糕香香糯糯的味道飘散四周，总能把我馋来。后来，太婆故去，奶奶学着太婆开始做起了桃花糕，却总是没有太婆做的如意。但奶奶的桃花酒，受到父辈们的一致好评。每当酒坛从土里挖出，揭开红布，酒气便带着桃花的香甜扑鼻而来。父辈们在太爷种的桃花树下把酒话桑麻，颇有一副桃花坞里桃花庵，桃花庵里桃花仙的样子。现如今记忆远去，酒香却长留下来，记起时，那酒酣甜得喜人。 　故乡的秋从九月农收渐起，那时候一家老小在浓浓的秋意里忙忙碌碌，直至十月方才得些许闲暇日子。 　稻谷黄时，是秋最盛的时候。父辈们清晨便出发去地里收稻谷。晌午，我兴起与祖母前去送饭。正午的太阳烈得很，父辈们大颗大颗的汗直往下掉，稻谷机嘈杂得很。这才想起太爷教我的诗，“妇姑荷箪食，童稚携壶浆”，就是这样的情景无差。那时候不懂得父辈的辛苦，只知奔入山间，捕捉蚱蜢，蛐蛐等趣物。等傍晚将近，坐在板车谷袋上，兴尽而回，一天就算结束。渐渐长大，再也不敢胡闹，不知是童趣少了还是知了人事愈发迷惘了？ 　窗外又下起雨，心里竟也惆怅起来。并非是洗过的衣服久晾未干，而是伴着那股湿意而来，藏在雨里的那点点乡愁。这边的桃花也开得好，往窗外，密密一片，不免想起了太爷书房里的书画：花是春时花，却非故乡花。人是故乡人，却是他乡客。所见时，不过是从戏子变成看客了罢。 ","date":"2018-06-03","objectID":"/posts/%E6%88%8F%E5%AD%90%E6%98%A5%E7%A7%8B/:0:0","tags":["生活随笔"],"title":"戏子春秋","uri":"/posts/%E6%88%8F%E5%AD%90%E6%98%A5%E7%A7%8B/"},{"categories":["生活随笔"],"content":"一直觉得中国古代神话 能称得上传奇的只有两个人物： 一是猴子 一是哪吒 百世蕴灵育出只石猴 大闹天宫腾云驾雾 三年怀胎生了个哪吒 东海屠龙翻江倒海 可以说 除了这两人 没人再能当得起离经放纵四个字的 但称得上悲剧的 约摸也只有这两个 一个五行山下压五百年 揭了封印 戴上金箍无悲无喜 拜佛西天 唤孙悟空 一个削肉还母剔骨还父 塑了莲身 站上火轮无怨无恨 封神南门 号三太子 这尘世最擅长的事 大抵就是抹杀疏狂者的落拓 磨平豪纵者的傲骨 斩灭叛世者的孤妄 ","date":"2018-05-31","objectID":"/posts/%E7%8C%B4%E5%AD%90%E4%B8%8E%E5%93%AA%E5%90%92/:0:0","tags":["生活随笔"],"title":"猴子与哪吒","uri":"/posts/%E7%8C%B4%E5%AD%90%E4%B8%8E%E5%93%AA%E5%90%92/"},{"categories":null,"content":" “每天早晨叫醒你的不是鬧鐘，而是你的夢想。” 我有過靠著這種信念撐下來的日子，我見過自己努力的樣子，至於現在的自己配不配得上當初努力的自己， 其實也不重要了，還望披荊斬棘，不改初心。 不怕萬人阻擋，只怕自己投降。你如何回憶，決定你是一個怎樣的人！ 從大一伊始，打 ACM 比賽，訓練刷題，再到毅然決然離開實驗室，選擇陌生的 Web 開發，從工作前的一無所知到，到前端開發，後端開發，到教實習生，到面試新人，到開始乏味。這一路走來，好奇心，探索欲，瞎擇騰，或許還有愛意，都是支撐我的動力。 時間並不會因為你的迷茫和遲疑而停留，就像你在看到這篇博客的時候，不知道有多少人正風雨兼程趕赴夢想。沒有誰生來就是神牛，千裏之行，始於足下！比自己優秀的人有很多，永遠不要感動自己，保持謙遜，沈澱自己，感謝每一個曾經努力的自己。不必執著於過去，也不必過度擔憂未來，望披荊斬棘，不忘初心。 最開始寫博客，是在打 ACM 的時候，深受一個學長的博客影響，他的博客是 hexo 搭建的，ID 是 [戎碼一生]，所以我也照葫蘆畫瓢用 hexo 搭建了一個，一用就是 3 年，博客名字原 “博採眾長” 改为 “菠菜眾長”，因為不能用成語作為網站名字，就這個原因。 直到 21 年下半年，升級 windows 11, 系統出了 BUG, 整理磁盤不小心把代碼刪掉了，就乾脆換成 hugo 了。 ","date":"2018-05-28","objectID":"/posts/hello-world/:0:0","tags":null,"title":"Hello World","uri":"/posts/hello-world/"}]