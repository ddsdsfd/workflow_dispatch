<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Git - 標籤 - 菠菜眾長</title><link>https://lruihao.cn/tags/git/</link><description>Git - 標籤 - 菠菜眾長</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1024@lruihao.cn (Lruihao)</managingEditor><webMaster>1024@lruihao.cn (Lruihao)</webMaster><lastBuildDate>Mon, 04 Oct 2021 23:46:49 +0800</lastBuildDate><atom:link href="https://lruihao.cn/tags/git/" rel="self" type="application/rss+xml"/><item><title>Git 常用指令汇总</title><link>https://lruihao.cn/posts/git/</link><pubDate>Tue, 30 Oct 2018 08:59:56 +0800</pubDate><author>作者</author><guid>https://lruihao.cn/posts/git/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/git/images/relation-1.png" referrerpolicy="no-referrer">
            </div><ul>
<li><strong>工作区</strong>：就是你在电脑里能看到的目录。</li>
<li><strong>暂存区</strong>：英文叫stage, 或index。一般存放在 &ldquo;.git目录下&rdquo; 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>
<li><strong>版本库</strong>：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li>
</ul>
<h1 id="介绍">介绍</h1>
<p>先通过几张图片来大致了解一下 Git 的工作原理吧！<br>
文章开头的流程图已经简单明了地说明了 Git 常用操作的工作流程，下图换种风格再展示一次：
</p>
<p>提到 Git 就会联想到 github, 下图从 Git 的角度简单说明了一些 Github 常用操作的关系：
</p>
<p>下面这个图则展示了工作区、版本库中的暂存区和版本库之间的关系：
</p>
<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 <code>&quot;index&quot;</code> 的区域是暂存区（stage, index），标记为 &ldquo;master&rdquo; 的是 master分支所代表的目录树。<br>
<strong>HEAD指针: 每个git仓库有且仅有一个HEAD指针，它通常指向當前某个活動的本地分支指针(最初本地仓库master)。也可以是某个提交记录、某个tag，但这会让其处于 detached HEAD（游离头）状态，此状态下的所有提交都无效。</strong><br>
图中我们可以看出此时 <code>&quot;HEAD&quot;</code> 实际是指向 master 分支的一个&quot;游标&quot;。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。<br>
图中的<code>objects</code>标识的区域为 Git 的对象库，实际位于 <code>&quot;.git/objects&quot;</code> 目录下，里面包含了创建的各种对象及内容。<br>
当对工作区修改（或新增）的文件执行 <code>&quot;git add&quot;</code>命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。<br>
当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。<br>
当执行 <code>&quot;git reset HEAD&quot;</code> 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。<br>
当执行 <code>&quot;git rm --cached &lt;file&gt;&quot;</code> 命令时，会直接从暂存区删除文件，工作区则不做出改变。<br>
当执行 <code>&quot;git checkout .&quot;</code> 或者 <code>&quot;git checkout -- &lt;file&gt;&quot;</code>   命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。<br>
当执行 <code>&quot;git checkout HEAD .&quot;</code> 或者 <code>&quot;git checkout HEAD &lt;file&gt;&quot;</code> 命令时，会用 <code>HEAD</code> 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p>
<h1 id="基本常用命令">基本常用命令</h1>
<blockquote>
<p>第一次使用git的时候，需要设置用户信息和用户邮箱，用于辨识提交者身份。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git config --global user.name &lt;git用户名&gt;
git config --global user.email &lt;邮箱地址&gt;
git config --list                           # 查看当前用户信息
</code></pre></td></tr></table>
</div>
</div><h2 id="基本操作">基本操作</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git init                    # 把当前的目录变成可以用git进行版本控制的git仓库，生成隐藏.git文件。
git add XX                  # 把xx文件添加到暂存区去。
git add –A                  # git add --all的缩写，添加全部到暂存区
git add –u                  # 把文件的删除和修改添加到暂存区（不包括新增）
git add .                   # 监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区
git commit -m &#34;message&#34;     # 从暂存区提交到本地仓库
git commit -a -m &#34;message&#34;  # 相当于省略git add，但是无法提交新增的文件
git push origin master      # Git会把master分支推送到远程库对应的远程分支上
</code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tips<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">&ldquo;commit message&quot;内容尽量规范！<br>
当某一次提交后，突然想起漏提交了文件，或不小心提交了不满意的代码时，<br>
可以使用<code>git commit --amend -m &quot;message&quot;</code>指令。它可以在不增加一个新的commit-id的情况下将新修改的代码追加到前一次的commit-id中。提交之后message也将被本次的message覆盖，所以还需要再次添加上次的message。</div>
        </div>
    </div>
<h2 id="push">push</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git push origin branch-name
git push –u origin master
git push origin --delete branch-name     # 删除远程分支
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>把当前master分支推送到远程库; <code>-u</code>表示记住分支和地址，下次使用<code>git push</code>即可。</p>
</blockquote>
<h2 id="remote">remote</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git remote add origin reposityUrl     # 关联一个远程库
git remote                            # 查看远程库的信息
git remote –v                         # 查看远程库的详细信息
</code></pre></td></tr></table>
</div>
</div><h2 id="clone">clone</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git clone reposityUrl                   # 从远程库中克隆
git clone -b branchName reposityUrl     # 克隆指定分支
</code></pre></td></tr></table>
</div>
</div><h2 id="pull">pull</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git pull
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>从远程仓库拉下来到本地库然后合并相当于<code>git fetch</code>+<code>git merge</code>。<br>
一般push前先拉去最新版本，避免代码冲突，如果有冲突需要解决了冲突才能提交。</p>
</blockquote>
<p><strong>import repositories同步更新</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git pull 原链接
git push origin master
</code></pre></td></tr></table>
</div>
</div><h2 id="fetch">fetch</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git fetch               # 从远程库抓下最新版本，但是不合并
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>fetch是从远程库到本地库，但是未在工作区，需要<code>git merge</code></p>
</blockquote>
<h2 id="merge">merge</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git merge dev           # 在当前的分支上合并dev分支
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>分支合并也是在本地完成(<strong>从本地库到工作区</strong>)，新的分支只有在合并后才允许被删除。<br>
如果分支合并是出现冲突需要解决了冲突才能合并，使用<code>git status</code>查看冲突文件。</p>
</blockquote>
<p></p>
<h2 id="branchcheckout">branch,checkout</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git branch            # 查看当前所有的分支
git branch name       # 创建分支
git branch –r         # 看远程所有分支
git branch –a         # 查看本地远程分支
git branch –d name    # 删除分支
git checkout name     # 切换分支
git checkout –b name  # 创建并切换到name分支上
git checkout -- file
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>git checkout -- file</code>相当于取消对文档的修改，将最新的本地版本库的本文件复制覆盖它。（比较危险！）</p>
</blockquote>
<h2 id="refloglog">reflog,log</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git log               # 显示所有提交过的版本信息：commit id，提交者，日期
git reflog            # 查看历史记录的commit id
</code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tips<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>想看到自己的操作记录，则可以使用log与reflog，它两个的区别如下:</p>
<ol>
<li><code>git log</code>命令可以显示所有提交过的版本信息；
如果感觉太繁琐，可以加上参数<code>--pretty=oneline</code>，只会显示版本号和提交时的备注信息。</li>
<li><code>git reflog</code>可以查看所有分支的所有操作记录。（包括已经被删除的commit记录和reset的操作）</li>
</ol>
</div>
        </div>
    </div>
<h2 id="reset">reset</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git reset --hard HEAD^        
git reset --hard HEAD~        # 回退到上一个版本
git reset --hard HEAD~100     # 回退到100个版本

git reset head -- file        # 不加file则全部退回  
git reset file                # 将本地仓库的当前版本退回至暂存区，相当于取消暂存
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>版本退回是从本地仓库到暂存区，如果已经提交远程库，此时的版本是低于最新的版本的会拒绝提交，
需要用<code>git push -f origin master</code>强制提交。</p>
</blockquote>
<div class="details admonition danger open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-skull-crossbones fa-fw"></i>特别提醒<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>如果你<code>git reset --hard HEAD^</code>+<code>git push -f origin master</code>执行完，github中的记录和本地文件都会回到退回的状态。<strong>简单来说就是一修改了一天的bug,完工后，你这一套操作直接打回原形。别慌（实际内心慌的一麻皮。。。）</strong></p>
<ol>
<li>通过<code>git log -g</code>命令来找到需要恢复的信息对应的commitid，可以通过提交的时间和记录来辨别,
找到执行<code>reset --hard</code>之前的那个commit对应的commit-id</li>
<li>通过<code>git branch recover_branch commit-id </code>来建立一个新的分支</li>
</ol>
<p><strong>这样，就把到commitid为止的代码、各种提交记录等信息都恢复到了recover_branch分支上了。</strong></p>
</div>
        </div>
    </div>
<h2 id="status">status</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git status
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>查看你的文件在暂存区和工作目录的状态，默认是较为详细的显示，并提示你可以用何种命令完成你接下来可能要做的事情。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git status -s
</code></pre></td></tr></table>
</div>
</div><p>较为简单的输出当前的状态，如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">$ git status -s
M  README.md
 D hello.rb
?? world.java
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>你可以看到，在简短输出中，有两栏。第一栏是暂存区的，第二栏则是工作目录的。这里表示：</p>
</blockquote>
<ul>
<li><code>README.md</code> 在暂存区中的状态是 <code>modify</code></li>
<li><code>hello.rd</code> 在工作目录中的状态是 <code>delete</code></li>
<li><code>world.java</code> 还未添加到版本控制。</li>
</ul>
<h2 id="diff">diff</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git diff XX         # 查看XX文件修改了哪些内容

git diff            # 工作目录和暂存区
git diff --cached   # 暂存区和本地仓库
git diff HEAD 	    # 工作目录和本地仓库
git diff --stat     # 显示信息摘要
</code></pre></td></tr></table>
</div>
</div><h2 id="rm-mv">rm, mv</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git rm                           # 将文件从暂存区和工作目录删除，-f 为强制删除
git rm filename                  # 删除文件
git rm –r dirname                # 删除文件夹 –r 表示递归所有子目录
git rm --cached &lt;path&gt;           # 将文件从暂存区中删除
git mv &lt;old_path&gt; &lt;new_path&gt;
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>git rm</code>用来删除文件、目录。<code>git mv</code>命令用于移动或重命名一个文件、目录。</p>
</blockquote>
<p>比如删除photos文件，本地删除后，远程仓库还会有，所以</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git rm -r photos
git commit -m &#34;删除相册&#34;
git push
</code></pre></td></tr></table>
</div>
</div><h2 id="submodule">submodule</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git submodule add         # 添加子模组

git submodule init        # 子模组初始化
git submodule update      # 子模组更新
</code></pre></td></tr></table>
</div>
</div><div class="details admonition Note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">当一个远程库有子模组时，直接clone子模组只是一个空文件夹，需要进入子模组的空文件夹<code>init</code>和<code>update</code>才行。
或者使用递归克隆<code>git clone --recursive 远程库</code><br>
子模组更新后，父模组必须更新，因为需要更新commit id。</div>
        </div>
    </div>
<h2 id="tag">tag</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git tag v1.0
git tag -a v1.0                   # 给最新一次提交打标签
git tag -a &lt;tagname&gt; -m &#34;标签&#34;    # 指定标签信息命令
git show &lt;tagname&gt;                # 显示标签信息
git tag                           # 查看版本打的Tag
git tag -d v1.0                   # 删除本地标签
git push origin :refs/tags/v1.0   # 删除远程标签
$ git push [remote] [tag]         # 提交指定tag
$ git push [remote] --tags        # 提交所有tag
</code></pre></td></tr></table>
</div>
</div><p><div class="details admonition Success open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">当你执行<code>git tag -a</code>命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。
如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</div>
        </div>
    </div>
例如，假设我们发布了提交85fc7e7(最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">$ git tag -a v0.9 85fc7e7
$ git log --oneline --decorate --graph
*   d5e9fc2 (HEAD -&gt; master) Merge branch &#39;change_site&#39;
|\  
| * 7774248 (change_site) changed the runoob.php
* | c68142b 修改代码
|/  
* c1501a2 removed test.txt、add runoob.php
* 3e92c19 add test.txt
* 3b58100 (tag: v0.9) 第一次版本提交
</code></pre></td></tr></table>
</div>
</div><h2 id="stash">stash</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git stash               # 把当前的工作隐藏起来，等以后恢复现场后继续工作
git stash list          # 查看所有被隐藏的文件列表
</code></pre></td></tr></table>
</div>
</div><h2 id="gitk">gitk</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">gitk                    # git自带GUI
gitk --all
</code></pre></td></tr></table>
</div>
</div><h1 id="githubgitea等平台issue的常用标签">github,gitea等平台issue的常用标签</h1>
<ul>
<li><code>bug</code> 描述的问题是一个bug</li>
<li><code>enhancement</code> 功能增强，没有feature也可以指 New feature or request</li>
<li><code>feature</code> 新功能</li>
<li><code>duplicate</code> 问题重复</li>
<li><code>invalid</code> 可用的，不是bug</li>
<li><code>question</code> 疑问，需要进一步的信息</li>
<li><code>wontfix</code> 不会修复此问题</li>
<li><code>help-wanted</code> 需要帮助</li>
<li><code>good first issue</code> Good for newcomers</li>
<li><a href="https://www.jianshu.com/p/48b935e36000" target="_blank" rel="noopener noreffer">更多标签</a></li>
</ul>
<h1 id="license">license</h1>
<p></p>
<h1 id="其他">其他</h1>
<ul>
<li><a href="https://blog.csdn.net/qq1332479771/article/details/56087333" target="_blank" rel="noopener noreffer">github上fork了别人的项目后，再同步更新别人的提交</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener noreffer">常用Git命令清单</a></li>
<li><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener noreffer">Gearn Git Branching</a></li>
</ul>]]></description></item><item><title>Hugo 使用 Github Actions 部署到 Github Pages 和 腾讯云cos桶</title><link>https://lruihao.cn/posts/github-actions/</link><pubDate>Mon, 04 Oct 2021 23:46:49 +0800</pubDate><author>作者</author><guid>https://lruihao.cn/posts/github-actions/</guid><description><![CDATA[<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>解決痛點<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Github Actions 真是靜態博客的福音，有了它 hugo, hexo 等博客構建過程可以丟給 Github 的服務器幫我們做了。<br>
也就是説實現了在線寫靜態博客的需求。</div>
        </div>
    </div>
<h2 id="準備">準備</h2>
<p>工作流程設計到兩個倉庫和一個 cos 桶，例如：</p>
<blockquote>
<ul>
<li>Lruihao/hugo-blog          # Blog source repository</li>
<li>Lruihao/lruihao.github.io  # Github pages repository</li>
<li>blog-1256932288            # COS bucket</li>
</ul>
</blockquote>
<h2 id="github-actions">Github Actions</h2>
<h3 id="創建-workflows-任務">創建 workflows 任務</h3>
<p>創建 <code>hugo-site/.github/workflows/deploy.yml</code>, 這個文件會寫一些命令告訴 Github 在我們提交源碼的時候，它要幫我們做哪些事情。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Auto Deploy hugo</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">push]</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">Explore-GitHub-Actions</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Check out repository code</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="l">recursive </span><span class="w"> </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">         </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="l">latest</span><span class="w">
</span><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Hugo static files</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy to Github Pages</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">deploy_key</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GP_DEPLOY_KEY }}</span><span class="w">
</span><span class="w">          </span><span class="nt">external_repository</span><span class="p">:</span><span class="w"> </span><span class="l">Lruihao/lruihao.github.io</span><span class="w">
</span><span class="w">          </span><span class="nt">publish_branch</span><span class="p">:</span><span class="w"> </span><span class="l">main</span><span class="w">
</span><span class="w">          </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span><span class="w">          </span><span class="nt">commit_message</span><span class="p">:</span><span class="w"> </span><span class="l">${{ github.event.head_commit.message }}</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install coscmd</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">sudo pip install coscmd</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Configure coscmd</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">COS_SECRET_ID</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.COS_SECRET_ID }}</span><span class="w">
</span><span class="w">          </span><span class="nt">COS_SECRET_KEY</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.COS_SECRET_KEY }}</span><span class="w">
</span><span class="w">          </span><span class="nt">COS_BUCKET_NAME</span><span class="p">:</span><span class="w"> </span><span class="l">blog-1256932288 </span><span class="w"> </span><span class="c"># Change for yourself</span><span class="w">
</span><span class="w">          </span><span class="nt">COS_BUCKET_REGION</span><span class="p">:</span><span class="w"> </span><span class="l">ap-chengdu    </span><span class="w"> </span><span class="c"># Change for yourself</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">coscmd config -a $COS_SECRET_ID -s $COS_SECRET_KEY -b $COS_BUCKET_NAME -r $COS_BUCKET_REGION</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy to COS Bucket</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">coscmd upload -r -s --delete -f public/ /</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="配置-github-pages-密鑰">配置 Github Pages 密鑰</h3>
<ol>
<li>為了讓 Lruihao/hugo-blog 提交代碼后自動部署到 Lruihao/lruihao.github.io, 需要生成一對 ssh key.
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">ssh-keygen -t rsa -b <span class="m">4096</span> -C <span class="s2">&#34;</span><span class="k">$(</span>git config user.email<span class="k">)</span><span class="s2">&#34;</span> -f gh-pages -N <span class="s2">&#34;&#34;</span>
<span class="c1"># You will get 2 files:</span>
<span class="c1"># gh-pages.pub (public key)</span>
<span class="c1"># gh-pages     (private key)</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>打開 Lruihao/hugo-blog 倉庫的 settings, 再点击 Secrets, 然後添加 private key, name 为 <code>GP_DEPLOY_KEY</code></li>
<li>打開 Lruihao/lruihao.github.io, 点击 Deploy keys, 添加 public key, name 隨意，<code>Allow write access</code> 一定要勾上，否則無法提交</li>
</ol>
<h3 id="配置-cos-密鑰">配置 COS 密鑰</h3>
<p>打開 Lruihao/hugo-blog 倉庫的 settings, 再点击 Secrets, 然後添加 COS 桶的 <code>secret_id</code> 和 <code>secret_key</code>:</p>
<ul>
<li>COS_SECRET_ID</li>
<li>COS_SECRET_KEY</li>
</ul>
<blockquote>
<p>至此，Github Pages 和 COS 都已經可以通過 Github Actions 自動部署了，有部署記錄后，<br>
打開 Lruihao/hugo-blog -&gt; Actions 可以看到構建過程和結果，構建失敗也會收到 Github 發給你的郵件。</p>
</blockquote>
<h2 id="cos-自動同步-備用">COS 自動同步 (備用)</h2>
<p>本小節內容和 Github Actions 無關，僅作為 COS 備用上傳方式。</p>
<ul>
<li>COSBrowser</li>
</ul>
<ol>
<li>下載 COS 官方軟件 COSBrowser</li>
<li>點開右上角 工具箱</li>
<li>選擇 文件同步</li>
<li>選擇 本地文件夹 eg. <code>hugo-site/public</code></li>
<li>選擇 存储桶目录</li>
<li>同步类型：單次同步、自動同步、定時同步</li>
</ol>
<blockquote>
<p>同步前先執行 hugo 構建命令，eg. <code>hugo --minify</code><br>
有 Github actions 選單次同步就好，在 Github 不好用時可用。</p>
</blockquote>]]></description></item><item><title>web 开发规则，代码规范</title><link>https://lruihao.cn/posts/dev-rules/</link><pubDate>Thu, 15 Aug 2019 18:30:31 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/dev-rules/</guid><description><![CDATA[<h1 id="精神">精神</h1>
<ul>
<li>絕對不寫死程式</li>
<li>不留不要用的、垃圾程式碼</li>
</ul>
<h1 id="git">Git</h1>
<ul>
<li>Master 的 BUG 必須最少且趨近於零，为最稳定的版本</li>
<li>每次 Commit 訊息應該確實填寫。不可模稜兩可，eg: 修复BUG、增加功能</li>
<li>禁止 Commit IDE 的 project data</li>
<li>禁止上傳垃圾程式碼</li>
<li>Gitea編輯內容類似里程碑和版本描述時要使用Markdown格式</li>
</ul>
<h2 id="分支branch">分支（Branch）</h2>
<ul>
<li>命名規則：應以此分支主要目的命名（修復什麼BUG，新增特定功能）<br>
不可出現版本號，模組ID</li>
<li>合併後的分支應刪除</li>
</ul>
<h2 id="commit">commit</h2>
<ul>
<li>遵循一個功能一個commit的原則</li>
</ul>
<h1 id="restful">Restful</h1>
<ul>
<li>資源名詞站在API的角度思考
<ul>
<li>複數名詞：可以複數筆資料，回傳結果為Array
舉例：GET/users 取得多筆使用者資料
<ul>
<li>刪除，放在複數名詞內，讓Router保持一致性</li>
<li>增加，放在複數名詞內，讓Router保持一致性</li>
</ul>
</li>
<li>單數名詞：僅取得單筆資料，必須指定PK，兩兩一組，回傳結果為Object
舉例：GET/user/{accont} 取得單筆使用者資料，必須指定PK</li>
</ul>
</li>
<li>URL中一律不帶id參數</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">正確範例： calendar_manager/calendar/29
錯誤範例： calendar_manager/calendar/29?id=29
</code></pre></td></tr></table>
</div>
</div><h1 id="命名">命名</h1>
<ul>
<li>命名應根據內容做有意義的命名，讓後續維護人員可以顧名思義!</li>
<li>即使不會發生錯誤，程式碼英文大小寫也需明確區分。</li>
</ul>
<h2 id="語意">語意</h2>
<table>
<thead>
<tr>
<th style="text-align:left">類型</th>
<th style="text-align:left">命名規則</th>
<th style="text-align:left">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">屬性 (Attribute, Property)</td>
<td style="text-align:left">名詞<br/>user_name、userName</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">方法 (Method, Function)</td>
<td style="text-align:left">動詞+名詞<br/>getUserName、get_user_name</td>
<td style="text-align:left">常見的動詞有：get、set、update、delete、remove</td>
</tr>
</tbody>
</table>
<h2 id="字母與分隔">字母與分隔</h2>
<table style="background: #fff;"><tbody><tr><th>語言</th><th>變數 (Variable, Parameter, Argument)</th><th>常數 (Constant)</th><th>物件導向 - 類名 (Class Name)</th><th>物件導向 - 成員 (mebmer)</th></tr><tr><td>HTML、CSS</td><td>全部小寫，不同單字以「-」分隔 <br> user-id</td><td colspan="3"></td></tr><tr><td>JavaScript</td><td><div style="color: #428bca;font-weight: bold;text-align: center;">駝峰式命名法</div>首字小寫，不同單字「首字以大寫」分隔 <br> userId</td><td rowspan="2">全部大寫，不同單字以「_」分隔<br>MAX_COUNT</td><td rowspan="2"><div style="color: #428bca;font-weight: bold;text-align: center;">駝峰式命名法</div>首字大寫，不同單字「首字以大寫」分隔<br>一個檔案放一個 Class<br>檔名即為 Class Name<br>User</td><td rowspan="2"><div style="color: #428bca;font-weight: bold;text-align: center;">駝峰式命名法</div>公有 (public)&nbsp;: 首字小寫，不同單字「首字以大寫」分隔 <br> name, getName<br>私有 (private): _公有命名規則<br> _name, _getName</td></tr><tr><td>PHP</td><td>全部小寫，不同單字以「_」分隔 <br> user_id</td></tr><tr><td>SQL</td><td>由使用者定義的：表名、欄位名<br>全部小寫，不同單字以「_」分隔</td><td>SQL語法、函數 <br> 全部大寫 <br> SELECT、INSERT INTO</td><td colspan="2">-</td></tr></tbody></table>
<h1 id="通用">通用</h1>
<ul>
<li>程式碼撰寫</li>
<li>每個函數應該註解，註解應包含函數工能說明、引數說明。</li>
<li>不必要的代碼不要寫，也禁止放到註解裡面!</li>
<li>if-else 的 {} 嚴禁省略。</li>
<li>{} 起始一律跟在 前一個功能的尾巴，禁止分行</li>
</ul>
<h2 id="正確寫法">正確寫法</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">public function test(){
  //do something
  if($a === $b){
    //do something
  }
}
</code></pre></td></tr></table>
</div>
</div><h2 id="錯誤寫法">錯誤寫法</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">public function test()
{
  //do something
  if($a === $b)
  {
    //do something
  }
}
</code></pre></td></tr></table>
</div>
</div><ul>
<li>程式碼排版
<ul>
<li>任何程式碼應該以 2 個 space 為一個階層做好排版、不可使用 tab。</li>
</ul>
</li>
<li>函數 (Function, Methd)
<ul>
<li>函數宣告時需在函數上方加上函數註解，註解應包含函數說明、引數內容 (引數型態、引數英文名稱、引數說明)、 回傳值內容 (回傳值型態、回傳值說明)</li>
</ul>
</li>
<li>類 (Class)
<ul>
<li>一個類 (Class) 的宣告只能存在一個檔案。</li>
<li>類 (Class) 的宣告檔，檔名必須為類名。</li>
</ul>
</li>
<li>其他
<ul>
<li>連結本地任何其他資源 (圖片、檔案、網站) 皆使用相對路徑，禁止使用絕對路徑，非本地資源除外。</li>
</ul>
</li>
</ul>
<h1 id="html">HTML</h1>
<h2 id="程式碼撰寫">程式碼撰寫</h2>
<ul>
<li>禁止在 HTML 使用 <code>&lt;style&gt;</code>、<code>&lt;script&gt;</code>，一律使用外部檔案引用方式引用 CSS、JavaScript檔案。</li>
<li>HTML 標籤需成雙成對，有頭有尾。</li>
<li>區塊標籤：<code>&lt;tag&gt;&lt;/tag&gt;</code></li>
<li>單標籤：<code>&lt;tag /&gt;</code></li>
<li>禁止使用已被 HTML 捨棄的舊標籤、屬性，如：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="c">&lt;!-- html tag --&gt;</span>
<span class="nt">&lt;center&gt;</span>
<span class="nt">&lt;font&gt;</span>
<span class="nt">&lt;basefont&gt;</span>
<span class="nt">&lt;s&gt;</span>
<span class="nt">&lt;strike&gt;</span>
<span class="nt">&lt;u&gt;</span>
<span class="nt">&lt;listing&gt;</span>
<span class="nt">&lt;plaintext&gt;</span>
<span class="nt">&lt;xmp&gt;</span>
<span class="c">&lt;!-- html attribute --&gt;</span>
align
bgcolor
color
</code></pre></td></tr></table>
</div>
</div><h2 id="資安禁止">資安禁止：</h2>
<blockquote>
<p>禁止使用 readonly 做為參數傳遞</p>
</blockquote>
<h2 id="其他">其他</h2>
<blockquote>
<p>連結本地任何其他資源 (圖片、檔案、網站) 皆使用相對路徑，禁止使用絕對路徑，非本地資源除外。</p>
</blockquote>
<h1 id="css">CSS</h1>
<h2 id="程式碼撰寫-1">程式碼撰寫</h2>
<blockquote>
<p>CSS 的定義應該獨立一個 CSS 檔案，禁止使用 <code>&lt;style&gt;</code> 或 <code>style</code> 屬性直接在 HTML 中定義樣式。</p>
</blockquote>
<h1 id="javascript">JavaScript</h1>
<h2 id="程式碼撰寫-2">程式碼撰寫</h2>
<ul>
<li>禁止使用 HTML 字串，一律使用 Dom 產生 HTML</li>
<li>禁止省略箭頭函數 (Arrow function) 的括弧</li>
</ul>
<p>正確</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">a = (a, b) =&gt; {
  c;
}
</code></pre></td></tr></table>
</div>
</div><p>錯誤 (這是允許的，但造成程式碼閱讀困難，故禁止)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">a  =&gt; c;
</code></pre></td></tr></table>
</div>
</div><h2 id="註解">註解</h2>
<p>JavaScript 註解應該遵循 JSDoc 的標準撰寫</p>
<h3 id="全域變數-global">全域變數 (Global)</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/* global $t, Tiger */
</code></pre></td></tr></table>
</div>
</div><h3 id="常數-constant">常數 (Constant)</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/**
 * 常數說明
 * @type {常數型態}
 */
</code></pre></td></tr></table>
</div>
</div><p><strong>Example</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/**
 * 使用者ID
 * @type {String}
 */
var userId = &#39;Hello&#39;;
</code></pre></td></tr></table>
</div>
</div><h3 id="函數方法-function-method">函數、方法 (Function, Method)</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/**
 * 函數用途說明
 * @param {引數型態} 引數名稱 引數說明
 * @param {引數型態} [選擇性引數名稱] 引數說明
 * @param {引數型態} [選擇性引數名稱=引數預設值] 引數說明
 * @returns {回傳值型態} 回傳值說明
 */
</code></pre></td></tr></table>
</div>
</div><p><strong>Example</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/**
 * 取得使用者
 * @param {Int} userId 使用者ID
 * @param {Object} [options] 其他選項
 * @param {String} [options.query=&#39;a&#39;] 查詢關鍵字 預設為 a
 * @returns {Object} 使用者資料
 */
var getUser = function(userId, options){
  //do something
  return user;
};
</code></pre></td></tr></table>
</div>
</div><h1 id="php">PHP</h1>
<h2 id="前端參數取得">前端參數取得</h2>
<p>參數取得需透過 filter_input 函數取得，不得使用 $_GET、 $_POST</p>
<h2 id="輸出到前台">輸出到前台</h2>
<p>參數命名必須為：全部小寫，不同單字以「_」分隔</p>
<h2 id="註解-1">註解</h2>
<p>PHP 註解應該遵循 PHPDoc 的標準撰寫</p>
<h2 id="成員變數-member">成員變數 (Member)</h2>
<p>成員變數只的是 Class 內的成員變數，我們都會要求替成員變數增加註解說明。通常 Function 的變數除非太特別否則都不需要特別註解說明。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/**
 * 成員變數說明
 * @type {型態}
 */
</code></pre></td></tr></table>
</div>
</div><p><strong>Example</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/**
 * 使用者ID
 * @type {String}
 */
$userId = &#39;Hello&#39;;
</code></pre></td></tr></table>
</div>
</div><h2 id="函數方法-function-method-1">函數、方法 (Function, Method)</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/**
 * 函數用途說明
 * @param 引數型態 引數名稱 引數說明
 * @option 引數選項型態 引數選項名稱 引數選項說明
 * @uses 全域變數 全域變數說明
 * @returns 回傳值型態 回傳值說明
 */
</code></pre></td></tr></table>
</div>
</div><p><strong>Example</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/**
 * 取得使用者
 * @param int userId 使用者ID
 * @param object options 其他選項
 * @option string options[&#39;query&#39;] 查詢關鍵字
 * @uses $_POST[&#39;role_id&#39;] 從前端以POST取得角色ID
 * @returns object 使用者資料
 */
function getUser($userId, $options){
  //do something
  return $user;
};
</code></pre></td></tr></table>
</div>
</div><h1 id="database">Database</h1>
<ul>
<li>禁止使用 Table Join。</li>
<li>禁止使用 Oracle Trigger。</li>
<li>禁止將查詢資料庫的 SQL 放在迴圈中查詢</li>
</ul>
<h2 id="sql-撰寫">SQL 撰寫</h2>
<ul>
<li>屬於 SQL 語法使用大寫 (SELECT, WHERE, INSERT etc..)</li>
<li>屬於使用者自己定義的使用小寫 (表名 table name, 欄位名 column name etc..)</li>
<li>表名、欄位名前後需加上 `</li>
</ul>
<p><strong>Example</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="w"> </span><span class="k">VALUES</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;b&#39;</span><span class="p">);</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h1 id="統一用詞">統一用詞</h1>
<blockquote>
<p>僅為舉例，不限與此。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">用詞</th>
<th style="text-align:left">統一</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">最后</td>
<td style="text-align:left">最後</td>
</tr>
<tr>
<td style="text-align:left">關閉</td>
<td style="text-align:left">取消</td>
</tr>
<tr>
<td style="text-align:left">存儲<br/>保存<br/>修改</td>
<td style="text-align:left">儲存</td>
</tr>
<tr>
<td style="text-align:left">搜尋</td>
<td style="text-align:left">查詢</td>
</tr>
</tbody>
</table>]]></description></item><item><title>hexo 博客源码备份</title><link>https://lruihao.cn/posts/blog-backup/</link><pubDate>Sat, 03 Nov 2018 12:49:28 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/blog-backup/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/blog-backup/images/1.png" referrerpolicy="no-referrer">
            </div><h3 id="备份hexo博客">备份hexo博客</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">//如果themes/next(主题文件)下面有.git，请删除这个.git文件夹。
cd hexo
git init  //初始化本地仓库
git add source themes scaffolds _config.yml package.json package-lock.json  //将必要的文件依次添加
git commit -m &#34;blog hexo&#34;
git branch hexo  //新建hexo分支
git checkout hexo  //切换到hexo分支上
git remote add origin git@github.com:username/username.github.io.git  //将本地与Github项目对接
git push origin hexo  //push到Github项目的hexo分支上
</code></pre></td></tr></table>
</div>
</div><h3 id="在其他终端克隆和更新hexo博客">在其他终端克隆和更新hexo博客</h3>
<blockquote>
<p>nodejs,git,hexo已经安装好,即搭建完成</p>
</blockquote>
<h4 id="克隆hexo博客备份">克隆hexo博客备份</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git clone -b hexo git@github.com:username/username.github.io.git  //将Github中hexo分支clone到本地
cd user.github.io
npm install  //注意，这里一定要切换到刚刚clone的文件夹内执行，安装必要的所需组件，不用再init
</code></pre></td></tr></table>
</div>
</div><p>这样我们的备份文件就会原封不动的拷贝到本地。</p>
<h4 id="写新文章并备份和部署备用操作">写新文章并备份和部署（备用操作）</h4>
<blockquote>
<p>其实源码拷下来了，这步不做我们也知道怎么做了，完全没必要按照教程死搬硬套。灵活一点就行了。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">//进入username.github.io文件夹,应是hexo分支
git pull origin hexo //本地和远端的融合
hexo new post &#34;new post name&#34;  //写新文章
git add source
git commit -m &#34;xxx&#34;
git push origin hexo  //备份
hexo d -g  //部署
</code></pre></td></tr></table>
</div>
</div><p><a href="https://blog.csdn.net/Monkey_LZL/article/details/60870891" target="_blank" rel="noopener noreffer">参考</a></p>
]]></description></item><item><title>使用 Git 上传代码到 github, coding 等仓库</title><link>https://lruihao.cn/posts/gituse/</link><pubDate>Fri, 26 Oct 2018 21:11:02 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/gituse/</guid><description><![CDATA[<h3 id="config">config</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git config --global user.name <span class="s2">&#34;Your Name&#34;</span>
git config --global user.email <span class="s2">&#34;email@example.com&#34;</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>第一次使用git的时候需要设置提交者信息。<br>
注意：<br>
如果用了 <code>--global</code> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。<br>
如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 <code>--global</code> 选项重新配置即可，新的设定保存在当前项目的 <code>.git/config</code> 文件里。</p>
</blockquote>
<h3 id="生成ssh">生成ssh</h3>
<p>由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：<br>
使用以下命令生成 SSH Key：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">ssh-keygen -t rsa -C &#34;youremail@example.com&#34;
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>后面的 <code>your_email@youremail.com</code> 改为你在 Github 上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在 <code>C:\Users\用户名\</code>或者<code>~/</code> 下生成 <code>.ssh</code>文件夹，进去，打开 <code>id_rsa.pub</code>，复制里面的 key。去github、coding等平台配置SSH公钥（根据自己情况）</p>
</blockquote>
<h3 id="创建本地代码库">创建本地代码库</h3>
<p>在本地创建一个文件夹，作为你上传代码的本地仓库，在这个文件夹内点击右键，选择Git Bash Here，首先要初始化本地仓库:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git init
</code></pre></td></tr></table>
</div>
</div><p>接下来进行远程代码库克隆（事先在coding等中建立一个项目，就是你需要链接的仓库）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git clone https://github.com/Lruihao/Lruihao.github.io.git
</code></pre></td></tr></table>
</div>
</div><p>克隆时会出现输入账号密码的环节正确输入即可。</p>
<h3 id="代码推送重点">代码推送（重点）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git status
git add *
git commit -m &#34;代码备注随便写&#34;
git push origin master
</code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener noreffer">Gearn Git Branching</a></li>
</ul>
]]></description></item><item><title>linux/centos 下的安装git</title><link>https://lruihao.cn/posts/linux-git/</link><pubDate>Sat, 22 Sep 2018 22:28:45 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/linux-git/</guid><description><![CDATA[<h3 id="下载git">下载git</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">wget https://github.com/git/git/archive/v2.14.1.zip
</code></pre></td></tr></table>
</div>
</div><h3 id="安装依赖">安装依赖</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">sudo yum -y install zlib-devel openssl-devel cpio expat-devel gettext-devel curl-devel perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker
</code></pre></td></tr></table>
</div>
</div><h3 id="解压git">解压git</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">unzip v2.14.1.zip
</code></pre></td></tr></table>
</div>
</div><p>注：
unzip命令用不了，具体步骤如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#yum list | grep zip/unzip 
#yum install zip
#yum install unzip
</code></pre></td></tr></table>
</div>
</div><p>基本完成，如果在编译的时候出现错误：<code>gcc : error trying to exec 'cc1plus': execvp : No sunch file or directory</code><br>
可以用<code>gcc -v/g++ -v</code> 来查看gcc 版本，会发现没有安装。安装如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">#yum list | grep gcc
#yum install gcc-c++
#yum install unzip
</code></pre></td></tr></table>
</div>
</div><h3 id="将git安装到usrlocal上">将git安装到/usr/local上</h3>
<p>先进入git文件夹<br>
编译<br>
安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">cd git-2.14.1
make prefix=/usr/local all
make prefix=/usr/local install
</code></pre></td></tr></table>
</div>
</div><h3 id="验证是否安装完成">验证是否安装完成</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">git --version
</code></pre></td></tr></table>
</div>
</div><p>&hellip;</p>
]]></description></item><item><title>git index.lock</title><link>https://lruihao.cn/posts/git-index-lock/</link><pubDate>Tue, 14 Aug 2018 19:21:23 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/git-index-lock/</guid><description><![CDATA[<p>在git没有运行完成之前强制关闭，下次提交的时候会产以下生错误，或者类似的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">fatal: Unable to create <span class="s1">&#39;/xxx/xx/.git/index.lock&#39;</span>: File exists.

If no other git process is currently running, this probably means a
git process crashed in this repository earlier. Make sure no other git
process is running and remove the file manually to <span class="k">continue</span>.
</code></pre></td></tr></table>
</div>
</div><p>原因是在你进行某些比较费时的git操作时自动生成，操作结束后自动删除，相当于一个锁定文件，目的在于防止对一个目录同时进行多个操作。</p>
<p>有时强制关闭进行中的git操作，这个文件没有被自动删除，之后你就无法进行其他操作，必须手动删除，进入.git文件中删除，打开显示隐藏文件。如果没有看见.git文件夹，可以直接用命令<code> rm -f ./.git/index.lock</code>。之后就可以正常使用。</p>
]]></description></item></channel></rss>