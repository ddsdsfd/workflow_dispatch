<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>C++ - 标签 - 菠菜眾長</title><link>https://lruihao.cn/tags/c++/</link><description>C++ - 标签 - 菠菜眾長</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1024@lruihao.cn (Lruihao)</managingEditor><webMaster>1024@lruihao.cn (Lruihao)</webMaster><lastBuildDate>Wed, 01 Aug 2018 21:45:50 +0000</lastBuildDate><atom:link href="https://lruihao.cn/tags/c++/" rel="self" type="application/rss+xml"/><item><title>小希的迷宫-HDU-1272(并查集or树性质)</title><link>https://lruihao.cn/posts/hdu1272/</link><pubDate>Wed, 01 Aug 2018 21:45:50 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/hdu1272/</guid><description><![CDATA[<h2 id="题目链接小希的迷宫httpacmhdueducnshowproblemphppid1272">题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1272" target="_blank" rel="noopener noreffer">小希的迷宫</a></h2>
<h2 id="并查集">并查集：</h2>
<ul>
<li>无回路</li>
<li>单连通</li>
</ul>
<p>并查集做，首先想到的是判断两个点是否连通，不连通就合并，已连通的话说明会形成<strong>回路</strong>，则可以判定No，交了一发错了。<br>
想了一下没有考虑到多个连通域的情况，该题必须只有<strong>一个连通域</strong></p>
<h2 id="树的性质">树的性质：</h2>
<p>既然单连通无回路，则这肯定是一棵树；那么edge=v-1;</p>]]></description></item><item><title>畅通工程-HDU-1232(并查集经典模板)</title><link>https://lruihao.cn/posts/%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/</link><pubDate>Tue, 31 Jul 2018 11:08:43 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/</guid><description><![CDATA[<h4 id="并查集入门推荐超有爱的并查集httpsblogcsdnnetniushuai666articledetails6662911">并查集入门推荐：<a href="https://blog.csdn.net/niushuai666/article/details/6662911" target="_blank" rel="noopener noreffer">超有爱的并查集~</a></h4>
<h4 id="题目链接畅通工程httpacmhdueducnshowproblemphppid1232">题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1232" target="_blank" rel="noopener noreffer">畅通工程</a></h4>
<h4 id="题意分析">题意分析：</h4>
<p>首先在地图上给你若干个城镇，这些城镇都可以看作点，然后告诉你哪些对城镇之间是有道路直接相连的。最后要解决的是整幅图的连通性问题。比如随意给你两个点，让你判断它们是否连通，或者问你整幅图一共有几个连通分支，也就是被分成了几个互相独立的块。像畅通工程这题，问还需要修几条路，实质就是求有几个连通分支。</p>]]></description></item><item><title>牛客练习赛23</title><link>https://lruihao.cn/posts/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B23/</link><pubDate>Fri, 27 Jul 2018 21:56:08 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B23/</guid><description><![CDATA[<p>两题水过，暴力，找规律。。</p>
<h2 id="托米的赌球httpswwwnowcodercomacmcontest156a"><a href="https://www.nowcoder.com/acm/contest/156/A" target="_blank" rel="noopener noreffer">托米的赌球</a></h2>
<h2 id="托米的划分httpswwwnowcodercomacmcontest156b"><a href="https://www.nowcoder.com/acm/contest/156/B" target="_blank" rel="noopener noreffer">托米的划分</a></h2>]]></description></item><item><title>Adjacent Replacements</title><link>https://lruihao.cn/posts/adjacent-replacements/</link><pubDate>Sun, 22 Jul 2018 11:54:14 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/adjacent-replacements/</guid><description><![CDATA[A. Adjacent Replacements 第一次打cf就做出一道这样的找规律的题，打到自闭。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include&lt;bits/stdc++.h&gt;using namespace std; int main(){ int n,a[1001]; cin&gt;&gt;n; int i; int flag=0; for(i=0;i&lt;n;i++){ cin&gt;&gt;a[i]; if(!(a[i]&amp;1)) a[i]--; if(!flag) {cout&lt;&lt;a[i];flag=1;} else cout&lt;&lt;&#34; &#34;&lt;&lt;a[i]; } return 0; }]]></description></item><item><title>Wannafly挑战赛20-染色</title><link>https://lruihao.cn/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B20-%E6%9F%93%E8%89%B2/</link><pubDate>Sun, 22 Jul 2018 11:46:25 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B20-%E6%9F%93%E8%89%B2/</guid><description>链接:https://www.nowcoder.com/acm/contest/133/A 来源:牛客网 题目描述 现在有一棵被Samsara-K</description></item><item><title>BFS求最短路</title><link>https://lruihao.cn/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/</link><pubDate>Sun, 22 Jul 2018 11:31:05 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/</guid><description>&lt;p>假设有一个n行m列的迷宫，每个单位要么是空地(用1表示)要么是障碍物(用0表示).&lt;br>
如和找到从起点到终点的最短路径？利用BFS搜索，逐步计算出每个节点到起点的最短距离，&lt;br>
以及最短路径每个节点的前一个节点。最终将生成一颗以起点为根的BFS树。此时BFS可以求出任意一点到起点的距离。&lt;/p></description></item><item><title>深搜广搜</title><link>https://lruihao.cn/posts/dfs_bfs/</link><pubDate>Sun, 22 Jul 2018 11:25:14 +0800</pubDate><author>作者</author><guid>https://lruihao.cn/posts/dfs_bfs/</guid><description>广度优先搜索（BFS） 广度优先搜索在进一步遍历图中顶点之前，先访问当前顶点的所有邻接结点。访问了就入队。 深度优先搜索（DFS） 深度优先搜索在</description></item><item><title>Wannafly挑战赛18-序列</title><link>https://lruihao.cn/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B18-%E5%BA%8F%E5%88%97/</link><pubDate>Wed, 18 Jul 2018 08:40:21 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/wannafly%E6%8C%91%E6%88%98%E8%B5%9B18-%E5%BA%8F%E5%88%97/</guid><description>时间限制：C/C++ 1秒，其他语言2秒 空间限制：C/C++ 262144K，其他语言524288K 64bit IO Format: %lld 题目描述 有一个长度为n的序列a，已知</description></item><item><title>B.Higher h-index</title><link>https://lruihao.cn/posts/b-higher/</link><pubDate>Thu, 14 Jun 2018 22:47:28 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/b-higher/</guid><description><![CDATA[<h2 id="b-higher-h-index">B. Higher h-index</h2>
<p>The h-index of an author is the largest h where he has at least h papers with citations not less than h.<br>
Bobo has no papers and he is going to publish some subsequently. If he works on a paper for x hours, the<br>
paper will get (a·x) citations, where a is a known constant. It’s clear that x should be a positive integer.<br>
There is also a trick – one can cite his own papers published earlier.</p>
<p>Given Bobo has n working hours, ﬁnd the maximum h-index of him.</p>]]></description></item><item><title>A.Easy h-index</title><link>https://lruihao.cn/posts/a-easy/</link><pubDate>Thu, 14 Jun 2018 22:36:58 +0000</pubDate><author>作者</author><guid>https://lruihao.cn/posts/a-easy/</guid><description><![CDATA[<h2 id="a-easy-h-index">A. Easy h-index</h2>
<p>The h-index of an author is the largest h where he has at least h papers with citations not less than h.<br>
Bobo has published many papers. Given a0,a1,a2,&hellip;,an which means Bobo has published ai papers with<br>
itations exactly i, ﬁnd the h-index of Bobo.</p>]]></description></item></channel></rss>